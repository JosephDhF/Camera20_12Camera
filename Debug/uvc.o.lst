   1              		.cpu arm926ej-s
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"uvc.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.align	2
  18              	esUVCApplnLPMRqtCB:
  19              	.LFB9:
  20              		.file 1 "../uvc.c"
   1:../uvc.c      **** /*
   2:../uvc.c      ****  ## Cypress FX3 Camera Kit Source file (uvc.c)
   3:../uvc.c      ****  ## ===========================
   4:../uvc.c      ****  ##
   5:../uvc.c      ****  ##  Copyright Cypress Semiconductor Corporation, 2010-2012,
   6:../uvc.c      ****  ##  All Rights Reserved
   7:../uvc.c      ****  ##  UNPUBLISHED, LICENSED SOFTWARE.
   8:../uvc.c      ****  ##
   9:../uvc.c      ****  ##  CONFIDENTIAL AND PROPRIETARY INFORMATION
  10:../uvc.c      ****  ##  WHICH IS THE PROPERTY OF CYPRESS.
  11:../uvc.c      ****  ##
  12:../uvc.c      ****  ##  Use of this file is governed
  13:../uvc.c      ****  ##  by the license agreement included in the file
  14:../uvc.c      ****  ##
  15:../uvc.c      ****  ##     <install>/license/license.txt
  16:../uvc.c      ****  ##
  17:../uvc.c      ****  ##  where <install> is the Cypress software
  18:../uvc.c      ****  ##  installation root directory path.
  19:../uvc.c      ****  ##
  20:../uvc.c      ****  ## ===========================
  21:../uvc.c      **** */
  22:../uvc.c      **** 
  23:../uvc.c      **** /* This project implements a USB Video Class device that streams uncompressed video
  24:../uvc.c      ****    data from an image sensor to a USB host PC.
  25:../uvc.c      **** 
  26:../uvc.c      ****    Please refer to the Cypress Application Note: "AN75779: Interfacing an Image
  27:../uvc.c      ****    Sensor to EZ-USB FX3 in a USB video class (UVC) Framework" (http://www.cypress.com/?rID=62824)
  28:../uvc.c      ****    for a detailed design description of this application.
  29:../uvc.c      **** 
  30:../uvc.c      ****    As the UVC class driver on Windows hosts does not support burst enabled Isochronous
  31:../uvc.c      ****    endpoints on USB 3.0, this implementation makes use of Bulk endpoints for the video
  32:../uvc.c      ****    streaming.
  33:../uvc.c      ****  */
  34:../uvc.c      **** /*****************************************
  35:../uvc.c      ****  *
  36:../uvc.c      ****  * The code is modified at 1/2014
  37:../uvc.c      ****  * 1. add a thread for I2C commands handle
  38:../uvc.c      ****  * 2. add UVC Camera Terminal Requests handle
  39:../uvc.c      ****  * 3. add UVC Extension Unit Requests handle
  40:../uvc.c      ****  * 4. more UVC Processing Unit Requests added
  41:../uvc.c      ****  * 5. Support USB3.0 1080p 25/30fps and USB2.0 960x540p 25/30 fps
  42:../uvc.c      ****  *
  43:../uvc.c      ****  ****************************************/
  44:../uvc.c      **** 
  45:../uvc.c      **** #include <cyu3system.h>
  46:../uvc.c      **** #include <cyu3os.h>
  47:../uvc.c      **** #include <cyu3dma.h>
  48:../uvc.c      **** #include <cyu3error.h>
  49:../uvc.c      **** #include <cyu3usb.h>
  50:../uvc.c      **** #include <cyu3uart.h>
  51:../uvc.c      **** #include <cyu3gpif.h>
  52:../uvc.c      **** #include <cyu3i2c.h>
  53:../uvc.c      **** #include <cyu3gpio.h>
  54:../uvc.c      **** #include <cyu3pib.h>
  55:../uvc.c      **** #include <cyu3utils.h>
  56:../uvc.c      **** 
  57:../uvc.c      **** #include "uvc.h"
  58:../uvc.c      **** #include "sensor.h"
  59:../uvc.c      **** #include "camera_ptzcontrol.h"
  60:../uvc.c      **** #include "cyfxgpif2config.h"
  61:../uvc.c      **** 
  62:../uvc.c      **** #ifndef CAM720
  63:../uvc.c      **** #ifdef GPIFIIM
  64:../uvc.c      **** #include "cyfxgpif2config_usb2.h"//
  65:../uvc.c      **** #else
  66:../uvc.c      **** #include "cyfxgpif2config_usb2_720.h"//
  67:../uvc.c      **** #endif
  68:../uvc.c      **** #else
  69:../uvc.c      **** #include "cyfxgpif2config_usb2_720.h"
  70:../uvc.c      **** #endif
  71:../uvc.c      **** 
  72:../uvc.c      **** #include "cmdqu.h"
  73:../uvc.c      **** /*
  74:../uvc.c      ****  ##Videology Imaging Solution Inc. USB UVC Stack
  75:../uvc.c      **** 
  76:../uvc.c      ****  ## source file : CX3RDKOV5640.c
  77:../uvc.c      ****  ## ===========================
  78:../uvc.c      ****  ##
  79:../uvc.c      ****  ##  Copyright E-Con Systems, 2013-2014,
  80:../uvc.c      ****  ##  All Rights Reserved
  81:../uvc.c      ****  ##  UNPUBLISHED, LICENSED SOFTWARE.
  82:../uvc.c      ****  ##
  83:../uvc.c      ****  ##  CONFIDENTIAL AND PROPRIETARY INFORMATION
  84:../uvc.c      ****  ##  PROPERTY OF ECON SYSTEMS
  85:../uvc.c      **** 
  86:../uvc.c      ****  ## www.e-consystems.com
  87:../uvc.c      ****  ##
  88:../uvc.c      ****  ##
  89:../uvc.c      ****  ## ===========================
  90:../uvc.c      **** */
  91:../uvc.c      **** 
  92:../uvc.c      **** #include "cyu3socket.h"
  93:../uvc.c      **** #include "sock_regs.h"
  94:../uvc.c      **** //#include "cyu3mipicsi.h"
  95:../uvc.c      **** 
  96:../uvc.c      **** //#include "CX3OV5640Lib.h"
  97:../uvc.c      **** //#include "CX3RDKOV5640.h"
  98:../uvc.c      **** 
  99:../uvc.c      **** /* Event generated on Timer overflow*/
 100:../uvc.c      **** #define ES_TIMER_RESET_EVENT		(1<<4)
 101:../uvc.c      **** 
 102:../uvc.c      **** /* Event generated on a USB Suspend Request*/
 103:../uvc.c      **** #define ES_USB_SUSP_EVENT_FLAG		(1<<5)
 104:../uvc.c      **** 
 105:../uvc.c      **** /* Firmware version*/
 106:../uvc.c      **** #define MajorVersion 				1
 107:../uvc.c      **** #define MinorVersion 				3
 108:../uvc.c      **** #define SubVersion					133
 109:../uvc.c      **** #define SubVersion1					309
 110:../uvc.c      **** //#define RESET_TIMER_ENABLE 1
 111:../uvc.c      **** 
 112:../uvc.c      **** /*************************************************************************************************
 113:../uvc.c      ****                                          Global Variables
 114:../uvc.c      ****  *************************************************************************************************/
 115:../uvc.c      **** static CyU3PThread   uvcAppThread;                      /* UVC video streaming thread. */
 116:../uvc.c      **** static CyU3PThread   uvcAppEP0Thread;                   /* UVC control request handling thread. */
 117:../uvc.c      **** static CyU3PEvent    glFxUVCEvent;                      /* Event group used to signal threads. */
 118:../uvc.c      **** CyU3PDmaMultiChannel glChHandleUVCStream;               /* DMA multi-channel handle. */
 119:../uvc.c      **** CyU3PDmaMultiChannel glChHandleStillStream;             /* DMA multi-channel handle for still image
 120:../uvc.c      **** CyU3PDmaChannel glChHandleInterStat;                    /* DMA channel handle for interrupt status.
 121:../uvc.c      **** 
 122:../uvc.c      **** uint8_t     *glInterStaBuffer;                          /* Buffer used to send interrrupt status. *
 123:../uvc.c      **** uint8_t     snapButFlag = 1;							/* snap shot button flag: 0 = masked; 1 = unmasked;*/
 124:../uvc.c      **** uint8_t     testSnap = 0;				                /* used for debugging */
 125:../uvc.c      **** /**************** variables relative to the command queue operation ****************/
 126:../uvc.c      **** static CyU3PThread   i2cAppThread;      //i2c control command handling thread
 127:../uvc.c      **** VdRingBuf        cmdQu;                 //the command queue
 128:../uvc.c      **** VdRingBuf        statQu;                //the state queue
 129:../uvc.c      **** CyU3PMutex       cmdQuMux;
 130:../uvc.c      **** CyU3PMutex       staQuMux;
 131:../uvc.c      **** CyU3PMutex       timMux;
 132:../uvc.c      **** CyU3PMutex       imgHdMux;
 133:../uvc.c      **** 
 134:../uvc.c      **** uint8_t  bRequest, bType,bRType, bTarget;
 135:../uvc.c      **** uint16_t wValue, wIndex, wLength;
 136:../uvc.c      **** 
 137:../uvc.c      **** 
 138:../uvc.c      **** #ifdef RESET_TIMER_ENABLE
 139:../uvc.c      **** #define TIMER_PERIOD	(500)
 140:../uvc.c      **** 
 141:../uvc.c      **** static CyU3PTimer        UvcTimer;
 142:../uvc.c      **** 
 143:../uvc.c      **** static void UvcAppProgressTimer (uint32_t arg)
 144:../uvc.c      **** {
 145:../uvc.c      ****     /* This frame has taken too long to complete.
 146:../uvc.c      ****      * Abort it, so that the next frame can be started. */
 147:../uvc.c      ****     CyU3PEventSet(&glTimerEvent, ES_TIMER_RESET_EVENT,CYU3P_EVENT_OR);
 148:../uvc.c      **** }
 149:../uvc.c      **** #endif
 150:../uvc.c      **** 
 151:../uvc.c      **** volatile int32_t glDMATxCount = 0;          /* Counter used to count the Dma Transfers */
 152:../uvc.c      **** volatile int32_t glDmaDone = 0;
 153:../uvc.c      **** volatile uint8_t glActiveSocket = 0;
 154:../uvc.c      **** volatile CyBool_t doLpmDisable = CyTrue;	/* Flag used to Enable/Disable low USB 3.0 LPM */
 155:../uvc.c      **** CyBool_t glHitFV = CyFalse;             	/* Flag used for state of FV signal. */
 156:../uvc.c      **** CyBool_t glMipiActive = CyFalse;        	/* Flag set to true when Mipi interface is active. Used fo
 157:../uvc.c      **** CyBool_t glIsClearFeature = CyFalse;    	/* Flag to signal when AppStop is called from the ClearFea
 158:../uvc.c      **** CyBool_t glPreviewStarted = CyFalse;		/* Flag to support Mac os */
 159:../uvc.c      **** 
 160:../uvc.c      **** CyBool_t        isUsbConnected = CyFalse;               /* Whether USB connection is active. */
 161:../uvc.c      **** CyU3PUSBSpeed_t usbSpeed = CY_U3P_NOT_CONNECTED;        /* Current USB connection speed. */
 162:../uvc.c      **** 
 163:../uvc.c      **** /* UVC Header */
 164:../uvc.c      **** uint8_t glUVCHeader[CY_FX_UVC_MAX_HEADER] =
 165:../uvc.c      **** {
 166:../uvc.c      ****     0x0C,                           /* Header Length */
 167:../uvc.c      ****     0x8C,                           /* Bit field header field */
 168:../uvc.c      ****     0x00,0x00,0x00,0x00,            /* Presentation time stamp field */
 169:../uvc.c      ****     0x00,0x00,0x00,0x00,0x00,0x00   /* Source clock reference field */
 170:../uvc.c      **** };
 171:../uvc.c      **** 
 172:../uvc.c      **** /* Video Probe Commit Control */
 173:../uvc.c      **** uint8_t glCommitCtrl[CY_FX_UVC_MAX_PROBE_SETTING_ALIGNED];
 174:../uvc.c      **** uint8_t glCurrentFrameIndex = 1;
 175:../uvc.c      **** uint8_t glStillCommitCtrl[CY_FX_MAX_STILL_PROBE_SETTING_ALIGNED];
 176:../uvc.c      **** uint8_t glCurrentStillFrameIndex = 1;
 177:../uvc.c      **** uint8_t glStillTriggerCtrl = 0;
 178:../uvc.c      **** uint8_t glFrameIndexToSet = 0;
 179:../uvc.c      **** CyBool_t glStillCaptureStart = CyFalse;
 180:../uvc.c      **** CyBool_t glStillCaptured = CyFalse;
 181:../uvc.c      **** uint8_t glStillSkip = 0;
 182:../uvc.c      **** 
 183:../uvc.c      **** CyBool_t glIsApplnActive = CyFalse;             /* Whether the Mipi->USB application is active or n
 184:../uvc.c      **** CyBool_t glIsConfigured = CyFalse;              /* Whether Application is in configured state or no
 185:../uvc.c      **** CyBool_t glIsStreamingStarted = CyFalse;        /* Whether streaming has started - Used for MAC OS 
 186:../uvc.c      **** 
 187:../uvc.c      **** /* DMA Channel */
 188:../uvc.c      **** CyU3PDmaMultiChannel glChHandleUVCStream;       /* DMA Channel Handle for UVC Stream  */
 189:../uvc.c      **** uint16_t ES_UVC_STREAM_BUF_SIZE=0;
 190:../uvc.c      **** uint16_t ES_UVC_DATA_BUF_SIZE=0;
 191:../uvc.c      **** uint8_t ES_UVC_STREAM_BUF_COUNT=0;
 192:../uvc.c      **** 
 193:../uvc.c      **** uint8_t g_IsAutoFocus=1;						/* Check the AutoFocus is Enabled or not*/
 194:../uvc.c      **** 
 195:../uvc.c      **** /* USB control request processing variables*/
 196:../uvc.c      **** #if 1
 197:../uvc.c      **** 
 198:../uvc.c      **** uint8_t glGet_Info = 0;
 199:../uvc.c      **** int16_t gl8GetControl = 0;
 200:../uvc.c      **** int16_t gl8SetControl = 0;
 201:../uvc.c      **** int16_t gl16GetControl = 0;
 202:../uvc.c      **** 
 203:../uvc.c      **** int32_t gl32GetControl = 0;
 204:../uvc.c      **** 
 205:../uvc.c      **** #endif
 206:../uvc.c      **** 
 207:../uvc.c      **** #ifndef CAM720
 208:../uvc.c      **** volatile static CyBool_t WDRflag = CyTrue;              /* the flag for WDR mode. It's initialized 
 209:../uvc.c      **** #else
 210:../uvc.c      **** volatile static CyBool_t WDRflag = CyFalse;
 211:../uvc.c      **** #endif
 212:../uvc.c      **** volatile static CyBool_t stiflag = CyFalse;             /* Whether the image is still image */
 213:../uvc.c      **** 
 214:../uvc.c      **** uint8_t glcommitcount=0,glcheckframe=1;
 215:../uvc.c      **** /************ control parameters array ***********
 216:../uvc.c      ****  *  the first D is the index of functionality, the second D is the index of parameters.
 217:../uvc.c      ****  *    e.g.
 218:../uvc.c      ****  *     1th D: backlight compensation, brightness, contrast, hue, saturation, sharpness, gamma, WBT,
 219:../uvc.c      ****  *     2nd D: RegAdd1, RegAdd2, length, Min1, Min2, Max1, Max2, Res1, Res2, InfoReq1, InfoReq2, Def
 220:../uvc.c      ****  *            curVal1, curVal2 (index:14th), device address, checked flag, command available flag
 221:../uvc.c      ****  **************************************************/
 222:../uvc.c      **** #define BLCIndex  0 // the back light compensation index
 223:../uvc.c      **** #define CamModeIndex 28 // the index of camera mode
 224:../uvc.c      **** static uint8_t CtrlParArry[32][24]={
 225:../uvc.c      **** #ifndef CAM720
 226:../uvc.c      **** 		{/*0*/BLCModeReg          , BLCModeReg           , 2,    0,    0,    3,    0, 1, 0, 3, 0,   0, 0,
 227:../uvc.c      **** #else
 228:../uvc.c      **** 		{/*0*/BLCModeReg          , BLCModeReg           , 2,    0,    0,    3,    0, 1, 0, 3, 0,   0, 0,
 229:../uvc.c      **** #endif
 230:../uvc.c      **** 		{/*1*/BrightnessReg1      , BrightnessReg0       , 2,    0,    0,  63,     0, 1, 0, 3, 0, 31, 0, 
 231:../uvc.c      **** 		{/*2*/0x7/*ContrastReg*/  , 0x7/*ContrastReg*/   , 2,    16,   0,  64,     0, 1, 0, 3, 0, 40, 0, 
 232:../uvc.c      **** 		{/*3*/0                   , 0                    , 2,    0,    0,  100,    0, 1, 0, 3, 0,   0, 0,
 233:../uvc.c      **** 		{/*4*/MainsFreqReg        , MainsFreqReg         , 2,    0,    0,    1,    0, 1, 0, 3, 0,   1, 0,
 234:../uvc.c      **** 		{/*5*/HuectrlRegGr        , HuectrlRegBlu        , 2,    0,    0,  255,    0, 1, 0, 3, 0, 128, 0,
 235:../uvc.c      **** 		{/*6*/SaturationRegR      , SaturationRegB       , 2,    0,    0,  100,    0, 1, 0, 3, 0,  50, 0,
 236:../uvc.c      **** 		{/*7*/SharpnessReg        , SharpnessReg         , 2,    0,    0,   14,    0, 1, 0, 3, 0,   0, 0,
 237:../uvc.c      **** 		{/*8*/0                   , 0                    , 2,    0,    0,  100,    0, 1, 0, 3, 0,   0, 0,
 238:../uvc.c      **** 		{/*9*/0x8/*WBModeReg*/    , 0x8/*WBModeReg*/     , 2,    0,    0,    5,    0, 1, 0, 3, 0,   0, 0,
 239:../uvc.c      **** 		{/*A*/0                   , 0                    , 2,    0,    0,   64,    0, 1, 0, 3, 0,   0, 0,
 240:../uvc.c      **** 		{/*B*/ManuBWBReg          , ManuRWBReg           , 4,    0,    0,   64,    0, 1, 0, 3, 0,  32,56,
 241:../uvc.c      **** 		{/*C*/0                   , 0                    , 2,    0,    0,  100,    0, 1, 0, 3, 0,   0, 0,
 242:../uvc.c      **** 		{/*D*/0                   , 0                    , 2,    0,    0,  100,    0, 1, 0, 3, 0,   0, 0,
 243:../uvc.c      **** 		{/*E*/DigZoomReg          , DigZoomReg           , 2,    0,    0,   27,    0, 1, 0, 3, 0,   0, 0,
 244:../uvc.c      **** 		{/*F*/0                   , 0                    , 2,    0,    0,  100,    0, 1, 0, 3, 0,   0, 0,
 245:../uvc.c      **** 		{/*10*/ShutterReg          , ShutterReg           , 2,    0,    0,   18,    0, 1, 0, 3, 0,   0, 0
 246:../uvc.c      **** 		{/*11*/SenseUpReg          , SenseUpReg           , 2,    0,    0,    9,    0, 1, 0, 3, 0,   0, 0
 247:../uvc.c      **** #ifndef CAM720
 248:../uvc.c      **** 		{/*12*/MirrModeReg         , MirrModeReg          , 2,    0,    0,    3,    0, 1, 0, 3, 0,   0, 0
 249:../uvc.c      **** #else
 250:../uvc.c      **** 		{/*12*/MirrModeReg         , MirrModeReg          , 2,    0,    0,    3,    0, 1, 0, 3, 0,   0, 0
 251:../uvc.c      **** #endif
 252:../uvc.c      **** 		{/*13*/NoiRedu3DModReg     , NoiRedu3DModReg      , 2,    0,    0,    1,    0, 1, 0, 3, 0,   0, 0
 253:../uvc.c      **** 		{/*14*/NoiRedu3DLevReg     , NoiRedu3DLevReg      , 1,    0,    0,   64,    0, 1, 0, 3, 0,  32, 0
 254:../uvc.c      **** 		{/*15*/DayNightModReg      , DayNightModReg       , 2,    0,    0,    2,    0, 1, 0, 3, 0,   0, 0
 255:../uvc.c      **** 		{/*16*/DayNightDlyReg      , DayNightDlyReg       , 2,    0,    0,   63,    0, 1, 0, 3, 0,   0, 0
 256:../uvc.c      **** 		{/*17*/DayNightLevReg      , DayNightLevReg       , 2,    0,    0,  100,    0, 1, 0, 3, 0,  16, 0
 257:../uvc.c      **** 		{/*18*/NightDayLevReg      , NightDayLevReg       , 2,    0,    0,  100,    0, 1, 0, 3, 0,  16, 0
 258:../uvc.c      **** 		{/*19*/AExModeReg          , AExAGCReg            , 4,    0,    0,  255,    0, 1, 0, 3, 0,   0,32
 259:../uvc.c      **** 		{/*1A*/AExReferleveReg0    , AExReferleveReg0     , 2,    0,    0,   63,    0, 1, 0, 3, 0,  32, 0
 260:../uvc.c      **** 		{/*1B*/0                   , 0                    , 2,    0,    0,   25,    0, 1, 0, 3, 0,   0, 0
 261:../uvc.c      **** 		{/*1C*/SensorModeReg       , SensorModeReg        , 2,    0,    0,    6,    0, 1, 0, 3, 0,   0, 0
 262:../uvc.c      **** 		{/*1D*/0/*StillImg*/       , 0                    , 2,    0,    0,    3,    0, 1, 0, 3, 0,   0, 0
 263:../uvc.c      **** 		{/*1E*/SeveParsReg         , SeveParsReg          , 1,    0,    0,    3,    0, 1, 0, 3, 0,   0, 0
 264:../uvc.c      **** 		/**********************************
 265:../uvc.c      **** 		 * the I2C commands control for generic I2C module control.
 266:../uvc.c      **** 		 * the data format: wLength 10 bytes, the first part is address. the significant length is presen
 267:../uvc.c      **** 		 * 					Maximum is 6. so the total length in this part is 7 bytes.
 268:../uvc.c      **** 		 * 					The second part is data. the significant length is presented by 8th byte.
 269:../uvc.c      **** 		 * 					Maximum is 2. so the total length of this part is 3.
 270:../uvc.c      **** 		 * 					Total length of the request is 10 bytes.
 271:../uvc.c      **** 		 *
 272:../uvc.c      **** 		 *********************************/
 273:../uvc.c      **** 		{/*1F*/0/*I2CCtrl*/        , 0                    ,11,    0,    0,  0xff, 0xff, 1, 0, 3, 0,   0, 
 274:../uvc.c      **** };
 275:../uvc.c      **** 
 276:../uvc.c      **** #ifndef CAM720
 277:../uvc.c      **** 	static uint8_t CamMode = 0; //0:1080p
 278:../uvc.c      **** #else
 279:../uvc.c      **** 	static uint8_t CamMode = 1; //1:720p
 280:../uvc.c      **** #endif
 281:../uvc.c      **** 	static uint8_t setRes = 0;  // 1:1280x960; 2:1280x720; 0:n/a
 282:../uvc.c      **** 	static uint8_t setstilRes = 0;  // 1:1280x960; 2:1280x720; 0:n/a
 283:../uvc.c      **** 
 284:../uvc.c      **** static uint8_t ExUCtrlParArry[16][24]={
 285:../uvc.c      **** 		{/*20 set Iris auto (AF Lens)*/0,               0   , 4,    0x1,    0, 0x38, 0x01, 1, 0, 3, 0,0x4
 286:../uvc.c      **** 		{/*21 set Iris auto (non AF Lens)*/0,           0   , 1,    0,    0,    0,    0, 1, 0, 3, 0,   0,
 287:../uvc.c      **** 		{/*22 set Iris value (DC manual)*/0,            0   , 2,    0,    0,  255,    0, 1, 0, 3, 0,   1,
 288:../uvc.c      **** 		{/*23 opt zoom*/0,                              0   , 2,    0,    0,    0,    0, 0, 0, 3, 0,   0,
 289:../uvc.c      **** 		{/*24*/0x13/*Ext1BLCRangeCtlID4 position*/ , 0x14/*size*/ , 2,    1,    0,    3,    0, 1, 0, 3, 0
 290:../uvc.c      **** 		{/*25*/0x11/*Ext1BLCWeightCtlID5*/         , 0   , 2,    1,    0,    3,    0, 1, 0, 3, 0,   1, 0,
 291:../uvc.c      **** 		{/*26*/0x17/*Ext1BLCGridCtlID6*/           , 0   , 1,    1,    0,    2,    0, 1, 0, 3, 0,   0, 0,
 292:../uvc.c      **** 		{/*27*/0,                                     0   , 4,    0x1,    0, 0x38, 0x01, 1, 0, 3, 0,0x4e,
 293:../uvc.c      **** 		{/*28*/0,                                     0   , 1,    0,    0,    0,    0, 1, 0, 3, 0,   0, 0
 294:../uvc.c      **** 		{/*29*/0,                                     0   , 2,    0,    0,    5,    0, 1, 0, 3, 0,   0, 0
 295:../uvc.c      **** 		{/*2A*/0,                                     0   , 3,    0,    0,   10,    0, 1, 0, 3, 0,   0, 0
 296:../uvc.c      **** 		{/*2B*/0                   , 0                    , 2,    0,    0,   64,    0, 1, 0, 3, 0,  15, 1
 297:../uvc.c      **** 		{/*2C*/0                   , 0                    , 2,    0,    0,  100,    0, 1, 0, 3, 0,   0, 0
 298:../uvc.c      **** 		{/*2D*/0                   , 0                    , 2,    0,    0,  100,    0, 1, 0, 3, 0,   0, 0
 299:../uvc.c      **** 		{/*2E*/0                   , 0                    , 2,    0,    0,  100,    0, 1, 0, 3, 0,   0, 0
 300:../uvc.c      **** 		{/*2F*/0                   , 0                    , 2,    0,    0,  100,    0, 1, 0, 3, 0,   0, 0
 301:../uvc.c      **** };
 302:../uvc.c      **** 
 303:../uvc.c      **** /*      RegAdd1,             RegAdd2,              length, Min1,  Min2, Max1, Max2, Res1, Res2, Inf
 304:../uvc.c      ****  *            curVal1, curVal2 (index:14th), device address, checked flag, command available flag*/
 305:../uvc.c      **** static uint8_t CTCtrlParArry[16][24]={
 306:../uvc.c      **** 		{ScanMCtlID0            , 0                    , 1,    0,    0,    3,    0, 1, 0, 3, 0,   3, 0,  
 307:../uvc.c      **** 		{ShutterReg             , ShutterReg           , 1,    1,    0,   15,    0,15, 0, 3, 0,   2, 0,  
 308:../uvc.c      **** 		{AutoExPCtlID2          , 0                    , 1,    0,    0,    1,    0, 1, 0, 3, 0,   0, 0,  
 309:../uvc.c      **** 		{ShutterReg             , ShutterReg           , 4,    0x1,    0, 0x38, 0x01, 1, 0, 3, 0,0x4e, 0,
 310:../uvc.c      **** 		{ExTmRCtlID4            , 0                    , 1,    0,    0,    0,    0, 1, 0, 3, 0,   0, 0,  
 311:../uvc.c      **** 		{FocACtlID5             , 0                    , 2,    0,    0,  255,    0, 1, 0, 3, 0,   1, 0,  
 312:../uvc.c      **** 		{FocRCtlID6             , 0                    , 2,    0,    0,    0,    0, 0, 0, 3, 0,   0, 0,  
 313:../uvc.c      **** 		{IrisAFReg              , 0                    , 2,    0,    0,   48,    0, 1, 0, 3, 0x0a,0, 0, 0
 314:../uvc.c      **** 		{IriRCtlID8             , 0                    , 1,    0,    0,  127,    0, 1, 0, 3, 0,   0, 0,  
 315:../uvc.c      **** 		{ZmOpACtlID9            , 0                    , 2,    0,    0,    5,    0, 1, 0, 3, 0,   0, 0,  
 316:../uvc.c      **** 		{OpZoomReg              , 0                    , 3,    0,    0,    0,    0, 0, 0, 3, 0,   0, 0,  
 317:../uvc.c      **** 		{0                   , 0                    , 2,    0,    0,   64,    0, 1, 0, 3, 0,  15, 17,  0,
 318:../uvc.c      **** 		{0                   , 0                    , 2,    0,    0,  100,    0, 1, 0, 3, 0,   0, 0,   0,
 319:../uvc.c      **** 		{0                   , 0                    , 2,    0,    0,  100,    0, 1, 0, 3, 0,   0, 0,   0,
 320:../uvc.c      **** 		{0                   , 0                    , 2,    0,    0,  100,    0, 1, 0, 3, 0,   0, 0,   0,
 321:../uvc.c      **** 		{0                   , 0                    , 2,    0,    0,  100,    0, 1, 0, 3, 0,   0, 0,   0,
 322:../uvc.c      **** };
 323:../uvc.c      **** static uint16_t ShutValueArry[8]={200, 100, 39, 20, 10, 5, 2, 1};
 324:../uvc.c      **** static uint8_t ExTime[8][2]={{0x9c, 0x00}, {0x4e, 0x00}, {0x27, 0x00}, {0x14, 0x00}, {0x0a, 0x00}, 
 325:../uvc.c      **** 
 326:../uvc.c      **** static uint8_t curFlag[64]={0}; //the curFlag for each controls current records available. 0: unabl
 327:../uvc.c      **** 
 328:../uvc.c      **** /*
 329:../uvc.c      ****  * WBMenuCmpArry is set for white storing balance component requests values.
 330:../uvc.c      ****  * first two bytes represent blue and last two are for red. The defaults are set to 0.
 331:../uvc.c      ****  */
 332:../uvc.c      **** static uint8_t WBMenuCmpArry[4]={
 333:../uvc.c      **** 		0xa0, 0x0f, 0xf, 0xf0
 334:../uvc.c      **** };
 335:../uvc.c      **** static uint8_t I2CCMDArry[12]={//the index 12 points to data available; 0: no used; 0xf: unavailabl
 336:../uvc.c      **** 		0
 337:../uvc.c      **** };
 338:../uvc.c      **** 
 339:../uvc.c      **** void I2CCmdHandler(){
 340:../uvc.c      **** 	uint8_t buf[2];
 341:../uvc.c      **** 	uint8_t CmdType, CmdRegLen, CmdDataLen;
 342:../uvc.c      **** 	CmdType = I2CCMDArry[0];
 343:../uvc.c      **** 	CmdRegLen = I2CCMDArry[1];
 344:../uvc.c      **** 	CmdDataLen = I2CCMDArry[8];
 345:../uvc.c      **** 	VdRingBuf *cmdQuptr = &cmdQu;
 346:../uvc.c      **** 
 347:../uvc.c      **** 	CyU3PDebugPrint (4, "The I2C command is 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n
 348:../uvc.c      **** 			I2CCMDArry[0], I2CCMDArry[1], I2CCMDArry[2], I2CCMDArry[3], I2CCMDArry[4], I2CCMDArry[5],
 349:../uvc.c      **** 			I2CCMDArry[6], I2CCMDArry[7], I2CCMDArry[8], I2CCMDArry[9], I2CCMDArry[10]);
 350:../uvc.c      **** 
 351:../uvc.c      **** 	if(CmdType == 0)//I2C read
 352:../uvc.c      **** 	{
 353:../uvc.c      **** 		I2CCMDArry[11] = 0xf; //setting I2C data is not available.
 354:../uvc.c      **** #if 0 //for debugging
 355:../uvc.c      **** 		/* test still image operation */
 356:../uvc.c      **** 		if(I2CCMDArry[2] == 0xff){
 357:../uvc.c      **** 			snapButFlag = 0; //press
 358:../uvc.c      **** 			//CyU3PEventSet (&glFxUVCEvent, VD_FX_INT_STA_EVENT, CYU3P_EVENT_OR); //set sending interrupt st
 359:../uvc.c      **** 		}else if(I2CCMDArry[2] == 0x0){
 360:../uvc.c      **** 			snapButFlag = 0xf; //release
 361:../uvc.c      **** 			//CyU3PEventSet (&glFxUVCEvent, VD_FX_INT_STA_EVENT, CYU3P_EVENT_OR); //set sending interrupt st
 362:../uvc.c      **** 		}
 363:../uvc.c      **** 
 364:../uvc.c      **** 		/* end of the test */
 365:../uvc.c      **** #endif
 366:../uvc.c      **** 		if(1||(CmdRegLen == 4)){
 367:../uvc.c      **** 			SensorRead2B(I2CCMDArry[2]|I2C_RD_MASK, I2CCMDArry[3]|I2C_RD_MASK, I2CCMDArry[4], I2CCMDArry[5],
 368:../uvc.c      **** 			I2CCMDArry[9] = buf[0];
 369:../uvc.c      **** 			if(CmdDataLen == 2){
 370:../uvc.c      **** 				I2CCMDArry[10] = buf[1];
 371:../uvc.c      **** 			}
 372:../uvc.c      **** 			I2CCMDArry[11] = 0xff; //setting I2C data is available.
 373:../uvc.c      **** 		}else{//not support currently
 374:../uvc.c      **** 			CyU3PDebugPrint (4, "The I2C command length is not supported. value %d\r\n", CmdRegLen);
 375:../uvc.c      **** 		}
 376:../uvc.c      **** 	}else if(CmdType == 1){
 377:../uvc.c      **** 		if(1||(CmdRegLen == 4)){//TODO cmdque mutual
 378:../uvc.c      **** 			buf[0] = I2CCMDArry[9];
 379:../uvc.c      **** 			buf[1] = I2CCMDArry[10];
 380:../uvc.c      **** 			if(0 && (I2CCMDArry[3]&I2C_WR_MASK)==0x82 && (I2CCMDArry[4]==0x30) && (I2CCMDArry[5]==0x10)){
 381:../uvc.c      **** 				CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);
 382:../uvc.c      **** 				cmdSet(cmdQuptr, 0x23, 0x10, 0x30, STOP, 0);
 383:../uvc.c      **** 				CyU3PMutexPut(cmdQuptr->ringMux);
 384:../uvc.c      **** 			}
 385:../uvc.c      **** 			else SensorWrite2B(I2CCMDArry[2]&I2C_WR_MASK, I2CCMDArry[3]&I2C_WR_MASK, I2CCMDArry[4], I2CCMDAr
 386:../uvc.c      **** 		}else{//not support currently
 387:../uvc.c      **** 			CyU3PDebugPrint (4, "The I2C command length is not supported. value %d\r\n", CmdRegLen);
 388:../uvc.c      **** 		}
 389:../uvc.c      **** 
 390:../uvc.c      **** 	}
 391:../uvc.c      **** }
 392:../uvc.c      **** 
 393:../uvc.c      **** inline void ControlHandle(uint8_t CtrlID){
 394:../uvc.c      ****     CyU3PReturnStatus_t apiRetStatus = !CY_U3P_SUCCESS;
 395:../uvc.c      ****     VdRingBuf *cmdQuptr = &cmdQu;
 396:../uvc.c      ****     uint16_t readCount;
 397:../uvc.c      ****     uint8_t RegAdd0, RegAdd1, Data0, Data1, Len, idx, locCtrlID;
 398:../uvc.c      ****     uint8_t devAdd;
 399:../uvc.c      ****     locCtrlID = CtrlID-EXUAOFFSET+4;
 400:../uvc.c      ****     if(CtrlID >= EXUAOFFSET){//the extension command over 32.
 401:../uvc.c      ****     	RegAdd0 = ExUCtrlParArry[locCtrlID][0];
 402:../uvc.c      ****         RegAdd1 = ExUCtrlParArry[locCtrlID][1];
 403:../uvc.c      ****         devAdd = ExUCtrlParArry[locCtrlID][15];
 404:../uvc.c      ****         Len = ExUCtrlParArry[locCtrlID][2];
 405:../uvc.c      ****     }else{
 406:../uvc.c      **** 		RegAdd0 = CtrlParArry[CtrlID][0];
 407:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 408:../uvc.c      **** 		devAdd = CtrlParArry[CtrlID][15];
 409:../uvc.c      **** 		Len = CtrlParArry[CtrlID][2];
 410:../uvc.c      ****     }
 411:../uvc.c      ****     uint8_t dataIdx, getData=0xFF, getData1=0xff, sendData=0xff, sendData1=0xFF, reqData;
 412:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 413:../uvc.c      ****     CyU3PDebugPrint (4, "The cur sensor value %d 0x%x 0x%x\r\n", CtrlID, CtrlParArry[CtrlID][13], C
 414:../uvc.c      **** #endif
 415:../uvc.c      ****     reqData = bRequest;
 416:../uvc.c      ****     /*
 417:../uvc.c      ****      * Ext manual mode is not supported in 1080p camera
 418:../uvc.c      ****      */
 419:../uvc.c      ****     if (0 && (CtrlID == ExtAexModCtlID9)){
 420:../uvc.c      ****     	//CyU3PDebugPrint (4, "The Aex manual mode and AGC level are not support with 1080p camera.\r\
 421:../uvc.c      ****     	goto EndofSet;
 422:../uvc.c      ****     }
 423:../uvc.c      ****     switch (bRequest)
 424:../uvc.c      **** 		 {
 425:../uvc.c      **** 
 426:../uvc.c      **** 		 case CY_FX_USB_UVC_GET_LEN_REQ: /* the length of get length request always setting to 2 */
 427:../uvc.c      **** 			  glEp0Buffer[0] = Len;
 428:../uvc.c      **** 			  glEp0Buffer[1] = 0;
 429:../uvc.c      **** 			  CyU3PUsbSendEP0Data (2, (uint8_t *)glEp0Buffer);
 430:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 431:../uvc.c      **** 			  break;
 432:../uvc.c      **** 		 case CY_FX_USB_UVC_GET_CUR_REQ: /* Current value. */
 433:../uvc.c      **** 
 434:../uvc.c      **** 			 switch(CtrlID)
 435:../uvc.c      **** 			 {
 436:../uvc.c      **** 			 	 if(CtrlID >= EXUAOFFSET){
 437:../uvc.c      **** 			 	 	 case Ext1BLCRangeCtlID4:
 438:../uvc.c      **** 			 	 	 case Ext1BLCWeightCtlID5:
 439:../uvc.c      **** 			 	 	 case Ext1BLCGridCtlID6:
 440:../uvc.c      **** 						 glEp0Buffer[0] = ExUCtrlParArry[locCtrlID][13];//ext_control array;
 441:../uvc.c      **** 						 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][14];
 442:../uvc.c      **** 						 sendData = glEp0Buffer[0];
 443:../uvc.c      **** 						 sendData1 = glEp0Buffer[1];
 444:../uvc.c      **** 			 	 		 break;
 445:../uvc.c      **** 			 	 }
 446:../uvc.c      **** 			 	 case ExtCamMCtlID12:
 447:../uvc.c      **** 					 sendData = CtrlParArry[CtrlID][13];
 448:../uvc.c      **** 					 if(CamMode == 1){//720p or invendo
 449:../uvc.c      **** 						if(sendData >= 3){
 450:../uvc.c      **** 							CyU3PDebugPrint (4, "back light compensation setting is not correct. %d %d\r\n", CamMode, se
 451:../uvc.c      **** 							sendData = 0; //set back to default
 452:../uvc.c      **** 							CtrlParArry[CtrlID][13] = 0;
 453:../uvc.c      **** 						}
 454:../uvc.c      **** 						sendData += 4;
 455:../uvc.c      **** 					 }
 456:../uvc.c      **** 					//CyU3PDebugPrint (4, "back light compensation setting is not correct. %d %d\r\n", CamMode, se
 457:../uvc.c      **** 					 glEp0Buffer[0] = sendData;
 458:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 459:../uvc.c      **** 					 break;
 460:../uvc.c      **** 			 	 case ExtI2CCtlID15:
 461:../uvc.c      **** 			 		 for(idx=0; idx<Len; idx++){
 462:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 463:../uvc.c      **** 			 		 }
 464:../uvc.c      **** 			 		 sendData = glEp0Buffer[9];
 465:../uvc.c      **** 			 		 sendData1 = glEp0Buffer[10];
 466:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 467:../uvc.c      **** 			 		CyU3PDebugPrint (4, "The I2C command is 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%
 468:../uvc.c      **** 			 				I2CCMDArry[0], I2CCMDArry[1], I2CCMDArry[2], I2CCMDArry[3], I2CCMDArry[4], I2CCMDArry[5],
 469:../uvc.c      **** 			 				I2CCMDArry[6], I2CCMDArry[7], I2CCMDArry[8], I2CCMDArry[9], I2CCMDArry[10]);
 470:../uvc.c      **** #endif
 471:../uvc.c      **** 			 		 if(I2CCMDArry[11] != 0xff)//the data availabel.
 472:../uvc.c      **** 			 		 {
 473:../uvc.c      **** 			 			CyU3PDebugPrint (4, "The I2C current data is not available. try again. %d %d\r\n", I2CCMDArr
 474:../uvc.c      **** 			 		 }
 475:../uvc.c      **** 			 		 break;
 476:../uvc.c      **** 				 case ExtAexModCtlID9:
 477:../uvc.c      **** 
 478:../uvc.c      **** 		 	 		 if(curFlag[CtrlID]){
 479:../uvc.c      **** 						 glEp0Buffer[0] = CtrlParArry[CtrlID][13];//exposure mode
 480:../uvc.c      **** 						 glEp0Buffer[2] = CtrlParArry[CtrlID][14];//AGC
 481:../uvc.c      **** 		 	 		 }else{
 482:../uvc.c      **** 		 	 			//remove for invendo
 483:../uvc.c      **** 		 	 			//glEp0Buffer[0] = SensorGetControl(RegAdd0, devAdd);
 484:../uvc.c      **** 		 	 			//glEp0Buffer[0] = glEp0Buffer[0]&0x3; // get least two bits for Aex Mode
 485:../uvc.c      **** 		 	 			//CtrlParArry[CtrlID][13] = glEp0Buffer[0];
 486:../uvc.c      **** 
 487:../uvc.c      **** 		 	 			glEp0Buffer[2] = SensorGetControl(RegAdd1, devAdd);
 488:../uvc.c      **** 		 	 			CtrlParArry[CtrlID][14] = glEp0Buffer[2];
 489:../uvc.c      **** 		 	 			curFlag[CtrlID] = CyTrue;
 490:../uvc.c      **** 		 	 		 }
 491:../uvc.c      **** 
 492:../uvc.c      **** 					 glEp0Buffer[0] = CtrlParArry[CtrlID][13];//exposure mode
 493:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 494:../uvc.c      **** 					 glEp0Buffer[2] = CtrlParArry[CtrlID][14];//AGC
 495:../uvc.c      **** 					 glEp0Buffer[3] = 0;
 496:../uvc.c      **** 					 sendData = glEp0Buffer[0];
 497:../uvc.c      **** 					 sendData1 = glEp0Buffer[2];
 498:../uvc.c      **** 					 CyU3PDebugPrint (4, "ExpM&AGC sent to host. %d %d; %d %d\r\n", glEp0Buffer[0], glEp0Buffer[1]
 499:../uvc.c      **** 					 break;
 500:../uvc.c      **** #if 0	//the brightness is placed by Axreference for invendo camera
 501:../uvc.c      **** 			 	 case BrgtCtlID1:
 502:../uvc.c      **** 
 503:../uvc.c      **** 		 	 		 if(curFlag[CtrlID]){
 504:../uvc.c      **** 						 Data0 = CtrlParArry[CtrlID][13];  //SensorGetControl(RegAdd0, devAdd); //SensorGetBLCMode();
 505:../uvc.c      **** 						 Data1 = CtrlParArry[CtrlID][14];  //SensorGetControl(RegAdd1, devAdd);
 506:../uvc.c      **** 		 	 		 }else{
 507:../uvc.c      **** 		 	 			glEp0Buffer[0] = SensorGetControl(RegAdd0, devAdd);
 508:../uvc.c      **** 		 	 			glEp0Buffer[0] = glEp0Buffer[0]&0x3; // get least two bits for Aex Mode
 509:../uvc.c      **** 		 	 			CtrlParArry[CtrlID][13] = glEp0Buffer[0];
 510:../uvc.c      **** 
 511:../uvc.c      **** 		 	 			glEp0Buffer[2] = SensorGetControl(RegAdd1, devAdd);
 512:../uvc.c      **** 		 	 			CtrlParArry[CtrlID][14] = glEp0Buffer[2];
 513:../uvc.c      **** 		 	 			curFlag[CtrlID] = CyTrue;
 514:../uvc.c      **** 		 	 		 }
 515:../uvc.c      **** 
 516:../uvc.c      **** 					 if (Data1&0x2){ //check the sign bit (bit1)
 517:../uvc.c      **** 						 Data1 = ((Data1<<6)&0x40)| (Data0 >> 2);//clear MSB
 518:../uvc.c      **** 					 }else{
 519:../uvc.c      **** 						 Data1 = ((Data1<<6)|0x80)| (Data0 >> 2);//set MSB
 520:../uvc.c      **** 					 }
 521:../uvc.c      **** 
 522:../uvc.c      **** 					 glEp0Buffer[0] = Data1;
 523:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 524:../uvc.c      **** 					 sendData = glEp0Buffer[0];
 525:../uvc.c      **** 					 break;
 526:../uvc.c      **** #endif
 527:../uvc.c      **** 				 case HueCtlID5://TODO check sensor register
 528:../uvc.c      **** 					 glEp0Buffer[0] = CtrlParArry[CtrlID][13];//SensorGetControl(HuectrlRegRed, devAdd);
 529:../uvc.c      **** 					 glEp0Buffer[0] = glEp0Buffer[0] + GREEN_BASE;
 530:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 531:../uvc.c      **** 					 sendData = glEp0Buffer[0];
 532:../uvc.c      **** 					 break;
 533:../uvc.c      **** 				 case WBTLevCtlID11:
 534:../uvc.c      **** 
 535:../uvc.c      **** 		 	 		 if(curFlag[CtrlID]){
 536:../uvc.c      **** 						 glEp0Buffer[0] = WBMenuCmpArry[0];//using for blue part
 537:../uvc.c      **** 						 glEp0Buffer[2] = WBMenuCmpArry[2];//using for red part
 538:../uvc.c      **** 		 	 		 }else{
 539:../uvc.c      **** 		 	 			Data0 = SensorGetControl(RegAdd1, devAdd);
 540:../uvc.c      **** 		 	 			Data1 = SensorGetControl(RegAdd0, devAdd);
 541:../uvc.c      **** 						glEp0Buffer[0] = Data0;
 542:../uvc.c      **** 						WBMenuCmpArry[0] = glEp0Buffer[0];//using for blue part
 543:../uvc.c      **** 						glEp0Buffer[2] = Data1;
 544:../uvc.c      **** 						WBMenuCmpArry[2]= glEp0Buffer[2];//using for red part
 545:../uvc.c      **** 		 	 			curFlag[CtrlID] = CyTrue;
 546:../uvc.c      **** 		 	 		 }
 547:../uvc.c      **** 
 548:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 549:../uvc.c      **** 					 glEp0Buffer[3] = 0;
 550:../uvc.c      **** 					 sendData = glEp0Buffer[0];
 551:../uvc.c      **** 					 sendData1 = glEp0Buffer[2];
 552:../uvc.c      **** 					 break;
 553:../uvc.c      **** 				 case SaturCtlID6://TODO check sensor register
 554:../uvc.c      **** 				 default:
 555:../uvc.c      **** 
 556:../uvc.c      **** 		 	 		 if(curFlag[CtrlID]){
 557:../uvc.c      **** 						 glEp0Buffer[0] = CtrlParArry[CtrlID][13];//ext_control array;
 558:../uvc.c      **** 						 glEp0Buffer[1] = CtrlParArry[CtrlID][14];
 559:../uvc.c      **** 		 	 		 }else{
 560:../uvc.c      **** 		 	 			glEp0Buffer[0] = SensorGetControl(RegAdd0, devAdd);
 561:../uvc.c      **** 		 	 			CtrlParArry[CtrlID][13] = glEp0Buffer[0];
 562:../uvc.c      **** 		 	 			glEp0Buffer[1] = CtrlParArry[CtrlID][14];
 563:../uvc.c      **** 		 	 			curFlag[CtrlID] = CyTrue;
 564:../uvc.c      **** 		 	 		 }
 565:../uvc.c      **** 
 566:../uvc.c      **** 					 glEp0Buffer[0] = CtrlParArry[CtrlID][13];//SensorGetControl(RegAdd0, devAdd);
 567:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 568:../uvc.c      **** 					 sendData = glEp0Buffer[0];
 569:../uvc.c      **** 					 break;
 570:../uvc.c      **** 			 }
 571:../uvc.c      **** 
 572:../uvc.c      **** 			 CyU3PUsbSendEP0Data (Len, (uint8_t *)glEp0Buffer);
 573:../uvc.c      **** 
 574:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 575:../uvc.c      **** 			  CyU3PDebugPrint (4, "The get sensor value %d 0x%x 0x%x, %d\r\n", CtrlID, CtrlParArry[CtrlID][1
 576:../uvc.c      **** #endif
 577:../uvc.c      **** 			  break;
 578:../uvc.c      **** 		 case CY_FX_USB_UVC_GET_MIN_REQ: /* Minimum BLC = 0. */
 579:../uvc.c      **** 		 	 if(CtrlID >= EXUAOFFSET){
 580:../uvc.c      **** 				 glEp0Buffer[0] = ExUCtrlParArry[locCtrlID][3];//ext_control array;
 581:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][4];
 582:../uvc.c      **** 		 	 }
 583:../uvc.c      **** 
 584:../uvc.c      **** 		 	 else if(CtrlID == WBTLevCtlID11){
 585:../uvc.c      **** 				 glEp0Buffer[0] = 1;//WBMenuCmpArry[0];//using for blue part
 586:../uvc.c      **** 				 glEp0Buffer[1] = 0;
 587:../uvc.c      **** 				 glEp0Buffer[2] = 1;//WBMenuCmpArry[2];//using for red part
 588:../uvc.c      **** 				 glEp0Buffer[3] = 0;
 589:../uvc.c      **** 			 }else
 590:../uvc.c      **** 			 {
 591:../uvc.c      **** 			  glEp0Buffer[0] = CtrlParArry[CtrlID][3];
 592:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 593:../uvc.c      **** 			 }
 594:../uvc.c      **** 			  CyU3PUsbSendEP0Data (Len, (uint8_t *)glEp0Buffer);
 595:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 596:../uvc.c      **** 			  break;
 597:../uvc.c      **** 		 case CY_FX_USB_UVC_GET_MAX_REQ:
 598:../uvc.c      **** 		 	 if(CtrlID >= EXUAOFFSET){
 599:../uvc.c      **** 				 glEp0Buffer[0] = ExUCtrlParArry[locCtrlID][5];//ext_control array;
 600:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][6];
 601:../uvc.c      **** 		 	 }
 602:../uvc.c      **** 		 	 else if(CtrlID == WBTLevCtlID11){
 603:../uvc.c      **** 				 glEp0Buffer[0] = 0xff;//WBMenuCmpArry[0];//using for blue part
 604:../uvc.c      **** 				 glEp0Buffer[1] = 0;
 605:../uvc.c      **** 				 glEp0Buffer[2] = 0xff;//WBMenuCmpArry[2];//using for red part
 606:../uvc.c      **** 				 glEp0Buffer[3] = 0;
 607:../uvc.c      **** 			 }else
 608:../uvc.c      **** 			 {
 609:../uvc.c      **** 				  glEp0Buffer[0] = CtrlParArry[CtrlID][5];
 610:../uvc.c      **** 				  glEp0Buffer[1] = CtrlParArry[CtrlID][6];
 611:../uvc.c      **** 			 }
 612:../uvc.c      **** 			  CyU3PUsbSendEP0Data (Len, (uint8_t *)glEp0Buffer);
 613:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 614:../uvc.c      **** 			  break;
 615:../uvc.c      **** 		 case CY_FX_USB_UVC_GET_RES_REQ:
 616:../uvc.c      **** 		 	 if(CtrlID >= EXUAOFFSET){
 617:../uvc.c      **** 				 glEp0Buffer[0] = ExUCtrlParArry[locCtrlID][7];//ext_control array;
 618:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][8];
 619:../uvc.c      **** 				 glEp0Buffer[2] = 0;
 620:../uvc.c      **** 				 glEp0Buffer[3] = 0;
 621:../uvc.c      **** 		 	 }
 622:../uvc.c      **** 		 	 else{
 623:../uvc.c      **** 			  glEp0Buffer[0] = CtrlParArry[CtrlID][7];
 624:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 625:../uvc.c      **** 			  glEp0Buffer[2] = 0;
 626:../uvc.c      **** 			  glEp0Buffer[3] = 0;
 627:../uvc.c      **** 		 	 }
 628:../uvc.c      **** 			  CyU3PUsbSendEP0Data (Len, (uint8_t *)glEp0Buffer);
 629:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 630:../uvc.c      **** 			  break;
 631:../uvc.c      **** 		 case CY_FX_USB_UVC_GET_INFO_REQ:
 632:../uvc.c      **** 		 	 if(CtrlID >= EXUAOFFSET){
 633:../uvc.c      **** 				 glEp0Buffer[0] = ExUCtrlParArry[locCtrlID][9];//ext_control array;
 634:../uvc.c      **** 		 	 }
 635:../uvc.c      **** 		 	 else{
 636:../uvc.c      **** 			  glEp0Buffer[0] = CtrlParArry[CtrlID][9];
 637:../uvc.c      **** 		 	 }
 638:../uvc.c      **** 			  CyU3PUsbSendEP0Data (1, (uint8_t *)glEp0Buffer);
 639:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 640:../uvc.c      **** 			  Len = 1;
 641:../uvc.c      **** 			  break;
 642:../uvc.c      **** 		 case CY_FX_USB_UVC_GET_DEF_REQ:
 643:../uvc.c      **** 		 	 if(CtrlID >= EXUAOFFSET){
 644:../uvc.c      **** 				 glEp0Buffer[0] = ExUCtrlParArry[locCtrlID][11];//ext_control array;
 645:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][12];
 646:../uvc.c      **** 		 	 }
 647:../uvc.c      **** 
 648:../uvc.c      **** 		 	 else if(CtrlID == WBTLevCtlID11){
 649:../uvc.c      **** 				  glEp0Buffer[0] = CtrlParArry[CtrlID][11];
 650:../uvc.c      **** 				  glEp0Buffer[1] = 0;
 651:../uvc.c      **** 				  glEp0Buffer[2] = CtrlParArry[CtrlID][12];
 652:../uvc.c      **** 				  glEp0Buffer[3] = 0;
 653:../uvc.c      **** 			 }else{
 654:../uvc.c      **** 			  glEp0Buffer[0] = CtrlParArry[CtrlID][11];
 655:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][12];
 656:../uvc.c      **** 			 }
 657:../uvc.c      **** 			  CyU3PUsbSendEP0Data (Len, (uint8_t *)glEp0Buffer);
 658:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 659:../uvc.c      **** 			  break;
 660:../uvc.c      **** 		 case CY_FX_USB_UVC_SET_CUR_REQ:
 661:../uvc.c      **** 			  apiRetStatus = CyU3PUsbGetEP0Data (CY_FX_UVC_MAX_PROBE_SETTING_ALIGNED,
 662:../uvc.c      **** 				  glEp0Buffer, &readCount);
 663:../uvc.c      **** 			  if (apiRetStatus == CY_U3P_SUCCESS )
 664:../uvc.c      **** 			   {
 665:../uvc.c      **** 				  Data0 = glEp0Buffer[0];
 666:../uvc.c      **** 				  Data1 = glEp0Buffer[1];
 667:../uvc.c      **** 				  getData = glEp0Buffer[0];
 668:../uvc.c      **** 				  getData1 = glEp0Buffer[2];
 669:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 670:../uvc.c      **** 				  CyU3PDebugPrint (4, "The setup sensor value (0) %d 0x%x 0x%x 0x%x\r\n", CtrlID, readCount, gl
 671:../uvc.c      **** #endif
 672:../uvc.c      **** 				  switch(CtrlID)
 673:../uvc.c      **** 					 {
 674:../uvc.c      **** 						 case ExtShutCtlID0:
 675:../uvc.c      **** 							 CtrlParArry[CtrlID][13] = Data0;
 676:../uvc.c      **** 							 if(Data0 == 0){//set exposure mode auto
 677:../uvc.c      **** 								 if((CTCtrlParArry[AutoExMCtlID1][13] != 8) && (CTCtrlParArry[AutoExMCtlID1][13] != 2)){
 678:../uvc.c      **** 									 if(CTCtrlParArry[AutoExMCtlID1][13] == 1) {
 679:../uvc.c      **** 										 CTCtrlParArry[AutoExMCtlID1][13] = 8; //aperture priority
 680:../uvc.c      **** 									 }else{
 681:../uvc.c      **** 										 CTCtrlParArry[AutoExMCtlID1][13] = 2; //auto mode
 682:../uvc.c      **** 									 }
 683:../uvc.c      **** 								 }
 684:../uvc.c      **** 							 }else{
 685:../uvc.c      **** 								 Data1 = Data0 - 1;
 686:../uvc.c      **** 								 if((CTCtrlParArry[AutoExMCtlID1][13] != 1) && (CTCtrlParArry[AutoExMCtlID1][13] != 4)){
 687:../uvc.c      **** 									 if(CTCtrlParArry[AutoExMCtlID1][13] == 8) {
 688:../uvc.c      **** 										 CTCtrlParArry[AutoExMCtlID1][13] = 1; //manual mode
 689:../uvc.c      **** 									 }else{
 690:../uvc.c      **** 										 CTCtrlParArry[AutoExMCtlID1][13] = 4; //shutter priority
 691:../uvc.c      **** 									 }
 692:../uvc.c      **** 								 }
 693:../uvc.c      **** 								 if(Data1 < 8){
 694:../uvc.c      **** 									 CTCtrlParArry[ExTmACtlID3][13] = ExTime[Data1][0];
 695:../uvc.c      **** 									 CTCtrlParArry[ExTmACtlID3][14] = ExTime[Data1][1];
 696:../uvc.c      **** 								 }else{
 697:../uvc.c      **** 									 CTCtrlParArry[ExTmACtlID3][13] = ExTime[7][0];
 698:../uvc.c      **** 									 CTCtrlParArry[ExTmACtlID3][14] = ExTime[7][1];
 699:../uvc.c      **** 								 }
 700:../uvc.c      **** 							 }
 701:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 702:../uvc.c      **** 							 dataIdx = 0;
 703:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 704:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 705:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 706:../uvc.c      **** 							 //CyU3PDebugPrint (4, "The shutter&exposure 0x%x 0x%x 0x%x ox%x\r\n", Data1, Data0, CTCtrlP
 707:../uvc.c      **** 							 break;
 708:../uvc.c      **** 						 case ExtAexModCtlID9://exposure&AGC
 709:../uvc.c      **** 							 CtrlParArry[CtrlID][13] = getData;//exposure mode
 710:../uvc.c      **** 							 CtrlParArry[CtrlID][14] = getData1;//AGC
 711:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 712:../uvc.c      **** 							 dataIdx = 0;
 713:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 714:../uvc.c      **** 							 //cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, getData, dataIdx);  //Exposure
 715:../uvc.c      **** 							 if(1 || (getData != 0)){
 716:../uvc.c      **** 								 //dataIdx++;
 717:../uvc.c      **** 								 cmdSet(cmdQuptr, CtrlID, RegAdd1, devAdd, getData1, dataIdx);  //AGC
 718:../uvc.c      **** 							 }
 719:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 720:../uvc.c      **** 							 CyU3PDebugPrint (4, "ExpM&AGC gotten from host. %d %d; %d %d\r\n", glEp0Buffer[0], glEp0Buf
 721:../uvc.c      **** 							 break;
 722:../uvc.c      **** 						 case ExtExRefCtlID10:
 723:../uvc.c      **** 							 dataIdx = 0;
 724:../uvc.c      **** 							 CtrlParArry[CtrlID][13] = Data0;
 725:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 726:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 727:../uvc.c      **** 							 if(WDRflag)
 728:../uvc.c      **** 								 cmdSet(cmdQuptr, CtrlID, RegAdd1, devAdd, Data0, dataIdx);  //First
 729:../uvc.c      **** 							 else
 730:../uvc.c      **** 								 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 731:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 732:../uvc.c      **** 							 CyU3PDebugPrint (4, "Exe level. %d %d; %d %d\r\n", Data0, WDRflag, glEp0Buffer[2], glEp0Buf
 733:../uvc.c      **** 						 case ExtCamMCtlID12:
 734:../uvc.c      **** 							 /*
 735:../uvc.c      **** 							 dataIdx = 0;
 736:../uvc.c      **** 							 if(Data0 <= 3){
 737:../uvc.c      **** 								 CamMode = 0; //set 1080p flag
 738:../uvc.c      **** 								 Data1 = Data0;
 739:../uvc.c      **** 							 }else{
 740:../uvc.c      **** 								 CamMode = 1; //set 720p flag
 741:../uvc.c      **** 								 Data1 = Data0-4;
 742:../uvc.c      **** 							 }
 743:../uvc.c      **** 							 CtrlParArry[CtrlID][13] = Data0;
 744:../uvc.c      **** 							 CtrlParArry[BLCIndex][13] = Data1;
 745:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 746:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 747:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 748:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 749:../uvc.c      **** 							 //CyU3PDebugPrint (4, "The CamMode value %d %d %d %d\r\n", Data1, Data0, CamMode, CtrlParAr
 750:../uvc.c      **** 							 */
 751:../uvc.c      **** 							 break;
 752:../uvc.c      **** 						 case ExtSensorParCtlID14://TODO
 753:../uvc.c      **** 							 dataIdx = 0;
 754:../uvc.c      **** 							 if(Data0 == 0){ //set default sensor parameters.
 755:../uvc.c      **** 								 Data0 = 1;
 756:../uvc.c      **** 							 }else{ //save current sensor parameters.
 757:../uvc.c      **** 								 Data0 = 0;
 758:../uvc.c      **** 							 }
 759:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 760:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 761:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 762:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 763:../uvc.c      **** 							 break;
 764:../uvc.c      **** 						 case ExtI2CCtlID15:
 765:../uvc.c      **** 					 		 for(idx=0; idx<Len; idx++){
 766:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 767:../uvc.c      **** 					 		 }
 768:../uvc.c      **** 					 		I2CCmdHandler();
 769:../uvc.c      **** 							 break;
 770:../uvc.c      **** 						 case Ext1BLCRangeCtlID4: //registers value BLD window enable (0x17); position (0x13); size (
 771:../uvc.c      **** 							 dataIdx = 0;
 772:../uvc.c      **** #if 0 //seperate version
 773:../uvc.c      **** 							 getData = Data0&0xF; //get LSB H-Pos.
 774:../uvc.c      **** 							 getData1 = Data0>>4; //get MSB V-Pos.
 775:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 776:../uvc.c      **** 							 if(getData1&0x8){//enable BLD window
 777:../uvc.c      **** 								 cmdSet(cmdQuptr, CtrlID, 0x17, devAdd, 1, dataIdx); //show BLC window
 778:../uvc.c      **** 							 }else{ //disable BLD window
 779:../uvc.c      **** 								 cmdSet(cmdQuptr, CtrlID, 0x17, devAdd, 0, dataIdx); //close BLC window
 780:../uvc.c      **** 							 }
 781:../uvc.c      **** 							 getData1 = getData1&0x7; //mask bit7 ~ bit3/
 782:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, getData, dataIdx);  //set H-Pos
 783:../uvc.c      **** 							 dataIdx++;
 784:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, getData1, dataIdx);  //set V-Pos
 785:../uvc.c      **** 							 dataIdx++;
 786:../uvc.c      **** 							 getData = Data1&0xf; //get LSB H-size.
 787:../uvc.c      **** 							 getData1 = Data1>>4; //get MSB V-size.
 788:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd1, devAdd, getData, dataIdx);  //set H-size
 789:../uvc.c      **** 							 dataIdx++;
 790:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd1, devAdd, getData1, dataIdx);  //set V-size
 791:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 792:../uvc.c      **** #else //combination version
 793:../uvc.c      **** 							 Data0 = Data0&0x7F; //mask window show flag bit.
 794:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 795:../uvc.c      **** 						     /* end test */
 796:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //set H/V-Pos
 797:../uvc.c      **** 							 dataIdx++;
 798:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd1, devAdd, Data1, dataIdx);  //set H/V-size
 799:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 800:../uvc.c      **** 							 getData1 = Data1;
 801:../uvc.c      **** #endif
 802:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][13] = Data0;//ext_control array;
 803:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][14] = Data1;
 804:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][16] = CyTrue;
 805:../uvc.c      **** 							 break;
 806:../uvc.c      **** 						 case Ext1BLCWeightCtlID5: //register value 0x11 (need check).
 807:../uvc.c      **** 							 dataIdx = 0;
 808:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 809:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //set weight factor
 810:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 811:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][13] = Data0;
 812:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][16] = CyTrue;
 813:../uvc.c      **** 							 break;
 814:../uvc.c      **** 						 case Ext1BLCGridCtlID6:
 815:../uvc.c      **** 							 dataIdx = 0;
 816:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 817:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //set grid status
 818:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 819:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][13] = Data0;
 820:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][16] = CyTrue;
 821:../uvc.c      **** 							 break;
 822:../uvc.c      **** #if 0	//the brightness is placed by Axreference for invendo camera
 823:../uvc.c      **** 				  	  	 case BrgtCtlID1:
 824:../uvc.c      **** 							 dataIdx = 0;
 825:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 826:../uvc.c      **** 							  /****** double check the register0 Data1 ******/
 827:../uvc.c      **** 							  if(Data0&0x80){
 828:../uvc.c      **** 								  Data1 = ((Data0 >> 6)&0x01)|(CtrlParArry[CtrlID][14]&0xfc);
 829:../uvc.c      **** 							  }else{
 830:../uvc.c      **** 								  Data1 = ((Data0 >> 6)|0x02)|(CtrlParArry[CtrlID][14]&0xfc);
 831:../uvc.c      **** 							  }
 832:../uvc.c      **** 							 Data1 |= ~0x03;
 833:../uvc.c      **** 							 Data1 &= 0xC7;
 834:../uvc.c      **** 						  	 cmdSet(cmdQuptr, CtrlID, RegAdd1, devAdd, Data1, dataIdx);  //First
 835:../uvc.c      **** 						  	 dataIdx++;
 836:../uvc.c      **** 
 837:../uvc.c      **** 							 Data0 = (Data0 << 2);
 838:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);   //Second
 839:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 840:../uvc.c      **** 
 841:../uvc.c      **** 							 CtrlParArry[CtrlID][13] = Data0;
 842:../uvc.c      **** 							 CtrlParArry[CtrlID][14] = Data1;
 843:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 844:../uvc.c      **** 
 845:../uvc.c      **** 							 break;
 846:../uvc.c      **** #endif
 847:../uvc.c      **** 						 case HueCtlID5:  //mapping to hue control registers
 848:../uvc.c      **** 							 dataIdx = 0;
 849:../uvc.c      **** 
 850:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 851:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, (Data0-GREEN_BASE), dataIdx);  //First
 852:../uvc.c      **** 							 dataIdx++;
 853:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, HuectrlRegMg, devAdd, (Data0-MAGENTA_BASE), dataIdx);  //Second
 854:../uvc.c      **** 							 dataIdx++;
 855:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, HuectrlRegYel, devAdd, (Data0-YELLOW_BASE), dataIdx);  //Third
 856:../uvc.c      **** 							 dataIdx++;
 857:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, HuectrlRegCy, devAdd, (Data0-CYAN_BASE), dataIdx);  //Fourth
 858:../uvc.c      **** 							 dataIdx++;
 859:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, HuectrlRegRed, devAdd, (Data0-RED_BASE), dataIdx);  //Fifth
 860:../uvc.c      **** 							 dataIdx++;
 861:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd1, devAdd, (glEp0Buffer[0]-BLUE_BASE), dataIdx);   //Sixth
 862:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 863:../uvc.c      **** 
 864:../uvc.c      **** 							 CtrlParArry[CtrlID][13] = glEp0Buffer[0] - GREEN_BASE;
 865:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 866:../uvc.c      **** 							 break;
 867:../uvc.c      **** 						 case SaturCtlID6:
 868:../uvc.c      **** 							 dataIdx = 0;
 869:../uvc.c      **** 							 Data1 = Data0 = glEp0Buffer[0]; //red and blue set the same value.
 870:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 871:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 872:../uvc.c      **** 							 dataIdx++;
 873:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd1, devAdd, Data0, dataIdx);  //Second
 874:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 875:../uvc.c      **** 							 CtrlParArry[CtrlID][13] = Data0;
 876:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 877:../uvc.c      **** 							 break;
 878:../uvc.c      **** 
 879:../uvc.c      **** 						 case WBTLevCtlID11:
 880:../uvc.c      **** 							 Data0 = glEp0Buffer[0]; //blue to 0x9 or low to 0xa
 881:../uvc.c      **** 							 Data1 = glEp0Buffer[2]; //red to 0xa or high to 0x9
 882:../uvc.c      **** 							 dataIdx = 0;
 883:../uvc.c      **** 
 884:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 885:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd1, devAdd, Data0, dataIdx);  //First
 886:../uvc.c      **** 							 dataIdx++;
 887:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data1, dataIdx);  //Second
 888:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 889:../uvc.c      **** 
 890:../uvc.c      **** 							 WBMenuCmpArry[0] = Data0;//using for blue part
 891:../uvc.c      **** 							 WBMenuCmpArry[2] = Data1;//using for red part
 892:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 893:../uvc.c      **** 							 break;
 894:../uvc.c      **** 						 case MFreqCtlID4:
 895:../uvc.c      **** 							 dataIdx = 0;
 896:../uvc.c      **** 							 Data0 = Data0 - 1;
 897:../uvc.c      **** 							 if(Data0 < 0)  //for specific check. if it's minor value, set to 0.
 898:../uvc.c      **** 								 Data0 = 0;
 899:../uvc.c      **** 							 else if(Data0 >2)
 900:../uvc.c      **** 								 Data0 = 1;
 901:../uvc.c      **** 
 902:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 903:../uvc.c      **** 							 //remove for Invendo
 904:../uvc.c      **** 							 //cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 905:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 906:../uvc.c      **** 
 907:../uvc.c      **** 							 CtrlParArry[CtrlID][13] = Data0;
 908:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 909:../uvc.c      **** 							 break;
 910:../uvc.c      **** 					 	 case BLCCtlID0:
 911:../uvc.c      **** 							 CtrlParArry[CtrlID][13] = Data0;
 912:../uvc.c      **** 							 if(Data0 == 3)
 913:../uvc.c      **** 								 WDRflag = CyTrue; //WDR mode
 914:../uvc.c      **** 							 else
 915:../uvc.c      **** 								 WDRflag = CyFalse;
 916:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 917:../uvc.c      **** 							 if(CamMode == 1) //mode 720p
 918:../uvc.c      **** 							 {
 919:../uvc.c      **** 								 if(Data0 < 2){
 920:../uvc.c      **** 					 				 ;//Data0 += 4;
 921:../uvc.c      **** 					 			 }else{
 922:../uvc.c      **** 									CyU3PDebugPrint (4, "back light compensation setting is not correct. %d %d\r\n", CamMode, 
 923:../uvc.c      **** 									Data0 = 0; //set to default.
 924:../uvc.c      **** 					 			 }
 925:../uvc.c      **** 					 		 }
 926:../uvc.c      **** 							 //CtrlParArry[CamModeIndex][13] = Data0+4;
 927:../uvc.c      **** 							 dataIdx = 0;
 928:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 929:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 930:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 931:../uvc.c      **** 							 CyU3PDebugPrint (4, "BLC set. %d %d; %d %d\r\n", Data0, WDRflag, glEp0Buffer[2], glEp0Buffe
 932:../uvc.c      **** 
 933:../uvc.c      **** 					 		 break;
 934:../uvc.c      **** 						 default:
 935:../uvc.c      **** 							 dataIdx = 0;
 936:../uvc.c      **** 
 937:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 938:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 939:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 940:../uvc.c      **** 
 941:../uvc.c      **** 							 CtrlParArry[CtrlID][13] = Data0;
 942:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 943:../uvc.c      **** 							 break;
 944:../uvc.c      **** 					 }
 945:../uvc.c      **** 			   }else{
 946:../uvc.c      **** 				   CyU3PDebugPrint (4, "The get data from host fail error code %d.\r\n", apiRetStatus);
 947:../uvc.c      **** 			   }
 948:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 949:../uvc.c      **** 			  CyU3PDebugPrint (4, "The setup sensor value %d, 0x%x 0x%x 0x%x 0x%x %d\r\n", CtrlID, readCount
 950:../uvc.c      **** #endif
 951:../uvc.c      **** 
 952:../uvc.c      **** 			  break;
 953:../uvc.c      **** 		  default:
 954:../uvc.c      **** 			  CyU3PUsbStall (0, CyTrue, CyFalse);
 955:../uvc.c      **** 			  break;
 956:../uvc.c      **** 		 }
 957:../uvc.c      **** EndofSet:    CyU3PDebugPrint (4, "The Request 0x%x parameter get from host 0x%x 0x%x / send to host
 958:../uvc.c      **** }
 959:../uvc.c      **** 
 960:../uvc.c      **** /* Application critical error handler */
 961:../uvc.c      ****     void
 962:../uvc.c      **** CyFxAppErrorHandler (
 963:../uvc.c      ****         CyU3PReturnStatus_t status        /* API return status */
 964:../uvc.c      ****         )
 965:../uvc.c      **** {
 966:../uvc.c      ****     /* Application failed with the error code status */
 967:../uvc.c      **** 
 968:../uvc.c      ****     /* Add custom debug or recovery actions here */
 969:../uvc.c      **** 
 970:../uvc.c      ****     /* Loop indefinitely */
 971:../uvc.c      ****     for (;;)
 972:../uvc.c      ****     {
 973:../uvc.c      ****         /* Thread sleep : 100 ms */
 974:../uvc.c      ****         CyU3PThreadSleep (100);
 975:../uvc.c      ****     }
 976:../uvc.c      **** }
 977:../uvc.c      **** 
 978:../uvc.c      **** 
 979:../uvc.c      **** /* UVC header addition function */
 980:../uvc.c      ****     static void
 981:../uvc.c      **** esUVCUvcAddHeader (
 982:../uvc.c      ****         uint8_t *buffer_p,      /* Buffer pointer */
 983:../uvc.c      ****         uint8_t frameInd        /* EOF or normal frame indication */
 984:../uvc.c      ****         )
 985:../uvc.c      **** {
 986:../uvc.c      ****     /* Copy header to buffer */
 987:../uvc.c      ****     CyU3PMemCopy (buffer_p, (uint8_t *)glUVCHeader, CY_FX_UVC_MAX_HEADER);
 988:../uvc.c      **** 
 989:../uvc.c      ****     /* Check if last packet of the frame. */
 990:../uvc.c      ****     if (frameInd == CY_FX_UVC_HEADER_EOF)
 991:../uvc.c      ****     {
 992:../uvc.c      ****         /* Modify UVC header to toggle Frame ID */
 993:../uvc.c      ****         glUVCHeader[1] ^= CY_FX_UVC_HEADER_FRAME_ID;
 994:../uvc.c      **** 
 995:../uvc.c      ****         /* Indicate End of Frame in the buffer */
 996:../uvc.c      ****         buffer_p[1] |=  CY_FX_UVC_HEADER_EOF;
 997:../uvc.c      ****     }
 998:../uvc.c      **** }
 999:../uvc.c      **** 
1000:../uvc.c      **** 
1001:../uvc.c      **** /* This function starts the video streaming application. It is called
1002:../uvc.c      ****  * when there is a SET_INTERFACE event for alternate interface 1
1003:../uvc.c      ****  * (in case of UVC over Isochronous Endpoint usage) or when a
1004:../uvc.c      ****  * COMMIT_CONTROL(SET_CUR) request is received (when using BULK only UVC).
1005:../uvc.c      ****  */
1006:../uvc.c      ****     CyU3PReturnStatus_t
1007:../uvc.c      **** esUVCUvcApplnStart (void)
1008:../uvc.c      **** {
1009:../uvc.c      ****     CyU3PReturnStatus_t status = CY_U3P_SUCCESS;
1010:../uvc.c      **** 
1011:../uvc.c      ****     glIsApplnActive = CyTrue;
1012:../uvc.c      ****     glDmaDone = 0;
1013:../uvc.c      ****     glDMATxCount = 0;
1014:../uvc.c      ****     glHitFV = CyFalse;
1015:../uvc.c      ****     doLpmDisable = CyTrue;
1016:../uvc.c      **** 
1017:../uvc.c      **** #ifdef RESET_TIMER_ENABLE
1018:../uvc.c      ****     CyU3PTimerStop (&UvcTimer);
1019:../uvc.c      **** #endif
1020:../uvc.c      **** 
1021:../uvc.c      **** 
1022:../uvc.c      ****     /* Place the EP in NAK mode before cleaning up the pipe. */
1023:../uvc.c      ****     CyU3PUsbSetEpNak (CY_FX_EP_BULK_VIDEO, CyTrue);
1024:../uvc.c      ****     CyU3PBusyWait (100);
1025:../uvc.c      **** 
1026:../uvc.c      ****     /* Reset USB EP and DMA */
1027:../uvc.c      ****     CyU3PUsbFlushEp(CY_FX_EP_BULK_VIDEO);
1028:../uvc.c      ****     status = CyU3PDmaMultiChannelReset (&glChHandleUVCStream);
1029:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1030:../uvc.c      ****     {
1031:../uvc.c      ****         CyU3PDebugPrint (4,"\n\rAplnStrt:ChannelReset Err = 0x%x", status);
1032:../uvc.c      ****         return status;
1033:../uvc.c      ****     }
1034:../uvc.c      **** 
1035:../uvc.c      ****     status = CyU3PDmaMultiChannelSetXfer (&glChHandleUVCStream, 0, 0);
1036:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1037:../uvc.c      ****     {
1038:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAplnStrt:SetXfer Err = 0x%x", status);
1039:../uvc.c      ****         return status;
1040:../uvc.c      ****     }
1041:../uvc.c      **** 
1042:../uvc.c      ****     CyU3PUsbSetEpNak (CY_FX_EP_BULK_VIDEO, CyFalse);
1043:../uvc.c      ****     CyU3PBusyWait (200);
1044:../uvc.c      **** //
1045:../uvc.c      **** //    /* Place the EP in NAK mode before cleaning up the pipe. */
1046:../uvc.c      **** //    CyU3PUsbSetEpNak (CY_FX_EP_BULK_VIDEO, CyTrue);
1047:../uvc.c      **** //    CyU3PBusyWait (100);
1048:../uvc.c      **** //
1049:../uvc.c      **** //    /* Reset USB EP and DMA */
1050:../uvc.c      **** //    CyU3PUsbFlushEp(CY_FX_EP_BULK_VIDEO);
1051:../uvc.c      **** //    status = CyU3PDmaMultiChannelReset (&glChHandleUVCStream);
1052:../uvc.c      **** //    if (status != CY_U3P_SUCCESS)
1053:../uvc.c      **** //    {
1054:../uvc.c      **** //        CyU3PDebugPrint (4,"\n\rAplnStrt:ChannelReset Err = 0x%x", status);
1055:../uvc.c      **** //        return status;
1056:../uvc.c      **** //    }
1057:../uvc.c      **** //    status = CyU3PDmaMultiChannelSetXfer (&glChHandleUVCStream, 0, 0);
1058:../uvc.c      **** //    if (status != CY_U3P_SUCCESS)
1059:../uvc.c      **** //    {
1060:../uvc.c      **** //        CyU3PDebugPrint (4, "\n\rAplnStrt:SetXfer Err = 0x%x", status);
1061:../uvc.c      **** //        return status;
1062:../uvc.c      **** //    }
1063:../uvc.c      **** //    CyU3PUsbSetEpNak (CY_FX_EP_BULK_VIDEO, CyFalse);
1064:../uvc.c      **** //    CyU3PBusyWait (200);
1065:../uvc.c      **** 
1066:../uvc.c      **** 	 /* Night Mode function
1067:../uvc.c      **** 	 *  --------------------
1068:../uvc.c      **** 	 *  esOV5640_Nightmode API is used to enable the Nightmode
1069:../uvc.c      **** 	 *  of OV5640 sensor.
1070:../uvc.c      **** 	 *  Set Enable -- Cytrue to enable Nightmode
1071:../uvc.c      **** 	 * 				  CyFalse to Disable Nightmode
1072:../uvc.c      **** 	 *
1073:../uvc.c      **** 	 *  Set NightMode_option -- 1 to 6 to set different night modes
1074:../uvc.c      **** 	 *
1075:../uvc.c      **** 	 * To test different night modes, uncomment the below statement and build the firmware
1076:../uvc.c      **** 	 */
1077:../uvc.c      ****     //TODO Change this Function to "Sensor Specific" Nightmode Function to enable the nightmode(If 
1078:../uvc.c      **** 	/*esOV5640_Nightmode(CyTrue,3);*/
1079:../uvc.c      **** 
1080:../uvc.c      ****     //TODO Change this Function with "Sensor Specific" AutoFocus Function to Set the AutoFocus of t
1081:../uvc.c      **** 
1082:../uvc.c      ****     /* Resume the Fixed Function GPIF State machine */
1083:../uvc.c      ****     CyU3PGpifSMControl(CyFalse);
1084:../uvc.c      **** 
1085:../uvc.c      ****     glActiveSocket = 0;
1086:../uvc.c      ****     CyU3PGpifSMSwitch(257, 0, 257, 0, 2/*ES_UVC_INVALID_GPIF_STATE, CX3_START_SCK0,
1087:../uvc.c      ****     		ES_UVC_INVALID_GPIF_STATE, ALPHA_CX3_START_SCK0, ES_UVC_GPIF_SWITCH_TIMEOUT*/);
1088:../uvc.c      **** 
1089:../uvc.c      ****     CyU3PThreadSleep(10);
1090:../uvc.c      **** 
1091:../uvc.c      ****     /* Wake Mipi interface and Image Sensor */
1092:../uvc.c      ****     //CyU3PMipicsiWakeup();
1093:../uvc.c      **** 
1094:../uvc.c      ****     //TODO Change this function with "Sensor Specific" PowerUp function to PowerUp the sensor
1095:../uvc.c      ****     //esCamera_Power_Up();
1096:../uvc.c      **** 
1097:../uvc.c      ****     glMipiActive = CyTrue; //(???)
1098:../uvc.c      **** 
1099:../uvc.c      **** 	if(glStillCaptureStart!= CyTrue)
1100:../uvc.c      **** 	{
1101:../uvc.c      **** 		if(g_IsAutoFocus)
1102:../uvc.c      **** 			;//esOV5640_SetAutofocus(g_IsAutoFocus);
1103:../uvc.c      **** 	}
1104:../uvc.c      ****     return CY_U3P_SUCCESS;
1105:../uvc.c      **** }
1106:../uvc.c      **** 
1107:../uvc.c      **** /* This function stops the video streaming. It is called from the USB event
1108:../uvc.c      ****  * handler, when there is a reset / disconnect or SET_INTERFACE for alternate
1109:../uvc.c      ****  * interface 0 in case of ischronous implementation or when a Clear Feature (Halt)
1110:../uvc.c      ****  * request is received (in case of bulk only implementation).
1111:../uvc.c      ****  */
1112:../uvc.c      ****     void
1113:../uvc.c      **** esUVCUvcApplnStop(void)
1114:../uvc.c      **** {
1115:../uvc.c      ****     CyU3PReturnStatus_t status = CY_U3P_SUCCESS;
1116:../uvc.c      **** 
1117:../uvc.c      ****     /* Update the flag so that the application thread is notified of this. */
1118:../uvc.c      ****     glIsApplnActive = CyFalse;
1119:../uvc.c      **** 
1120:../uvc.c      ****     /* Stop the image sensor and CX3 mipi interface */
1121:../uvc.c      ****     //status = CyU3PMipicsiSleep();
1122:../uvc.c      **** 
1123:../uvc.c      ****     //TODO Change this function with "Sensor Specific" PowerDown function to PowerDown the sensor
1124:../uvc.c      ****     //esCamera_Power_Down();
1125:../uvc.c      **** 
1126:../uvc.c      ****     //glMipiActive = CyFalse;
1127:../uvc.c      **** 
1128:../uvc.c      **** #ifdef RESET_TIMER_ENABLE
1129:../uvc.c      ****     CyU3PTimerStop (&UvcTimer);
1130:../uvc.c      **** #endif
1131:../uvc.c      **** 
1132:../uvc.c      ****     /* Pause the GPIF interface*/
1133:../uvc.c      ****     //CyU3PGpifSMControl(CyTrue);
1134:../uvc.c      **** 
1135:../uvc.c      ****     CyU3PUsbSetEpNak (CY_FX_EP_BULK_VIDEO, CyTrue);
1136:../uvc.c      ****     CyU3PBusyWait (100);
1137:../uvc.c      **** 
1138:../uvc.c      ****     /* Abort and destroy the video streaming channel */
1139:../uvc.c      ****     /* Reset the channel: Set to DSCR chain starting point in PORD/CONS SCKT; set DSCR_SIZE field i
1140:../uvc.c      ****     status = CyU3PDmaMultiChannelReset(&glChHandleUVCStream);
1141:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1142:../uvc.c      ****     {
1143:../uvc.c      ****         CyU3PDebugPrint (4,"\n\rAplnStop:ChannelReset Err = 0x%x",status);
1144:../uvc.c      ****     }
1145:../uvc.c      ****     CyU3PThreadSleep(25);
1146:../uvc.c      **** 
1147:../uvc.c      ****     /* Flush the endpoint memory */
1148:../uvc.c      ****     CyU3PUsbFlushEp(CY_FX_EP_BULK_VIDEO);
1149:../uvc.c      ****     /* Clear the stall condition and sequence numbers if ClearFeature. */
1150:../uvc.c      ****     if (glIsClearFeature)
1151:../uvc.c      ****     {
1152:../uvc.c      ****         CyU3PUsbStall (CY_FX_EP_BULK_VIDEO, CyFalse, CyTrue);
1153:../uvc.c      ****         glIsClearFeature = CyFalse;
1154:../uvc.c      ****     }
1155:../uvc.c      ****     CyU3PUsbSetEpNak (CY_FX_EP_BULK_VIDEO, CyFalse);
1156:../uvc.c      **** 	CyU3PBusyWait (200);
1157:../uvc.c      **** 
1158:../uvc.c      ****     glDMATxCount = 0;
1159:../uvc.c      ****     glDmaDone = 0;
1160:../uvc.c      **** 
1161:../uvc.c      ****     /* Enable USB 3.0 LPM */
1162:../uvc.c      ****     CyU3PUsbLPMEnable ();
1163:../uvc.c      **** }
1164:../uvc.c      **** 
1165:../uvc.c      **** /* GpifCB callback function is invoked when FV triggers GPIF interrupt */
1166:../uvc.c      ****     void
1167:../uvc.c      **** esUVCGpifCB (
1168:../uvc.c      ****         CyU3PGpifEventType event,
1169:../uvc.c      ****         uint8_t currentState
1170:../uvc.c      ****         )
1171:../uvc.c      **** {
1172:../uvc.c      ****     CyU3PReturnStatus_t status = CY_U3P_SUCCESS;
1173:../uvc.c      ****     /* Handle interrupt from the State Machine */
1174:../uvc.c      ****     if (event == CYU3P_GPIF_EVT_SM_INTERRUPT)
1175:../uvc.c      ****     {
1176:../uvc.c      ****         /* Wrapup Socket 0*/
1177:../uvc.c      ****         if(currentState == PARTIAL_BUF_IN_SCK0)
1178:../uvc.c      ****         {
1179:../uvc.c      ****             status = CyU3PDmaMultiChannelSetWrapUp(&glChHandleUVCStream,0);
1180:../uvc.c      ****             if (status != CY_U3P_SUCCESS)
1181:../uvc.c      ****             {
1182:../uvc.c      ****                 CyU3PDebugPrint (4, "\n\rGpifCB:WrapUp SCK0 Err = 0x%x",status);
1183:../uvc.c      ****             }
1184:../uvc.c      ****         }
1185:../uvc.c      ****         /* Wrapup Socket 1 */
1186:../uvc.c      ****         else if(currentState == PARTIAL_BUF_IN_SCK1)
1187:../uvc.c      ****         {
1188:../uvc.c      ****             status = CyU3PDmaMultiChannelSetWrapUp(&glChHandleUVCStream,1);
1189:../uvc.c      ****             if (status != CY_U3P_SUCCESS)
1190:../uvc.c      ****             {
1191:../uvc.c      ****                 CyU3PDebugPrint (4, "\n\rGpifCB:WrapUp SCK1 Err = 0x%x",status);
1192:../uvc.c      ****             }
1193:../uvc.c      ****         }
1194:../uvc.c      ****     }
1195:../uvc.c      **** }
1196:../uvc.c      **** 
1197:../uvc.c      **** 
1198:../uvc.c      **** /* DMA callback function to handle the produce and consume events. */
1199:../uvc.c      ****     void
1200:../uvc.c      **** esUVCUvcAppDmaCallback (
1201:../uvc.c      ****         CyU3PDmaMultiChannel   *chHandle,
1202:../uvc.c      ****         CyU3PDmaCbType_t  type,
1203:../uvc.c      ****         CyU3PDmaCBInput_t *input
1204:../uvc.c      ****         )
1205:../uvc.c      **** {
1206:../uvc.c      ****     CyU3PDmaBuffer_t DmaBuffer;
1207:../uvc.c      ****     CyU3PReturnStatus_t status = CY_U3P_SUCCESS;
1208:../uvc.c      **** 
1209:../uvc.c      ****     if (type == CY_U3P_DMA_CB_PROD_EVENT)
1210:../uvc.c      ****     {
1211:../uvc.c      ****         /* This is a produce event notification to the CPU. This notification is
1212:../uvc.c      ****          * received upon reception of every buffer. The buffer will not be sent
1213:../uvc.c      ****          * out unless it is explicitly committed. The call shall fail if there
1214:../uvc.c      ****          * is a bus reset / usb disconnect or if there is any application error. */
1215:../uvc.c      **** 
1216:../uvc.c      ****         /* Disable USB 3.0 LPM while Buffer is being transmitted out*/
1217:../uvc.c      ****         if ((CyU3PUsbGetSpeed () == CY_U3P_SUPER_SPEED) && (doLpmDisable))
1218:../uvc.c      ****         {
1219:../uvc.c      ****             CyU3PUsbLPMDisable ();
1220:../uvc.c      ****             CyU3PUsbSetLinkPowerState (CyU3PUsbLPM_U0);
1221:../uvc.c      ****             CyU3PBusyWait (200);
1222:../uvc.c      **** 
1223:../uvc.c      ****             doLpmDisable = CyFalse;
1224:../uvc.c      ****         }
1225:../uvc.c      **** #ifdef RESET_TIMER_ENABLE
1226:../uvc.c      ****             CyU3PTimerStart (&UvcTimer);
1227:../uvc.c      **** #endif
1228:../uvc.c      **** 
1229:../uvc.c      ****         status = CyU3PDmaMultiChannelGetBuffer(chHandle, &DmaBuffer, CYU3P_NO_WAIT);
1230:../uvc.c      ****         while (status == CY_U3P_SUCCESS)
1231:../uvc.c      ****         {
1232:../uvc.c      ****             /* Add Headers*/
1233:../uvc.c      ****             if(DmaBuffer.count < ES_UVC_DATA_BUF_SIZE)
1234:../uvc.c      ****             {
1235:../uvc.c      ****                 esUVCUvcAddHeader ((DmaBuffer.buffer - CY_FX_UVC_MAX_HEADER), CY_FX_UVC_HEADER_EOF)
1236:../uvc.c      ****                 glHitFV = CyTrue;
1237:../uvc.c      ****             }
1238:../uvc.c      ****             else
1239:../uvc.c      ****             {
1240:../uvc.c      ****                 esUVCUvcAddHeader ((DmaBuffer.buffer - CY_FX_UVC_MAX_HEADER), CY_FX_UVC_HEADER_FRAM
1241:../uvc.c      ****             }
1242:../uvc.c      **** 
1243:../uvc.c      ****             /* Commit Buffer to USB*/
1244:../uvc.c      ****             status = CyU3PDmaMultiChannelCommitBuffer (chHandle, (DmaBuffer.count + 12), 0);
1245:../uvc.c      ****             if (status != CY_U3P_SUCCESS)
1246:../uvc.c      ****             {
1247:../uvc.c      ****                    CyU3PEventSet(&glFxUVCEvent, ES_TIMER_RESET_EVENT,CYU3P_EVENT_OR);
1248:../uvc.c      ****                    break;
1249:../uvc.c      ****             }
1250:../uvc.c      ****             else
1251:../uvc.c      ****             {
1252:../uvc.c      ****                 glDMATxCount++;
1253:../uvc.c      ****                 glDmaDone++;
1254:../uvc.c      ****             }
1255:../uvc.c      **** 
1256:../uvc.c      ****             glActiveSocket ^= 1; /* Toggle the Active Socket */
1257:../uvc.c      ****             status = CyU3PDmaMultiChannelGetBuffer(chHandle, &DmaBuffer, CYU3P_NO_WAIT);
1258:../uvc.c      ****         }
1259:../uvc.c      ****     }
1260:../uvc.c      ****     else if(type == CY_U3P_DMA_CB_CONS_EVENT)
1261:../uvc.c      ****     {
1262:../uvc.c      ****         glDmaDone--;
1263:../uvc.c      **** 
1264:../uvc.c      ****         /* Check if Frame is completely transferred */
1265:../uvc.c      ****         glIsStreamingStarted = CyTrue;
1266:../uvc.c      **** 
1267:../uvc.c      ****         if((glHitFV == CyTrue) && (glDmaDone == 0))
1268:../uvc.c      ****         {
1269:../uvc.c      ****             glHitFV = CyFalse;
1270:../uvc.c      ****             glDMATxCount=0;
1271:../uvc.c      **** #ifdef RESET_TIMER_ENABLE
1272:../uvc.c      ****             CyU3PTimerStop (&UvcTimer);
1273:../uvc.c      **** #endif
1274:../uvc.c      ****             CyU3PGpifSMSwitch (257, 0, 257, 0, 2);
1275:../uvc.c      ****             /*
1276:../uvc.c      ****             if (glActiveSocket)
1277:../uvc.c      ****                 CyU3PGpifSMSwitch(ES_UVC_INVALID_GPIF_STATE, CX3_START_SCK1,
1278:../uvc.c      ****                 		ES_UVC_INVALID_GPIF_STATE, ALPHA_CX3_START_SCK1, ES_UVC_GPIF_SWITCH_TIMEOUT);
1279:../uvc.c      ****             else
1280:../uvc.c      ****                 CyU3PGpifSMSwitch(ES_UVC_INVALID_GPIF_STATE, CX3_START_SCK0,
1281:../uvc.c      ****                 		ES_UVC_INVALID_GPIF_STATE, ALPHA_CX3_START_SCK0, ES_UVC_GPIF_SWITCH_TIMEOUT);
1282:../uvc.c      ****              */
1283:../uvc.c      ****             CyU3PUsbLPMEnable ();
1284:../uvc.c      ****             doLpmDisable = CyTrue;
1285:../uvc.c      **** #ifdef RESET_TIMER_ENABLE
1286:../uvc.c      ****             CyU3PTimerModify (&UvcTimer, TIMER_PERIOD, 0);
1287:../uvc.c      **** #endif
1288:../uvc.c      **** 
1289:../uvc.c      ****             if(glStillCaptured == CyTrue)
1290:../uvc.c      ****             {
1291:../uvc.c      ****             	glStillCaptured = CyFalse;
1292:../uvc.c      ****             	glUVCHeader[1]^=CY_FX_UVC_HEADER_STILL_IMAGE;
1293:../uvc.c      ****             	glFrameIndexToSet = glCurrentFrameIndex;
1294:../uvc.c      ****             	CyU3PEventSet(&glFxUVCEvent, ES_TIMER_RESET_EVENT,CYU3P_EVENT_OR);
1295:../uvc.c      ****             }
1296:../uvc.c      ****             if(glStillCaptureStart == CyTrue)
1297:../uvc.c      ****             {
1298:../uvc.c      ****             	if(glStillSkip == 3)
1299:../uvc.c      **** 				{
1300:../uvc.c      ****             		glStillSkip--;
1301:../uvc.c      ****             		glFrameIndexToSet = 4;
1302:../uvc.c      **** 					CyU3PEventSet(&glFxUVCEvent, ES_TIMER_RESET_EVENT,CYU3P_EVENT_OR);
1303:../uvc.c      **** 				}
1304:../uvc.c      ****             	else if(glStillSkip == 0)
1305:../uvc.c      ****             	{
1306:../uvc.c      ****             		glStillCaptureStart = CyFalse;
1307:../uvc.c      **** 					glStillCaptured = CyTrue;
1308:../uvc.c      **** 					glUVCHeader[1]^=CY_FX_UVC_HEADER_STILL_IMAGE;
1309:../uvc.c      ****             	}
1310:../uvc.c      ****             	else
1311:../uvc.c      ****             		glStillSkip--;
1312:../uvc.c      ****             }
1313:../uvc.c      ****         }
1314:../uvc.c      ****     }
1315:../uvc.c      **** }
1316:../uvc.c      **** 
1317:../uvc.c      **** /* This is the Callback function to handle the USB Events */
1318:../uvc.c      ****     static void
1319:../uvc.c      **** esUVCUvcApplnUSBEventCB (
1320:../uvc.c      ****         CyU3PUsbEventType_t evtype,     /* Event type */
1321:../uvc.c      ****         uint16_t            evdata      /* Event data */
1322:../uvc.c      ****         )
1323:../uvc.c      **** {
1324:../uvc.c      ****     uint8_t interface = 0, altSetting = 0;
1325:../uvc.c      **** 
1326:../uvc.c      ****     switch (evtype)
1327:../uvc.c      ****     {
1328:../uvc.c      ****         case CY_U3P_USB_EVENT_SUSPEND:
1329:../uvc.c      ****             /* Suspend the device with Wake On Bus Activity set */
1330:../uvc.c      ****             glIsStreamingStarted = CyFalse;
1331:../uvc.c      ****             CyU3PEventSet (&glFxUVCEvent, ES_USB_SUSP_EVENT_FLAG, CYU3P_EVENT_OR);
1332:../uvc.c      ****             break;
1333:../uvc.c      ****         case CY_U3P_USB_EVENT_SETINTF:
1334:../uvc.c      ****             /* Start the video streamer application if the
1335:../uvc.c      ****              * interface requested was 1. If not, stop the
1336:../uvc.c      ****              * streamer. */
1337:../uvc.c      ****             interface = CY_U3P_GET_MSB(evdata);
1338:../uvc.c      ****             altSetting = CY_U3P_GET_LSB(evdata);
1339:../uvc.c      **** 
1340:../uvc.c      ****             glIsStreamingStarted = CyFalse;
1341:../uvc.c      **** 
1342:../uvc.c      ****             if ((altSetting == CY_FX_UVC_STREAM_INTERFACE) && (interface == 1))
1343:../uvc.c      ****             {
1344:../uvc.c      ****                 /* Stop the application before re-starting. */
1345:../uvc.c      ****                 if (glIsApplnActive)
1346:../uvc.c      ****                 {
1347:../uvc.c      ****                 	glIsClearFeature = CyTrue;
1348:../uvc.c      ****                     esUVCUvcApplnStop ();
1349:../uvc.c      ****                 }
1350:../uvc.c      ****                 esUVCUvcApplnStart ();
1351:../uvc.c      **** 
1352:../uvc.c      ****             }
1353:../uvc.c      ****             else if ((altSetting == 0x00) && (interface == 1))
1354:../uvc.c      ****             {
1355:../uvc.c      ****             	glPreviewStarted = CyFalse;
1356:../uvc.c      ****             	/* Stop the application before re-starting. */
1357:../uvc.c      ****             	glIsClearFeature = CyTrue;
1358:../uvc.c      **** 				esUVCUvcApplnStop ();
1359:../uvc.c      **** 				glcommitcount = 0;
1360:../uvc.c      ****             }
1361:../uvc.c      ****             break;
1362:../uvc.c      **** 
1363:../uvc.c      ****             /* Fall-through. */
1364:../uvc.c      **** 
1365:../uvc.c      ****         case CY_U3P_USB_EVENT_SETCONF:
1366:../uvc.c      ****         case CY_U3P_USB_EVENT_RESET:
1367:../uvc.c      ****         case CY_U3P_USB_EVENT_DISCONNECT:
1368:../uvc.c      ****         case CY_U3P_USB_EVENT_CONNECT:
1369:../uvc.c      ****             glIsStreamingStarted = CyFalse;
1370:../uvc.c      ****             if (evtype == CY_U3P_USB_EVENT_SETCONF)
1371:../uvc.c      ****                 glIsConfigured = CyTrue;
1372:../uvc.c      ****             else
1373:../uvc.c      ****                 glIsConfigured = CyFalse;
1374:../uvc.c      **** 
1375:../uvc.c      ****             /* Stop the video streamer application and enable LPM. */
1376:../uvc.c      ****             CyU3PUsbLPMEnable ();
1377:../uvc.c      ****             if (glIsApplnActive)
1378:../uvc.c      ****             {
1379:../uvc.c      ****             	glIsClearFeature = CyTrue;
1380:../uvc.c      ****                 esUVCUvcApplnStop ();
1381:../uvc.c      ****             }
1382:../uvc.c      ****             break;
1383:../uvc.c      ****         default:
1384:../uvc.c      ****             break;
1385:../uvc.c      ****     }
1386:../uvc.c      **** }
1387:../uvc.c      **** 
1388:../uvc.c      **** /* Callback for LPM requests. Always return true to allow host to transition device
1389:../uvc.c      ****  * into required LPM state U1/U2/U3. When data transmission is active LPM management
1390:../uvc.c      ****  * is explicitly disabled to prevent data transmission errors.
1391:../uvc.c      ****  */
1392:../uvc.c      **** static CyBool_t esUVCApplnLPMRqtCB (
1393:../uvc.c      ****         CyU3PUsbLinkPowerMode link_mode         /*USB 3.0 linkmode requested by Host */
1394:../uvc.c      ****         )
1395:../uvc.c      **** {
  21              		.loc 1 1395 0
  22              		.cfi_startproc
  23              		@ args = 0, pretend = 0, frame = 0
  24              		@ frame_needed = 0, uses_anonymous_args = 0
  25              		@ link register save eliminated.
  26              	.LVL0:
1396:../uvc.c      ****     return CyTrue;
1397:../uvc.c      **** }
  27              		.loc 1 1397 0
  28 0000 0100A0E3 		mov	r0, #1
  29              	.LVL1:
  30 0004 1EFF2FE1 		bx	lr
  31              		.cfi_endproc
  32              	.LFE9:
  34              		.align	2
  35              		.global	I2CCmdCb
  37              	I2CCmdCb:
  38              	.LFB21:
1398:../uvc.c      **** 
1399:../uvc.c      **** //TODO Change this function with "Sensor Specific" function to write the sensor settings & configur
1400:../uvc.c      **** void esSetCameraResolution(uint8_t FrameIndex)
1401:../uvc.c      **** {
1402:../uvc.c      **** 	CyU3PReturnStatus_t status = CY_U3P_SUCCESS;
1403:../uvc.c      **** 	CyU3PDebugPrint (4, "\n\resSetCameraResolution");
1404:../uvc.c      **** 	/* Super Speed USB Streams*/
1405:../uvc.c      **** 	if (CyU3PUsbGetSpeed () == CY_U3P_SUPER_SPEED)
1406:../uvc.c      **** 	{
1407:../uvc.c      **** 		if(FrameIndex == 0x01)
1408:../uvc.c      **** 		{
1409:../uvc.c      **** 			/* Write 1080pSettings */
1410:../uvc.c      **** 			//status = CyU3PMipicsiSetIntfParams (&cfgUvc1080p30NoMclk, CyFalse);
1411:../uvc.c      **** 			if (status != CY_U3P_SUCCESS)
1412:../uvc.c      **** 			{
1413:../uvc.c      **** 				CyU3PDebugPrint (4, "\n\rUSBStpCB:SetIntfParams SS1 Err = 0x%x", status);
1414:../uvc.c      **** 			}
1415:../uvc.c      **** 			//esOV5640_1080P_config();
1416:../uvc.c      **** 		}
1417:../uvc.c      **** 		else if(FrameIndex == 0x02)
1418:../uvc.c      **** 		{
1419:../uvc.c      **** 			/* Write VGA Settings */
1420:../uvc.c      **** 			//status = CyU3PMipicsiSetIntfParams (&cfgUvcVga30NoMclk, CyFalse);
1421:../uvc.c      **** 			if (status != CY_U3P_SUCCESS)
1422:../uvc.c      **** 			{
1423:../uvc.c      **** 				CyU3PDebugPrint (4, "\n\rUSBStpCB:SetIntfParams FS Err = 0x%x", status);
1424:../uvc.c      **** 			}
1425:../uvc.c      **** 			//esOV5640_VGA_config();
1426:../uvc.c      **** 		}
1427:../uvc.c      **** 		else if(FrameIndex == 0x03)
1428:../uvc.c      **** 		{
1429:../uvc.c      **** 			/* Write 720pSettings */
1430:../uvc.c      **** 			//status = CyU3PMipicsiSetIntfParams (&cfgUvc720p60NoMclk, CyFalse);
1431:../uvc.c      **** 			if (status != CY_U3P_SUCCESS)
1432:../uvc.c      **** 			{
1433:../uvc.c      **** 				CyU3PDebugPrint (4, "\n\rUSBStpCB:SetIntfParams SS2 Err = 0x%x", status);
1434:../uvc.c      **** 			}
1435:../uvc.c      **** 			//esOV5640_720P_config();
1436:../uvc.c      **** 		}
1437:../uvc.c      **** 		else if(FrameIndex == 0x04)
1438:../uvc.c      **** 		{
1439:../uvc.c      **** 			//status = CyU3PMipicsiSetIntfParams (&cfgUvc5Mp15NoMclk, CyFalse);
1440:../uvc.c      **** 			if (status != CY_U3P_SUCCESS)
1441:../uvc.c      **** 			{
1442:../uvc.c      **** 				CyU3PDebugPrint (4, "\n\rUSBStpCB:SetIntfParams SS2 Err = 0x%x", status);
1443:../uvc.c      **** 			}
1444:../uvc.c      **** 			//esOV5640_5MP_config();
1445:../uvc.c      **** 		}
1446:../uvc.c      **** 	}
1447:../uvc.c      **** 	/* High Speed USB Streams*/
1448:../uvc.c      **** 	else if (CyU3PUsbGetSpeed () == CY_U3P_HIGH_SPEED)
1449:../uvc.c      **** 	{
1450:../uvc.c      **** 		/* Write VGA Settings */
1451:../uvc.c      **** 		//status = CyU3PMipicsiSetIntfParams (&cfgUvcVga30NoMclk, CyFalse);
1452:../uvc.c      **** 		if (status != CY_U3P_SUCCESS)
1453:../uvc.c      **** 		{
1454:../uvc.c      **** 			CyU3PDebugPrint (4, "\n\rUSBStpCB:SetIntfParams HS Err = 0x%x", status);
1455:../uvc.c      **** 		}
1456:../uvc.c      **** 		//esOV5640_VGA_config();
1457:../uvc.c      **** 		//esOV5640_VGA_HS_config();
1458:../uvc.c      **** 	}
1459:../uvc.c      **** 	/* Full Speed USB Streams*/
1460:../uvc.c      **** 	else
1461:../uvc.c      **** 	{
1462:../uvc.c      **** 		/* Write VGA Settings */
1463:../uvc.c      **** 		//esOV5640_VGA_config();
1464:../uvc.c      **** 		//status = CyU3PMipicsiSetIntfParams (&cfgUvcVga30NoMclk, CyFalse);
1465:../uvc.c      **** 		if (status != CY_U3P_SUCCESS)
1466:../uvc.c      **** 		{
1467:../uvc.c      **** 			CyU3PDebugPrint (4, "\n\rUSBStpCB:SetIntfParams FS Err = 0x%x", status);
1468:../uvc.c      **** 		}
1469:../uvc.c      **** 	}
1470:../uvc.c      **** }
1471:../uvc.c      **** 
1472:../uvc.c      **** /* Callback to handle the USB Setup Requests and UVC Class events */
1473:../uvc.c      ****     static CyBool_t
1474:../uvc.c      **** esUVCUvcApplnUSBSetupCB (
1475:../uvc.c      ****         uint32_t setupdat0,     /* SETUP Data 0 */
1476:../uvc.c      ****         uint32_t setupdat1      /* SETUP Data 1 */
1477:../uvc.c      ****         )
1478:../uvc.c      **** {
1479:../uvc.c      ****     uint8_t  bRequest, bType,bRType, bTarget;
1480:../uvc.c      ****     uint16_t wValue, wIndex, wLength;
1481:../uvc.c      ****     uint16_t readCount = 0;
1482:../uvc.c      ****     uint8_t  ep0Buf[2];
1483:../uvc.c      ****     CyU3PReturnStatus_t status = CY_U3P_SUCCESS;
1484:../uvc.c      ****     CyBool_t uvcHandleReq = CyFalse;
1485:../uvc.c      ****     uint8_t temp = 0;
1486:../uvc.c      ****     CyBool_t isHandled = CyFalse;
1487:../uvc.c      ****     uint8_t RequestOption = 0;
1488:../uvc.c      **** 
1489:../uvc.c      ****     /* Decode the fields from the setup request. */
1490:../uvc.c      ****     bRType = (setupdat0 & CY_U3P_USB_REQUEST_TYPE_MASK);
1491:../uvc.c      ****     bType    = (bRType & CY_U3P_USB_TYPE_MASK);
1492:../uvc.c      ****     bTarget  = (bRType & CY_U3P_USB_TARGET_MASK);
1493:../uvc.c      ****     bRequest = ((setupdat0 & CY_U3P_USB_REQUEST_MASK) >> CY_U3P_USB_REQUEST_POS);
1494:../uvc.c      ****     wValue   = ((setupdat0 & CY_U3P_USB_VALUE_MASK)   >> CY_U3P_USB_VALUE_POS);
1495:../uvc.c      ****     wIndex   = ((setupdat1 & CY_U3P_USB_INDEX_MASK)   >> CY_U3P_USB_INDEX_POS);
1496:../uvc.c      ****     wLength  = ((setupdat1 & CY_U3P_USB_LENGTH_MASK)  >> CY_U3P_USB_LENGTH_POS);
1497:../uvc.c      **** 
1498:../uvc.c      **** #if 1
1499:../uvc.c      ****    	CyU3PDebugPrint(4, "\n\rbRType = 0x%x, bRequest = 0x%x, wValue = 0x%x, wIndex = 0x%x, wLength= 
1500:../uvc.c      **** #endif
1501:../uvc.c      **** 
1502:../uvc.c      ****     /* ClearFeature(Endpoint_Halt) received on the Streaming Endpoint. Stop Streaming */
1503:../uvc.c      ****     if((bTarget == CY_U3P_USB_TARGET_ENDPT) && (bRequest == CY_U3P_USB_SC_CLEAR_FEATURE)
1504:../uvc.c      ****             && (wIndex == CY_FX_EP_BULK_VIDEO) && (wValue == CY_U3P_USBX_FS_EP_HALT))
1505:../uvc.c      ****     {
1506:../uvc.c      ****         if ((glIsApplnActive) && (glIsStreamingStarted))
1507:../uvc.c      ****         {
1508:../uvc.c      ****         	glPreviewStarted = CyFalse;
1509:../uvc.c      ****             glIsClearFeature = CyTrue;
1510:../uvc.c      ****             esUVCUvcApplnStop();
1511:../uvc.c      ****             glcommitcount = 0;
1512:../uvc.c      ****         }
1513:../uvc.c      ****         return CyFalse;
1514:../uvc.c      ****     }
1515:../uvc.c      **** 
1516:../uvc.c      ****     if( bRType == CY_U3P_USB_GS_DEVICE)
1517:../uvc.c      ****     {
1518:../uvc.c      ****         /* Make sure that we bring the link back to U0, so that the ERDY can be sent. */
1519:../uvc.c      ****         if (CyU3PUsbGetSpeed () == CY_U3P_SUPER_SPEED)
1520:../uvc.c      ****             CyU3PUsbSetLinkPowerState (CyU3PUsbLPM_U0);
1521:../uvc.c      ****     }
1522:../uvc.c      **** 
1523:../uvc.c      ****     if ((bTarget == CY_U3P_USB_TARGET_INTF) && ((bRequest == CY_U3P_USB_SC_SET_FEATURE)
1524:../uvc.c      ****                 || (bRequest == CY_U3P_USB_SC_CLEAR_FEATURE)) && (wValue == 0))
1525:../uvc.c      ****     {
1526:../uvc.c      ****         if (glIsConfigured)
1527:../uvc.c      ****         {
1528:../uvc.c      ****             CyU3PUsbAckSetup ();
1529:../uvc.c      ****         }
1530:../uvc.c      ****         else
1531:../uvc.c      ****         {
1532:../uvc.c      ****             CyU3PUsbStall (0, CyTrue, CyFalse);
1533:../uvc.c      ****         }
1534:../uvc.c      ****         return CyTrue;
1535:../uvc.c      ****     }
1536:../uvc.c      **** 
1537:../uvc.c      ****     if ((bRequest == CY_U3P_USB_SC_GET_STATUS) &&
1538:../uvc.c      ****             (bTarget == CY_U3P_USB_TARGET_INTF))
1539:../uvc.c      ****     {
1540:../uvc.c      ****         /* We support only interface 0. */
1541:../uvc.c      ****         if (wIndex == 0)
1542:../uvc.c      ****         {
1543:../uvc.c      ****             ep0Buf[0] = 0;
1544:../uvc.c      ****             ep0Buf[1] = 0;
1545:../uvc.c      ****             CyU3PUsbSendEP0Data (0x02, ep0Buf);
1546:../uvc.c      ****         }
1547:../uvc.c      ****         else
1548:../uvc.c      ****             CyU3PUsbStall (0, CyTrue, CyFalse);
1549:../uvc.c      ****         return CyTrue;
1550:../uvc.c      ****     }
1551:../uvc.c      **** 
1552:../uvc.c      ****     /* Check for UVC Class Requests */
1553:../uvc.c      ****     if (bType == CY_U3P_USB_CLASS_RQT)
1554:../uvc.c      ****     {
1555:../uvc.c      **** 
1556:../uvc.c      ****         /* UVC Class Requests */
1557:../uvc.c      ****         /* Requests to the Video Streaming Interface (IF 1) */
1558:../uvc.c      **** 		if ((wIndex & 0x00FF) == CY_FX_UVC_STREAM_INTERFACE)
1559:../uvc.c      **** 		{
1560:../uvc.c      **** #if 0
1561:../uvc.c      **** 			{//if VS, set VS event flag
1562:../uvc.c      **** 				uvcHandleReq = CyTrue;
1563:../uvc.c      **** 				status = CyU3PEventSet(&glFxUVCEvent, CY_FX_UVC_VIDEO_CONTROL_REQUEST_EVENT,
1564:../uvc.c      **** 					CYU3P_EVENT_OR);
1565:../uvc.c      **** 				if (status != CY_U3P_SUCCESS)
1566:../uvc.c      **** 				{
1567:../uvc.c      **** 					CyU3PDebugPrint(4, "Set CY_FX_UVC_VIDEO_CONTROL_REQUEST_EVENT Failed %x\n", status);
1568:../uvc.c      **** 					CyU3PUsbStall(0, CyTrue, CyFalse);
1569:../uvc.c      **** 				}
1570:../uvc.c      **** 			}
1571:../uvc.c      **** #else
1572:../uvc.c      **** 	        {
1573:../uvc.c      **** 	            /* GET_CUR Request Handling Probe/Commit Controls*/
1574:../uvc.c      **** 	            if ((bRequest == CY_FX_USB_UVC_GET_CUR_REQ)||(bRequest == CY_FX_USB_UVC_GET_MIN_REQ) |
1575:../uvc.c      **** 	            {
1576:../uvc.c      **** 	                isHandled = CyTrue;
1577:../uvc.c      **** 	                if((wValue == CY_FX_UVC_PROBE_CTRL) || (wValue == CY_FX_UVC_COMMIT_CTRL))
1578:../uvc.c      **** 	                {
1579:../uvc.c      **** 	                	//TODO Modify this "glProbeCtrl" according to the Supported Preview Resolutions t
1580:../uvc.c      **** 
1581:../uvc.c      **** 						/* Host requests for probe data of 34 bytes (UVC 1.1) or 26 Bytes (UVC1.0). Send it over EP0.
1582:../uvc.c      **** 						if (CyU3PUsbGetSpeed () == CY_U3P_SUPER_SPEED)
1583:../uvc.c      **** 						{
1584:../uvc.c      **** 							if(glCurrentFrameIndex == 4)
1585:../uvc.c      **** 							{
1586:../uvc.c      **** 								CyU3PMemCopy(glProbeCtrl, (uint8_t *)gl5MpProbeCtrl, CY_FX_UVC_MAX_PROBE_SETTING);
1587:../uvc.c      **** 							}
1588:../uvc.c      **** 							/* Probe Control for 1280x720 stream*/
1589:../uvc.c      **** 							else if(glCurrentFrameIndex == 3)
1590:../uvc.c      **** 							{
1591:../uvc.c      **** 								CyU3PMemCopy(glProbeCtrl, (uint8_t *)gl720pProbeCtrl, CY_FX_UVC_MAX_PROBE_SETTING);
1592:../uvc.c      **** 							}
1593:../uvc.c      **** 							/* Probe Control for 640x480 stream*/
1594:../uvc.c      **** 							else  if(glCurrentFrameIndex == 2)
1595:../uvc.c      **** 							{
1596:../uvc.c      **** 								CyU3PMemCopy(glProbeCtrl, (uint8_t *)glVga60ProbeCtrl, CY_FX_UVC_MAX_PROBE_SETTING);
1597:../uvc.c      **** 							}
1598:../uvc.c      **** 							/* Probe Control for 1920x1080 stream*/
1599:../uvc.c      **** 							else  if(glCurrentFrameIndex == 1)
1600:../uvc.c      **** 							{
1601:../uvc.c      **** 								CyU3PMemCopy(glProbeCtrl, (uint8_t *)gl1080pProbeCtrl, CY_FX_UVC_MAX_PROBE_SETTING);
1602:../uvc.c      **** 							}
1603:../uvc.c      **** 
1604:../uvc.c      **** 						}
1605:../uvc.c      **** 						else if (CyU3PUsbGetSpeed () == CY_U3P_HIGH_SPEED)
1606:../uvc.c      **** 						{
1607:../uvc.c      **** 							/* Probe Control for 640x480 stream*/
1608:../uvc.c      **** 							CyU3PMemCopy(glProbeCtrl, (uint8_t *)glVga30ProbeCtrl, CY_FX_UVC_MAX_PROBE_SETTING);
1609:../uvc.c      **** 						}
1610:../uvc.c      **** 						else /* FULL-Speed*/
1611:../uvc.c      **** 						{
1612:../uvc.c      **** 							CyU3PDebugPrint (4, "\n\rFull Speed Not Supported!");
1613:../uvc.c      **** 						}
1614:../uvc.c      **** 
1615:../uvc.c      **** 						status = CyU3PUsbSendEP0Data(CY_FX_UVC_MAX_PROBE_SETTING, glProbeCtrl);
1616:../uvc.c      **** 						if (status != CY_U3P_SUCCESS)
1617:../uvc.c      **** 						{
1618:../uvc.c      **** 							CyU3PDebugPrint (4, "\n\rUSBStpCB:GET_CUR:SendEP0Data Err = 0x%x", status);
1619:../uvc.c      **** 						}
1620:../uvc.c      **** 	                }
1621:../uvc.c      **** 	                else if((wValue == VD_FX_UVC_STILL_PROB_CTRL) || (wValue == VD_FX_UVC_STILL_COMIT_
1622:../uvc.c      **** 	                {
1623:../uvc.c      **** 	                	if (CyU3PUsbGetSpeed () == CY_U3P_SUPER_SPEED)
1624:../uvc.c      **** 	                	{
1625:../uvc.c      **** 							status = CyU3PUsbSendEP0Data(CY_FX_UVC_MAX_STILL_PROBE_SETTING, glStillProbeCtrl);
1626:../uvc.c      **** 							if (status != CY_U3P_SUCCESS)
1627:../uvc.c      **** 							{
1628:../uvc.c      **** 								CyU3PDebugPrint (4, "\n\rUSBStpCB:GET_CUR:SendEP0Data Err = 0x%x", status);
1629:../uvc.c      **** 							}
1630:../uvc.c      **** 	                	}
1631:../uvc.c      **** 	                }
1632:../uvc.c      **** 	            }
1633:../uvc.c      **** 	            /* SET_CUR request handling Probe/Commit controls */
1634:../uvc.c      **** 	            else if (bRequest == CY_FX_USB_UVC_SET_CUR_REQ)
1635:../uvc.c      **** 	            {
1636:../uvc.c      **** 	                isHandled = CyTrue;
1637:../uvc.c      **** 	                if((wValue == CY_FX_UVC_PROBE_CTRL) || (wValue == CY_FX_UVC_COMMIT_CTRL))
1638:../uvc.c      **** 	                {
1639:../uvc.c      **** 						/* Get the UVC probe/commit control data from EP0 */
1640:../uvc.c      **** 						status = CyU3PUsbGetEP0Data(CY_FX_UVC_MAX_PROBE_SETTING_ALIGNED,
1641:../uvc.c      **** 								glCommitCtrl, &readCount);
1642:../uvc.c      **** 						if (status != CY_U3P_SUCCESS)
1643:../uvc.c      **** 						{
1644:../uvc.c      **** 							CyU3PDebugPrint (4, "\n\rUSBStpCB:SET_CUR:GetEP0Data Err = 0x%x.", status);
1645:../uvc.c      **** 						}
1646:../uvc.c      **** 						/* Check the read count. Expecting a count of CX3_UVC_MAX_PROBE_SETTING bytes. */
1647:../uvc.c      **** 						if (readCount > (uint16_t)CY_FX_UVC_MAX_PROBE_SETTING)
1648:../uvc.c      **** 						{
1649:../uvc.c      **** 							CyU3PDebugPrint (4, "\n\rUSBStpCB:Invalid SET_CUR Rqt Len.");
1650:../uvc.c      **** 						}
1651:../uvc.c      **** 						else
1652:../uvc.c      **** 						{
1653:../uvc.c      **** 							/* Set Probe Control */
1654:../uvc.c      **** 							if(wValue == CY_FX_UVC_PROBE_CTRL)
1655:../uvc.c      **** 							{
1656:../uvc.c      **** 								glCurrentFrameIndex = glCommitCtrl[3];
1657:../uvc.c      **** 							}
1658:../uvc.c      **** 							/* Set Commit Control and Start Streaming*/
1659:../uvc.c      **** 							else if(wValue == CY_FX_UVC_COMMIT_CTRL)
1660:../uvc.c      **** 							{
1661:../uvc.c      **** 
1662:../uvc.c      **** 								if((glcommitcount==0)||(glcheckframe!=glCommitCtrl[3]))
1663:../uvc.c      **** 								{
1664:../uvc.c      **** 									glcommitcount++;
1665:../uvc.c      **** 									glcheckframe=glCommitCtrl[3];
1666:../uvc.c      **** 								glCurrentFrameIndex = glCommitCtrl[3];
1667:../uvc.c      **** 								glFrameIndexToSet = glCurrentFrameIndex;
1668:../uvc.c      **** 								glPreviewStarted = CyTrue;
1669:../uvc.c      **** 
1670:../uvc.c      **** 								//TODO Change this function with "Sensor Specific" function to write the sensor settings & 
1671:../uvc.c      **** 							//	esSetCameraResolution(glCurrentFrameIndex);
1672:../uvc.c      **** 								//esSetCameraResolution(glCommitCtrl[3]);//TODO the camera resolution calling
1673:../uvc.c      **** 
1674:../uvc.c      **** 								if (glIsApplnActive)
1675:../uvc.c      **** 								{
1676:../uvc.c      **** 									if(glcommitcount)
1677:../uvc.c      **** 										glIsClearFeature = CyFalse;
1678:../uvc.c      **** 									else
1679:../uvc.c      **** 										glIsClearFeature = CyTrue;
1680:../uvc.c      **** 
1681:../uvc.c      **** 									esUVCUvcApplnStop();
1682:../uvc.c      **** 								}
1683:../uvc.c      **** 								esUVCUvcApplnStart();
1684:../uvc.c      **** 								}
1685:../uvc.c      **** 							}
1686:../uvc.c      **** 						}
1687:../uvc.c      **** 	                }
1688:../uvc.c      **** 	                else if((wValue == VD_FX_UVC_STILL_PROB_CTRL) || (wValue == VD_FX_UVC_STILL_COMIT_
1689:../uvc.c      **** 	                {
1690:../uvc.c      **** 	                	/* Get the UVC STILL probe/commit control data from EP0 */
1691:../uvc.c      **** 						status = CyU3PUsbGetEP0Data(CY_FX_STILL_TRIGGER_ALIGNED,glStillCommitCtrl, &readCount);
1692:../uvc.c      **** 						if (status != CY_U3P_SUCCESS)
1693:../uvc.c      **** 						{
1694:../uvc.c      **** 							CyU3PDebugPrint (4, "\n\rUSBStpCB:SET_CUR:GetEP0Data Err = 0x%x.", status);
1695:../uvc.c      **** 						}
1696:../uvc.c      **** 						/* Check the read count. Expecting a count of CX3_UVC_MAX_PROBE_SETTING bytes. */
1697:../uvc.c      **** 						if (readCount > (uint16_t)CY_FX_UVC_MAX_STILL_PROBE_SETTING)
1698:../uvc.c      **** 						{
1699:../uvc.c      **** 							CyU3PDebugPrint (4, "\n\rUSBStpCB:Invalid SET_CUR Rqt Len.");
1700:../uvc.c      **** 						}
1701:../uvc.c      **** 						else
1702:../uvc.c      **** 						{
1703:../uvc.c      **** 							/* Set Probe Control */
1704:../uvc.c      **** 							if(wValue == VD_FX_UVC_STILL_PROB_CTRL)
1705:../uvc.c      **** 							{
1706:../uvc.c      **** 								glCurrentStillFrameIndex = glStillCommitCtrl[1];
1707:../uvc.c      **** 							}
1708:../uvc.c      **** 							/* Set Commit Control and Start Streaming*/
1709:../uvc.c      **** 							else if(wValue == VD_FX_UVC_STILL_COMIT_CTRL)
1710:../uvc.c      **** 							{
1711:../uvc.c      **** 								glCurrentStillFrameIndex = glStillCommitCtrl[1];
1712:../uvc.c      **** 							}
1713:../uvc.c      **** 						}
1714:../uvc.c      **** 
1715:../uvc.c      **** 	                }
1716:../uvc.c      **** 	                else if(wValue == VD_FX_UVC_STILL_TRIG_CTRL)
1717:../uvc.c      **** 	                {
1718:../uvc.c      **** 						status = CyU3PUsbGetEP0Data(CY_FX_STILL_TRIGGER_ALIGNED,&glStillTriggerCtrl, &readCount);
1719:../uvc.c      **** 						if (status != CY_U3P_SUCCESS)
1720:../uvc.c      **** 						{
1721:../uvc.c      **** 							CyU3PDebugPrint (4, "\n\rUSBStpCB:SET_CUR:GetEP0Data Err = 0x%x.", status);
1722:../uvc.c      **** 						}
1723:../uvc.c      **** 						/* Check the read count. Expecting a count of CX3_UVC_MAX_PROBE_SETTING bytes. */
1724:../uvc.c      **** 						if (readCount > (uint16_t)CY_FX_STILL_TRIGGER_COUNT)
1725:../uvc.c      **** 						{
1726:../uvc.c      **** 							CyU3PDebugPrint (4, "\n\rUSBStpCB:Invalid SET_CUR Rqt Len.");
1727:../uvc.c      **** 						}
1728:../uvc.c      **** 						else
1729:../uvc.c      **** 						{
1730:../uvc.c      **** 							if(glStillTriggerCtrl == 0x01)
1731:../uvc.c      **** 							{
1732:../uvc.c      **** 								glStillSkip = 3;
1733:../uvc.c      **** 								glStillCaptureStart = CyTrue;
1734:../uvc.c      **** 							}
1735:../uvc.c      **** 						}
1736:../uvc.c      **** 	                }
1737:../uvc.c      **** 	            }
1738:../uvc.c      **** 	            else
1739:../uvc.c      **** 	            {
1740:../uvc.c      **** 	                /* Mark with error. */
1741:../uvc.c      **** 	                status = CY_U3P_ERROR_FAILURE;
1742:../uvc.c      **** 	            }
1743:../uvc.c      **** 	        }
1744:../uvc.c      **** #endif
1745:../uvc.c      **** 		}
1746:../uvc.c      **** 		else if ((wIndex & 0x00FF) == CY_FX_UVC_CONTROL_INTERFACE) /* Video Control Interface */
1747:../uvc.c      **** 		{
1748:../uvc.c      **** #if 0
1749:../uvc.c      **** 			{
1750:../uvc.c      **** 				uvcHandleReq = CyTrue;
1751:../uvc.c      **** 				status = CyU3PEventSet(&glFxUVCEvent, CY_FX_UVC_VIDEO_STREAM_REQUEST_EVENT,
1752:../uvc.c      **** 					CYU3P_EVENT_OR);
1753:../uvc.c      **** 				if (status != CY_U3P_SUCCESS)
1754:../uvc.c      **** 				{
1755:../uvc.c      **** 					/* Error handling */
1756:../uvc.c      **** 					CyU3PDebugPrint(4, "Set CY_FX_UVC_VIDEO_STREAM_REQUEST_EVENT Failed %x\n", status);
1757:../uvc.c      **** 					CyU3PUsbStall(0, CyTrue, CyFalse);
1758:../uvc.c      **** 				}
1759:../uvc.c      **** 			}
1760:../uvc.c      **** #endif
1761:../uvc.c      **** 		}
1762:../uvc.c      ****     }
1763:../uvc.c      ****     return isHandled;
1764:../uvc.c      **** }
1765:../uvc.c      **** 
1766:../uvc.c      **** 
1767:../uvc.c      **** /* This function initializes the USB Module, creates event group,
1768:../uvc.c      ****    sets the enumeration descriptors, configures the Endpoints and
1769:../uvc.c      ****    configures the DMA module for the UVC Application */
1770:../uvc.c      ****     void
1771:../uvc.c      **** esUVCUvcApplnInit (void)
1772:../uvc.c      **** {
1773:../uvc.c      ****     CyU3PEpConfig_t endPointConfig;
1774:../uvc.c      ****     CyU3PDmaMultiChannelConfig_t dmaCfg;
1775:../uvc.c      ****     CyU3PReturnStatus_t status = CY_U3P_SUCCESS;
1776:../uvc.c      **** 	//TODP I2C & GPIO & PIB for FX3
1777:../uvc.c      ****     /* Initialize the I2C interface for Mipi Block Usage and Camera. */
1778:../uvc.c      ****     //status = CyU3PMipicsiInitializeI2c (CY_U3P_MIPICSI_I2C_400KHZ);
1779:../uvc.c      ****     if( status != CY_U3P_SUCCESS)
1780:../uvc.c      ****     {
1781:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:I2CInit Err = 0x%x.",status);
1782:../uvc.c      ****         CyFxAppErrorHandler(status);
1783:../uvc.c      ****     }
1784:../uvc.c      **** 
1785:../uvc.c      ****     /* Initialize GPIO module. */
1786:../uvc.c      ****     //status = CyU3PMipicsiInitializeGPIO ();
1787:../uvc.c      ****     if( status != CY_U3P_SUCCESS)
1788:../uvc.c      ****     {
1789:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:GPIOInit Err = 0x%x",status);
1790:../uvc.c      ****         CyFxAppErrorHandler(status);
1791:../uvc.c      ****     }
1792:../uvc.c      **** 
1793:../uvc.c      ****     /* Initialize the PIB block */
1794:../uvc.c      ****     //status = CyU3PMipicsiInitializePIB ();
1795:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1796:../uvc.c      ****     {
1797:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:PIBInit Err = 0x%x",status);
1798:../uvc.c      ****         CyFxAppErrorHandler(status);
1799:../uvc.c      ****     }
1800:../uvc.c      **** 
1801:../uvc.c      ****     /* Start the USB functionality */
1802:../uvc.c      ****     status = CyU3PUsbStart();
1803:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1804:../uvc.c      ****     {
1805:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:UsbStart Err = 0x%x",status);
1806:../uvc.c      ****         CyFxAppErrorHandler(status);
1807:../uvc.c      ****     }
1808:../uvc.c      ****     /* The fast enumeration is the easiest way to setup a USB connection,
1809:../uvc.c      ****      * where all enumeration phase is handled by the library. Only the
1810:../uvc.c      ****      * class / vendor requests need to be handled by the application. */
1811:../uvc.c      ****     CyU3PUsbRegisterSetupCallback(esUVCUvcApplnUSBSetupCB, CyTrue);
1812:../uvc.c      **** 
1813:../uvc.c      ****     /* Setup the callback to handle the USB events */
1814:../uvc.c      ****     CyU3PUsbRegisterEventCallback(esUVCUvcApplnUSBEventCB);
1815:../uvc.c      **** 
1816:../uvc.c      ****     /* Register a callback to handle LPM requests from the USB 3.0 host. */
1817:../uvc.c      ****     CyU3PUsbRegisterLPMRequestCallback (esUVCApplnLPMRqtCB);
1818:../uvc.c      **** 
1819:../uvc.c      ****     /* Set the USB Enumeration descriptors */
1820:../uvc.c      **** 
1821:../uvc.c      ****     /* Super speed device descriptor. */
1822:../uvc.c      ****     status = CyU3PUsbSetDesc(CY_U3P_USB_SET_SS_DEVICE_DESCR, 0, (uint8_t *)CyFxUSBDeviceDscrSS);
1823:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1824:../uvc.c      ****     {
1825:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:Set_SS_Device_Dscr Err = 0x%x", status);
1826:../uvc.c      ****         CyFxAppErrorHandler(status);
1827:../uvc.c      ****     }
1828:../uvc.c      **** 
1829:../uvc.c      ****     /* High speed device descriptor. */
1830:../uvc.c      ****     status = CyU3PUsbSetDesc(CY_U3P_USB_SET_HS_DEVICE_DESCR, 0, (uint8_t *)CyFxUSBDeviceDscr);
1831:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1832:../uvc.c      ****     {
1833:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:Set_HS_Device_Dscr Err = 0x%x", status);
1834:../uvc.c      ****         CyFxAppErrorHandler(status);
1835:../uvc.c      ****     }
1836:../uvc.c      **** 
1837:../uvc.c      ****     /* BOS descriptor */
1838:../uvc.c      ****     status = CyU3PUsbSetDesc(CY_U3P_USB_SET_SS_BOS_DESCR, 0, (uint8_t *)CyFxUSBBOSDscr);
1839:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1840:../uvc.c      ****     {
1841:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:Set_BOS_Dscr Err = 0x%x", status);
1842:../uvc.c      ****         CyFxAppErrorHandler(status);
1843:../uvc.c      ****     }
1844:../uvc.c      **** 
1845:../uvc.c      ****     /* Device qualifier descriptor */
1846:../uvc.c      ****     status = CyU3PUsbSetDesc(CY_U3P_USB_SET_DEVQUAL_DESCR, 0, (uint8_t *)CyFxUSBDeviceQualDscr);
1847:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1848:../uvc.c      ****     {
1849:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:Set_DEVQUAL_Dscr Err = 0x%x", status);
1850:../uvc.c      ****         CyFxAppErrorHandler(status);
1851:../uvc.c      ****     }
1852:../uvc.c      **** 
1853:../uvc.c      ****     /* Super speed configuration descriptor */
1854:../uvc.c      ****     status = CyU3PUsbSetDesc(CY_U3P_USB_SET_SS_CONFIG_DESCR, 0, (uint8_t *)CyFxUSBSSConfigDscr);
1855:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1856:../uvc.c      ****     {
1857:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:Set_SS_CFG_Dscr Err = 0x%x", status);
1858:../uvc.c      ****         CyFxAppErrorHandler(status);
1859:../uvc.c      ****     }
1860:../uvc.c      **** 
1861:../uvc.c      ****     /* High speed configuration descriptor */
1862:../uvc.c      ****     status = CyU3PUsbSetDesc(CY_U3P_USB_SET_HS_CONFIG_DESCR, 0, (uint8_t *)CyFxUSBHSConfigDscr);
1863:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1864:../uvc.c      ****     {
1865:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:Set_HS_CFG_Dscr Err = 0x%x", status);
1866:../uvc.c      ****         CyFxAppErrorHandler(status);
1867:../uvc.c      ****     }
1868:../uvc.c      **** 
1869:../uvc.c      ****     /* Full speed configuration descriptor */
1870:../uvc.c      ****     status = CyU3PUsbSetDesc(CY_U3P_USB_SET_FS_CONFIG_DESCR, 0, (uint8_t *)CyFxUSBFSConfigDscr);
1871:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1872:../uvc.c      ****     {
1873:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:Set_FS_CFG_Dscr Err = 0x%x", status);
1874:../uvc.c      ****         CyFxAppErrorHandler(status);
1875:../uvc.c      ****     }
1876:../uvc.c      **** 
1877:../uvc.c      ****     /* String descriptor 0 */
1878:../uvc.c      ****     status = CyU3PUsbSetDesc(CY_U3P_USB_SET_STRING_DESCR, 0, (uint8_t *)CyFxUSBStringLangIDDscr);
1879:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1880:../uvc.c      ****     {
1881:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:Set_STRNG_Dscr0 Err = 0x%x", status);
1882:../uvc.c      ****         CyFxAppErrorHandler(status);
1883:../uvc.c      ****     }
1884:../uvc.c      **** 
1885:../uvc.c      ****     /* String descriptor 1 */
1886:../uvc.c      ****     status = CyU3PUsbSetDesc(CY_U3P_USB_SET_STRING_DESCR, 1, (uint8_t *)CyFxUSBManufactureDscr);
1887:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1888:../uvc.c      ****     {
1889:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:Set_STRNG_Dscr1 Err = 0x%x", status);
1890:../uvc.c      ****         CyFxAppErrorHandler(status);
1891:../uvc.c      ****     }
1892:../uvc.c      **** 
1893:../uvc.c      ****     /* String descriptor 2 */
1894:../uvc.c      ****     status = CyU3PUsbSetDesc(CY_U3P_USB_SET_STRING_DESCR, 2, (uint8_t *)CyFxUSBProductDscr);
1895:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1896:../uvc.c      ****     {
1897:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:Set_STRNG_Dscr2 Err = 0x%x", status);
1898:../uvc.c      ****         CyFxAppErrorHandler(status);
1899:../uvc.c      ****     }
1900:../uvc.c      ****     /* String descriptor 3 */
1901:../uvc.c      ****     /*
1902:../uvc.c      ****     status = CyU3PUsbSetDesc(CY_U3P_USB_SET_STRING_DESCR, 3, (uint8_t *)esUVCUSBConfigSSDscr);
1903:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1904:../uvc.c      ****     {
1905:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:Set_STRNG_Dscr3 Err = 0x%x", status);
1906:../uvc.c      ****         CyFxAppErrorHandler(status);
1907:../uvc.c      ****     }
1908:../uvc.c      **** 	*/
1909:../uvc.c      ****     /* String descriptor 4 */
1910:../uvc.c      ****     /*
1911:../uvc.c      ****     status = CyU3PUsbSetDesc(CY_U3P_USB_SET_STRING_DESCR, 4, (uint8_t *)esUVCUSBConfigHSDscr);
1912:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1913:../uvc.c      ****     {
1914:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:Set_STRNG_Dscr4 Err = 0x%x", status);
1915:../uvc.c      ****         CyFxAppErrorHandlerr(status);
1916:../uvc.c      ****     }
1917:../uvc.c      ****     */
1918:../uvc.c      ****     /* String descriptor 2 */
1919:../uvc.c      ****     /*
1920:../uvc.c      ****     status = CyU3PUsbSetDesc(CY_U3P_USB_SET_STRING_DESCR, 5, (uint8_t *)esUVCUSBConfigFSDscr);
1921:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1922:../uvc.c      ****     {
1923:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:Set_STRNG_Dscr5 Err = 0x%x", status);
1924:../uvc.c      ****         CyFxAppErrorHandler(status);
1925:../uvc.c      ****     }
1926:../uvc.c      **** 	*/
1927:../uvc.c      ****     //TODO Change this function with the "Sensor specific" function to Write the Base I2C settings 
1928:../uvc.c      ****     /* Setup Image Sensor */
1929:../uvc.c      **** 	//esOV5640_Base_Config();
1930:../uvc.c      **** 	 //TODO Change this function with the "Sensor specific" function to Write the Base I2C settings fo
1931:../uvc.c      **** 	//esOV5640_Auto_Focus_Config();
1932:../uvc.c      **** 	//TODO Change this function with "Sensor Specific" PowerDown function to PowerDown the sensor
1933:../uvc.c      **** 	//esCamera_Power_Down();
1934:../uvc.c      **** 
1935:../uvc.c      ****     /* Connect the USB pins and enable super speed operation */
1936:../uvc.c      ****     status = CyU3PConnectState(CyTrue, CyTrue);
1937:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1938:../uvc.c      ****     {
1939:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:ConnectState Err = 0x%x", status);
1940:../uvc.c      ****         CyFxAppErrorHandler(status);
1941:../uvc.c      ****     }
1942:../uvc.c      **** 
1943:../uvc.c      ****     /* Since the status interrupt endpoint is not used in this application,
1944:../uvc.c      ****      * just enable the EP in the beginning. */
1945:../uvc.c      ****     /* Control status interrupt endpoint configuration */
1946:../uvc.c      ****     endPointConfig.enable = 1;
1947:../uvc.c      ****     endPointConfig.epType = CY_U3P_USB_EP_INTR;
1948:../uvc.c      ****     endPointConfig.pcktSize = 64;
1949:../uvc.c      ****     endPointConfig.isoPkts  = 1;
1950:../uvc.c      ****     endPointConfig.burstLen = 1;
1951:../uvc.c      **** 
1952:../uvc.c      ****     status = CyU3PSetEpConfig(CY_FX_EP_CONTROL_STATUS, &endPointConfig);
1953:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1954:../uvc.c      ****     {
1955:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:CyU3PSetEpConfig CtrlEp Err = 0x%x", status);
1956:../uvc.c      ****         CyFxAppErrorHandler(status);
1957:../uvc.c      ****     }
1958:../uvc.c      **** 
1959:../uvc.c      ****     CyU3PUsbFlushEp(CY_FX_EP_CONTROL_STATUS);
1960:../uvc.c      **** 
1961:../uvc.c      ****     /* Setup the Bulk endpoint used for Video Streaming */
1962:../uvc.c      ****     endPointConfig.enable = CyTrue;
1963:../uvc.c      ****     endPointConfig.epType = CY_U3P_USB_EP_BULK;
1964:../uvc.c      **** 
1965:../uvc.c      ****     endPointConfig.isoPkts  = 0;
1966:../uvc.c      ****     endPointConfig.streams = 0;
1967:../uvc.c      **** 
1968:../uvc.c      ****     CyU3PThreadSleep(1000);
1969:../uvc.c      **** 
1970:../uvc.c      ****     switch(CyU3PUsbGetSpeed())
1971:../uvc.c      ****     {
1972:../uvc.c      ****         case CY_U3P_HIGH_SPEED:
1973:../uvc.c      ****             endPointConfig.pcktSize = 0x200;
1974:../uvc.c      ****             endPointConfig.burstLen = 1;
1975:../uvc.c      ****             ES_UVC_STREAM_BUF_SIZE 	= CY_FX_UVC_STREAM_BUF_SIZE;
1976:../uvc.c      ****             ES_UVC_DATA_BUF_SIZE 	= CY_FX_UVC_BUF_FULL_SIZE;
1977:../uvc.c      ****             ES_UVC_STREAM_BUF_COUNT	= CY_FX_UVC_STREAM_BUF_COUNT;
1978:../uvc.c      ****             break;
1979:../uvc.c      **** 
1980:../uvc.c      ****         case CY_U3P_FULL_SPEED:
1981:../uvc.c      ****             endPointConfig.pcktSize = 0x40;
1982:../uvc.c      ****             endPointConfig.burstLen = 1;
1983:../uvc.c      ****             break;
1984:../uvc.c      **** 
1985:../uvc.c      ****         case CY_U3P_SUPER_SPEED:
1986:../uvc.c      ****         default:
1987:../uvc.c      ****             endPointConfig.pcktSize = CY_FX_EP_BULK_VIDEO_PKT_SIZE;
1988:../uvc.c      ****             endPointConfig.burstLen = 16;
1989:../uvc.c      ****             ES_UVC_STREAM_BUF_SIZE 	= CY_FX_UVC_STREAM_BUF_SIZE;
1990:../uvc.c      ****             ES_UVC_DATA_BUF_SIZE 	= CY_FX_UVC_BUF_FULL_SIZE;
1991:../uvc.c      ****             ES_UVC_STREAM_BUF_COUNT	= CY_FX_UVC_STREAM_BUF_COUNT;
1992:../uvc.c      ****             break;
1993:../uvc.c      ****     }
1994:../uvc.c      **** 
1995:../uvc.c      ****     status = CyU3PSetEpConfig(CY_FX_EP_BULK_VIDEO, &endPointConfig);
1996:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
1997:../uvc.c      ****     {
1998:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:CyU3PSetEpConfig BulkEp Err = 0x%x", status);
1999:../uvc.c      ****         CyFxAppErrorHandler(status);
2000:../uvc.c      ****     }
2001:../uvc.c      **** 
2002:../uvc.c      ****     CyU3PUsbEPSetBurstMode (CY_FX_EP_BULK_VIDEO, CyTrue);
2003:../uvc.c      **** 
2004:../uvc.c      ****     /* Flush the endpoint memory */
2005:../uvc.c      ****     CyU3PUsbFlushEp(CY_FX_EP_BULK_VIDEO);
2006:../uvc.c      **** 
2007:../uvc.c      ****     /* Create a DMA Manual OUT channel for streaming data */
2008:../uvc.c      ****     /* Video streaming Channel is not active till a stream request is received */
2009:../uvc.c      ****     dmaCfg.size                 = ES_UVC_STREAM_BUF_SIZE;
2010:../uvc.c      ****     dmaCfg.count                = ES_UVC_STREAM_BUF_COUNT;
2011:../uvc.c      ****     dmaCfg.validSckCount        = 2;
2012:../uvc.c      **** 
2013:../uvc.c      ****     dmaCfg.prodSckId[0]         = (CyU3PDmaSocketId_t)CY_U3P_PIB_SOCKET_0;//ES_UVC_PRODUCER_PPORT_S
2014:../uvc.c      ****     dmaCfg.prodSckId[1]         = (CyU3PDmaSocketId_t)CY_U3P_PIB_SOCKET_1;//ES_UVC_PRODUCER_PPORT_S
2015:../uvc.c      **** 
2016:../uvc.c      ****     dmaCfg.consSckId[0]         = (CyU3PDmaSocketId_t)(CY_U3P_UIB_SOCKET_CONS_0 | CY_FX_EP_VIDEO_CO
2017:../uvc.c      ****     dmaCfg.dmaMode              = CY_U3P_DMA_MODE_BYTE;
2018:../uvc.c      ****     dmaCfg.notification         = CY_U3P_DMA_CB_PROD_EVENT | CY_U3P_DMA_CB_CONS_EVENT;
2019:../uvc.c      ****     dmaCfg.cb                   = esUVCUvcAppDmaCallback;
2020:../uvc.c      ****     dmaCfg.prodHeader           = CY_FX_UVC_PROD_HEADER;
2021:../uvc.c      ****     dmaCfg.prodFooter           = CY_FX_UVC_PROD_FOOTER;
2022:../uvc.c      ****     dmaCfg.consHeader           = 0;
2023:../uvc.c      ****     dmaCfg.prodAvailCount       = 0;
2024:../uvc.c      **** 
2025:../uvc.c      ****     status = CyU3PDmaMultiChannelCreate (&glChHandleUVCStream, CY_U3P_DMA_TYPE_MANUAL_MANY_TO_ONE ,
2026:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
2027:../uvc.c      ****     {
2028:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:DmaMultiChannelCreate Err = 0x%x", status);
2029:../uvc.c      ****     }
2030:../uvc.c      ****     CyU3PThreadSleep(100);
2031:../uvc.c      **** 
2032:../uvc.c      ****     /* Reset the channel: Set to DSCR chain starting point in PORD/CONS SCKT; set
2033:../uvc.c      ****        DSCR_SIZE field in DSCR memory */
2034:../uvc.c      ****     status = CyU3PDmaMultiChannelReset(&glChHandleUVCStream);
2035:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
2036:../uvc.c      ****     {
2037:../uvc.c      ****         CyU3PDebugPrint (4,"\n\rAppInit:MultiChannelReset Err = 0x%x", status);
2038:../uvc.c      ****     }
2039:../uvc.c      **** 
2040:../uvc.c      ****     /* TODO same configuration for GPIF and DMA for FX3 */
2041:../uvc.c      **** 	/* Configure the Fixed Function GPIF on the CX3 to use a 16 bit bus, and
2042:../uvc.c      ****      * a DMA Buffer of size CX3_UVC_DATA_BUF_SIZE
2043:../uvc.c      ****      */
2044:../uvc.c      ****     //status = CyU3PMipicsiGpifLoad(CY_U3P_MIPICSI_BUS_16, ES_UVC_DATA_BUF_SIZE);
2045:../uvc.c      ****     CyU3PGpifLoad ((CyU3PGpifConfig_t *) &CyFxGpifConfig);
2046:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
2047:../uvc.c      ****     {
2048:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:MipicsiGpifLoad Err = 0x%x", status);
2049:../uvc.c      ****         CyFxAppErrorHandler(status);
2050:../uvc.c      ****     }
2051:../uvc.c      ****     CyU3PThreadSleep(50);
2052:../uvc.c      **** 
2053:../uvc.c      ****     CyU3PGpifRegisterCallback(esUVCGpifCB); //need to check
2054:../uvc.c      ****     CyU3PThreadSleep(50);
2055:../uvc.c      **** 
2056:../uvc.c      ****     /* Start the state machine. */
2057:../uvc.c      ****     status = CyU3PGpifSMStart (START, ALPHA_START);
2058:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
2059:../uvc.c      ****     {
2060:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:GpifSMStart Err = 0x%x", status);
2061:../uvc.c      ****         CyFxAppErrorHandler(status);
2062:../uvc.c      ****     }
2063:../uvc.c      ****     CyU3PThreadSleep(50);
2064:../uvc.c      **** 
2065:../uvc.c      ****     /* Pause the GPIF*/
2066:../uvc.c      ****     CyU3PGpifSMControl(CyTrue);
2067:../uvc.c      **** #if 0
2068:../uvc.c      ****     /* Initialize the MIPI block */
2069:../uvc.c      ****     status =  CyU3PMipicsiInit();
2070:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
2071:../uvc.c      ****     {
2072:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:MipicsiInit Err = 0x%x", status);
2073:../uvc.c      ****         CyFxAppErrorHandler(status);
2074:../uvc.c      ****     }
2075:../uvc.c      **** 
2076:../uvc.c      ****     status = CyU3PMipicsiSetIntfParams(&cfgUvcVgaNoMclk, CyFalse);
2077:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
2078:../uvc.c      ****     {
2079:../uvc.c      ****         CyU3PDebugPrint (4, "\n\rAppInit:MipicsiSetIntfParams Err = 0x%x",status);
2080:../uvc.c      ****         CyFxAppErrorHandler(status);
2081:../uvc.c      ****     }
2082:../uvc.c      **** #endif
2083:../uvc.c      **** #ifdef RESET_TIMER_ENABLE
2084:../uvc.c      ****     CyU3PTimerCreate (&UvcTimer, UvcAppProgressTimer, 0x00, TIMER_PERIOD, 0, CYU3P_NO_ACTIVATE);
2085:../uvc.c      **** #endif
2086:../uvc.c      **** 
2087:../uvc.c      ****     CyU3PDebugPrint (4, "\n\rFirmware Version: %d.%d.%d.%d",MajorVersion,MinorVersion,SubVersion,Su
2088:../uvc.c      **** }
2089:../uvc.c      **** 
2090:../uvc.c      **** /* This function initializes the debug module for the UVC application */
2091:../uvc.c      ****     void
2092:../uvc.c      **** esUVCUvcApplnDebugInit (void)
2093:../uvc.c      **** {
2094:../uvc.c      ****     CyU3PUartConfig_t uartConfig;
2095:../uvc.c      ****     CyU3PReturnStatus_t status = CY_U3P_SUCCESS;
2096:../uvc.c      **** 
2097:../uvc.c      ****     /* Initialize the UART for printing debug messages */
2098:../uvc.c      ****     status = CyU3PUartInit();
2099:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
2100:../uvc.c      ****     {
2101:../uvc.c      ****         CyU3PDebugPrint (4, "\n\resUVCUvcApplnDebugInit:CyU3PUartInit failed Error = 0x%x",status);
2102:../uvc.c      ****     }
2103:../uvc.c      **** 
2104:../uvc.c      ****     /* Set UART Configuration */
2105:../uvc.c      ****     uartConfig.baudRate = CY_U3P_UART_BAUDRATE_115200;
2106:../uvc.c      ****     uartConfig.stopBit = CY_U3P_UART_ONE_STOP_BIT;
2107:../uvc.c      ****     uartConfig.parity = CY_U3P_UART_NO_PARITY;
2108:../uvc.c      ****     uartConfig.txEnable = CyTrue;
2109:../uvc.c      ****     uartConfig.rxEnable = CyFalse;
2110:../uvc.c      ****     uartConfig.flowCtrl = CyFalse;
2111:../uvc.c      ****     uartConfig.isDma = CyTrue;
2112:../uvc.c      **** 
2113:../uvc.c      ****     /* Set the UART configuration */
2114:../uvc.c      ****     status = CyU3PUartSetConfig (&uartConfig, NULL);
2115:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
2116:../uvc.c      ****     {
2117:../uvc.c      ****         CyU3PDebugPrint (4, "\n\resUVCUvcApplnDebugInit:CyU3PUartSetConfig failed Error = 0x%x",sta
2118:../uvc.c      ****     }
2119:../uvc.c      **** 
2120:../uvc.c      ****     /* Set the UART transfer */
2121:../uvc.c      ****     status = CyU3PUartTxSetBlockXfer (0xFFFFFFFF);
2122:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
2123:../uvc.c      ****     {
2124:../uvc.c      ****         CyU3PDebugPrint (4, "\n\resUVCUvcApplnDebugInit:CyU3PUartTxSetBlockXfer failed Error = 0x%x
2125:../uvc.c      ****     }
2126:../uvc.c      **** 
2127:../uvc.c      ****     /* Initialize the debug application */
2128:../uvc.c      ****     status = CyU3PDebugInit (CY_U3P_LPP_SOCKET_UART_CONS, 4/*8*/);
2129:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
2130:../uvc.c      ****     {
2131:../uvc.c      ****         CyU3PDebugPrint (4, "\n\resUVCUvcApplnDebugInit:CyU3PDebugInit failed Error = 0x%x",status)
2132:../uvc.c      ****     }
2133:../uvc.c      ****     CyU3PDebugPreamble (CyFalse);
2134:../uvc.c      **** 
2135:../uvc.c      **** }
2136:../uvc.c      **** 
2137:../uvc.c      **** 	/* I2C initialization. */
2138:../uvc.c      **** 	//static void
2139:../uvc.c      **** 	void
2140:../uvc.c      **** 		CyFxUVCApplnI2CInit(void)
2141:../uvc.c      **** 	{
2142:../uvc.c      **** 			CyU3PI2cConfig_t i2cConfig;;
2143:../uvc.c      **** 			CyU3PReturnStatus_t status;
2144:../uvc.c      **** 
2145:../uvc.c      **** 			status = CyU3PI2cInit();
2146:../uvc.c      **** 			if (status != CY_U3P_SUCCESS)
2147:../uvc.c      **** 			{
2148:../uvc.c      **** 				CyU3PDebugPrint(4, "I2C initialization failed!\n");
2149:../uvc.c      **** 				CyFxAppErrorHandler(status);
2150:../uvc.c      **** 			}
2151:../uvc.c      **** 
2152:../uvc.c      **** 			/*  Set I2C Configuration */
2153:../uvc.c      **** 			i2cConfig.bitRate = 100000;      /*  100 KHz */
2154:../uvc.c      **** 			i2cConfig.isDma = CyFalse;
2155:../uvc.c      **** 			i2cConfig.busTimeout = 0xffffffffU;
2156:../uvc.c      **** 			i2cConfig.dmaTimeout = 0xffff;
2157:../uvc.c      **** 
2158:../uvc.c      **** 			status = CyU3PI2cSetConfig(&i2cConfig, 0);
2159:../uvc.c      **** 			if (CY_U3P_SUCCESS != status)
2160:../uvc.c      **** 			{
2161:../uvc.c      **** 				CyU3PDebugPrint(4, "I2C configuration failed!\n");
2162:../uvc.c      **** 				CyFxAppErrorHandler(status);
2163:../uvc.c      **** 			}
2164:../uvc.c      **** 		}
2165:../uvc.c      **** 
2166:../uvc.c      **** 
2167:../uvc.c      **** /* Entry function for the UVC application thread. */
2168:../uvc.c      ****     void
2169:../uvc.c      **** UVCAppThread_Entry(      //esUVCUvcAppThread_Entry
2170:../uvc.c      ****         uint32_t input)
2171:../uvc.c      **** {
2172:../uvc.c      ****     uint16_t wakeReason;
2173:../uvc.c      ****     uint32_t eventFlag;
2174:../uvc.c      ****     CyU3PReturnStatus_t status;
2175:../uvc.c      ****     uint8_t i;
2176:../uvc.c      ****     /* Initialize the Debug Module */
2177:../uvc.c      ****     esUVCUvcApplnDebugInit();
2178:../uvc.c      ****     //CyU3PDebugPrint(4," the UART init \r\n");
2179:../uvc.c      **** 
2180:../uvc.c      **** 	//while (i++ < 6){// is it too long???
2181:../uvc.c      **** 		//CyU3PThreadSleep(500);
2182:../uvc.c      **** 	//}
2183:../uvc.c      **** 
2184:../uvc.c      **** 	/* Initialize the I2C interface */
2185:../uvc.c      **** 	CyFxUVCApplnI2CInit();
2186:../uvc.c      **** 
2187:../uvc.c      ****     /* Initialize the UVC Application */
2188:../uvc.c      ****     esUVCUvcApplnInit();
2189:../uvc.c      **** 
2190:../uvc.c      ****     //for(;;)
2191:../uvc.c      **** 	{
2192:../uvc.c      **** 		CyU3PDebugPrint(4,"test loop.\r\n");
2193:../uvc.c      **** 	}
2194:../uvc.c      ****     for (;;)
2195:../uvc.c      ****     {
2196:../uvc.c      ****         CyU3PEventGet (&glFxUVCEvent,ES_USB_SUSP_EVENT_FLAG|ES_TIMER_RESET_EVENT, CYU3P_EVENT_OR_CL
2197:../uvc.c      **** 
2198:../uvc.c      ****         /* Handle TimerReset Event*/
2199:../uvc.c      ****         if( eventFlag & ES_TIMER_RESET_EVENT)
2200:../uvc.c      ****         {
2201:../uvc.c      ****             if (glIsApplnActive)
2202:../uvc.c      ****             {
2203:../uvc.c      ****             	glIsClearFeature = CyFalse;
2204:../uvc.c      ****                 esUVCUvcApplnStop();
2205:../uvc.c      ****             }
2206:../uvc.c      ****             if(glPreviewStarted == CyTrue)
2207:../uvc.c      ****             {
2208:../uvc.c      ****             	//TODO Change this function with "Sensor Specific" function to write the sensor settin
2209:../uvc.c      ****             	//esSetCameraResolution(glFrameIndexToSet);//TODO resoltion set
2210:../uvc.c      ****             	esUVCUvcApplnStart();
2211:../uvc.c      ****             }
2212:../uvc.c      **** #ifdef RESET_TIMER_ENABLE
2213:../uvc.c      ****             CyU3PTimerModify (&UvcTimer, TIMER_PERIOD, 0);
2214:../uvc.c      **** #endif
2215:../uvc.c      ****         }
2216:../uvc.c      ****         /* Handle Suspend Event*/
2217:../uvc.c      ****         if(eventFlag & ES_USB_SUSP_EVENT_FLAG)
2218:../uvc.c      ****         {
2219:../uvc.c      ****             /* Place CX3 in Low Power Suspend mode, with USB bus activity as the wakeup source. */
2220:../uvc.c      ****             //CyU3PMipicsiSleep();
2221:../uvc.c      ****             //TODO Change this function with "Sensor Specific" PowerDown function to PowerDown the 
2222:../uvc.c      ****             //esCamera_Power_Down();
2223:../uvc.c      **** 
2224:../uvc.c      ****             status = CyU3PSysEnterSuspendMode (CY_U3P_SYS_USB_BUS_ACTVTY_WAKEUP_SRC, 0, &wakeReason
2225:../uvc.c      **** #if 0
2226:../uvc.c      ****             if(0/*glMipiActive*/)//need to check
2227:../uvc.c      ****             {
2228:../uvc.c      ****                 CyU3PMipicsiWakeup();
2229:../uvc.c      ****                 //TODO Change this function with "Sensor Specific" PowerUp function to PowerUp the 
2230:../uvc.c      ****                 esCamera_Power_Up();
2231:../uvc.c      ****             }
2232:../uvc.c      **** #endif
2233:../uvc.c      ****             continue;
2234:../uvc.c      ****         }
2235:../uvc.c      ****     } /* End of for(;;) */
2236:../uvc.c      **** }
2237:../uvc.c      **** 
2238:../uvc.c      **** 	/*
2239:../uvc.c      **** 	* Handler for control requests addressed to the Processing Unit.
2240:../uvc.c      **** 	*/
2241:../uvc.c      **** 
2242:../uvc.c      **** static void
2243:../uvc.c      **** 	UVCHandleProcessingUnitRqts(
2244:../uvc.c      **** 	void)
2245:../uvc.c      **** {
2246:../uvc.c      **** 		uint8_t CtrlAdd;
2247:../uvc.c      **** #ifdef DbgInfo
2248:../uvc.c      **** 		CyU3PDebugPrint(4, "The setup request value 0x%x 0x%x\r\n", wValue, bRequest); // additional debu
2249:../uvc.c      **** #endif
2250:../uvc.c      **** 		switch (wValue)
2251:../uvc.c      **** 		{
2252:../uvc.c      **** 		case CY_FX_UVC_PU_BACKLIGHT_COMPENSATION_CONTROL:
2253:../uvc.c      **** 			CtrlAdd = CtrlParArry[BLCCtlID0][0];
2254:../uvc.c      **** 			ControlHandle(BLCCtlID0);
2255:../uvc.c      **** 			break;
2256:../uvc.c      **** 		case CY_FX_UVC_PU_BRIGHTNESS_CONTROL:
2257:../uvc.c      **** 			CtrlAdd = CtrlParArry[ExtExRefCtlID10/*BrgtCtlID1*/][0]; //Exreference places brightness.
2258:../uvc.c      **** 			ControlHandle(ExtExRefCtlID10/*BrgtCtlID1*/);
2259:../uvc.c      **** 			break;
2260:../uvc.c      **** 		case CY_FX_UVC_PU_CONTRAST_CONTROL:
2261:../uvc.c      **** 			CtrlAdd = CtrlParArry[ConsCtlID2][0];
2262:../uvc.c      **** 			ControlHandle(ConsCtlID2);
2263:../uvc.c      **** 			break;
2264:../uvc.c      **** 
2265:../uvc.c      **** 		case CY_FX_UVC_PU_GAIN_CONTROL: break;
2266:../uvc.c      **** 
2267:../uvc.c      **** 		case CY_FX_UVC_PU_POWER_LINE_FREQUENCY_CONTROL:
2268:../uvc.c      **** 			CtrlAdd = CtrlParArry[MFreqCtlID4][0];
2269:../uvc.c      **** 			ControlHandle(MFreqCtlID4);
2270:../uvc.c      **** 			break;
2271:../uvc.c      **** 		case CY_FX_UVC_PU_HUE_CONTROL:
2272:../uvc.c      **** 			CtrlAdd = CtrlParArry[HueCtlID5][0];
2273:../uvc.c      **** 			ControlHandle(HueCtlID5);
2274:../uvc.c      **** 			break;
2275:../uvc.c      **** 		case CY_FX_UVC_PU_SATURATION_CONTROL:
2276:../uvc.c      **** 			CtrlAdd = CtrlParArry[SaturCtlID6][0];
2277:../uvc.c      **** 			ControlHandle(SaturCtlID6);
2278:../uvc.c      **** 			break;
2279:../uvc.c      **** 		case CY_FX_UVC_PU_SHARPNESS_CONTROL:
2280:../uvc.c      **** 			CtrlAdd = CtrlParArry[ShapCtlID7][0];
2281:../uvc.c      **** 			ControlHandle(ShapCtlID7);
2282:../uvc.c      **** 			break;
2283:../uvc.c      **** 		case CY_FX_UVC_PU_WHITE_BALANCE_COMPONENT_AUTO_CONTROL://
2284:../uvc.c      **** 			//case CY_FX_UVC_PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL:
2285:../uvc.c      **** 		case CY_FX_UVC_PU_WHITE_BALANCE_TEMPERATURE_CONTROL:
2286:../uvc.c      **** 			CtrlAdd = CtrlParArry[WBTMdCtlID9][0];
2287:../uvc.c      **** 			ControlHandle(WBTMdCtlID9);
2288:../uvc.c      **** 			break;
2289:../uvc.c      **** 		case CY_FX_UVC_PU_WHITE_BALANCE_COMPONENT_CONTROL:
2290:../uvc.c      **** 			CtrlAdd = CtrlParArry[WBTLevCtlID11][0];
2291:../uvc.c      **** 			ControlHandle(WBTLevCtlID11);
2292:../uvc.c      **** 			break;
2293:../uvc.c      **** 		case CY_FX_UVC_PU_DIGITAL_MULTIPLIER_CONTROL:
2294:../uvc.c      **** 			CtrlAdd = CtrlParArry[DigZmCtlID14][0];
2295:../uvc.c      **** 			ControlHandle(DigZmCtlID14);
2296:../uvc.c      **** 			break;
2297:../uvc.c      **** 
2298:../uvc.c      **** 		default:
2299:../uvc.c      **** 			/*
2300:../uvc.c      **** 			* Only the  control is supported as of now. Add additional code here to support
2301:../uvc.c      **** 			* other controls.
2302:../uvc.c      **** 			*/
2303:../uvc.c      **** 			CyU3PDebugPrint(4, "The default setup request value 0x%x 0x%x\r\n", wValue, bRequest); // additi
2304:../uvc.c      **** 			CyU3PUsbStall(0, CyTrue, CyFalse);
2305:../uvc.c      **** 			break;
2306:../uvc.c      **** 		}
2307:../uvc.c      **** }
2308:../uvc.c      **** 
2309:../uvc.c      **** 	/*
2310:../uvc.c      **** 	* Handler for control requests addressed to the UVC Camera Terminal unit.
2311:../uvc.c      **** 	*/
2312:../uvc.c      **** #if 0
2313:../uvc.c      **** static void
2314:../uvc.c      **** 	UVCHandleCameraTerminalRqts(
2315:../uvc.c      **** 	void)
2316:../uvc.c      **** {
2317:../uvc.c      **** 		uint8_t CtrlAdd;
2318:../uvc.c      **** 
2319:../uvc.c      **** 		switch (wValue)
2320:../uvc.c      **** 		{
2321:../uvc.c      **** 		case CY_FX_UVC_CT_SCANNING_MODE_CONTROL:
2322:../uvc.c      **** 			CtrlAdd = CTCtrlParArry[ScanMCtlID0][0];
2323:../uvc.c      **** 			CTControlHandle(ScanMCtlID0);
2324:../uvc.c      **** 			break;
2325:../uvc.c      **** 		case CY_FX_UVC_CT_AE_MODE_CONTROL:
2326:../uvc.c      **** 			CtrlAdd = CTCtrlParArry[AutoExMCtlID1][0];
2327:../uvc.c      **** 			CTControlHandle(AutoExMCtlID1);
2328:../uvc.c      **** 			break;
2329:../uvc.c      **** 		case CY_FX_UVC_CT_AE_PRIORITY_CONTROL:
2330:../uvc.c      **** 			CtrlAdd = CTCtrlParArry[AutoExPCtlID2][0];
2331:../uvc.c      **** 			CTControlHandle(AutoExPCtlID2);
2332:../uvc.c      **** 			break;
2333:../uvc.c      **** 
2334:../uvc.c      **** 		case CY_FX_UVC_CT_EXPOSURE_TIME_ABSOLUTE_CONTROL:
2335:../uvc.c      **** 			CtrlAdd = CTCtrlParArry[ExTmACtlID3][0];
2336:../uvc.c      **** 			CTControlHandle(ExTmACtlID3);
2337:../uvc.c      **** 			break;
2338:../uvc.c      **** 
2339:../uvc.c      **** 		case CY_FX_UVC_CT_EXPOSURE_TIME_RELATIVE_CONTROL:
2340:../uvc.c      **** 			CtrlAdd = CTCtrlParArry[ExTmRCtlID4][0];
2341:../uvc.c      **** 			CTControlHandle(ExTmRCtlID4);
2342:../uvc.c      **** 			break;
2343:../uvc.c      **** 		case CY_FX_UVC_CT_FOCUS_ABSOLUTE_CONTROL:
2344:../uvc.c      **** 			CtrlAdd = CTCtrlParArry[FocACtlID5][0];
2345:../uvc.c      **** 			CTControlHandle(FocACtlID5);
2346:../uvc.c      **** 			break;
2347:../uvc.c      **** 		case CY_FX_UVC_CT_FOCUS_RELATIVE_CONTROL:
2348:../uvc.c      **** 			CtrlAdd = CTCtrlParArry[FocRCtlID6][0];
2349:../uvc.c      **** 			CTControlHandle(FocRCtlID6);
2350:../uvc.c      **** 			break;
2351:../uvc.c      **** 		case CY_FX_UVC_CT_FOCUS_AUTO_CONTROL:
2352:../uvc.c      **** 			break;
2353:../uvc.c      **** 		case CY_FX_UVC_CT_IRIS_ABSOLUTE_CONTROL://
2354:../uvc.c      **** 			CtrlAdd = CTCtrlParArry[IriACtlID7][0];
2355:../uvc.c      **** 			CTControlHandle(IriACtlID7);
2356:../uvc.c      **** 			break;
2357:../uvc.c      **** 
2358:../uvc.c      **** 		case CY_FX_UVC_CT_IRIS_RELATIVE_CONTROL:
2359:../uvc.c      **** 			CtrlAdd = CTCtrlParArry[IriRCtlID8][0];
2360:../uvc.c      **** 			CTControlHandle(IriRCtlID8);
2361:../uvc.c      **** 			break;
2362:../uvc.c      **** 		case CY_FX_UVC_CT_ZOOM_ABSOLUTE_CONTROL:
2363:../uvc.c      **** 			CtrlAdd = CTCtrlParArry[ZmOpACtlID9][0];
2364:../uvc.c      **** 			CTControlHandle(ZmOpACtlID9);
2365:../uvc.c      **** 			break;
2366:../uvc.c      **** 		case CY_FX_UVC_CT_ZOOM_RELATIVE_CONTROL:
2367:../uvc.c      **** 			CtrlAdd = CTCtrlParArry[ZmOpRCtlID10][0];
2368:../uvc.c      **** 			CTControlHandle(ZmOpRCtlID10);
2369:../uvc.c      **** 			break;
2370:../uvc.c      **** 
2371:../uvc.c      **** 		default:
2372:../uvc.c      **** 			/*
2373:../uvc.c      **** 			* Only the  control is supported as of now. Add additional code here to support
2374:../uvc.c      **** 			* other controls.
2375:../uvc.c      **** 			*/
2376:../uvc.c      **** 			CyU3PDebugPrint(4, "The default setup request value 0x%x 0x%x\r\n", wValue, bRequest); // additi
2377:../uvc.c      **** 			CyU3PUsbStall(0, CyTrue, CyFalse);
2378:../uvc.c      **** 			break;
2379:../uvc.c      **** 		}
2380:../uvc.c      **** 
2381:../uvc.c      **** }
2382:../uvc.c      **** #endif
2383:../uvc.c      **** 	/*
2384:../uvc.c      **** 	* Handler for UVC Interface control requests.
2385:../uvc.c      **** 	*/
2386:../uvc.c      **** static void
2387:../uvc.c      **** 	UVCHandleInterfaceCtrlRqts(
2388:../uvc.c      **** 	void)
2389:../uvc.c      **** {
2390:../uvc.c      **** 
2391:../uvc.c      **** 		switch (wValue)
2392:../uvc.c      **** 		{
2393:../uvc.c      **** 		case CY_FX_UVC_POWER_MODE_CTRL: // shutter CONTROL1
2394:../uvc.c      **** 			CyU3PUsbStall(0, CyTrue, CyFalse);
2395:../uvc.c      **** 			break;
2396:../uvc.c      **** 		case CY_FX_UVC_ERROR_CODE_CTRL: // sense up mode CONTROL2
2397:../uvc.c      **** 			CyU3PUsbStall(0, CyTrue, CyFalse);
2398:../uvc.c      **** 			//ControlHandle(0xff);//for control interface error code control.
2399:../uvc.c      **** 			break;
2400:../uvc.c      **** 		default:
2401:../uvc.c      **** 			CyU3PUsbStall(0, CyTrue, CyFalse);
2402:../uvc.c      **** 			break;
2403:../uvc.c      **** 		}
2404:../uvc.c      **** 		/* No requests supported as of now. Just stall EP0 to fail the request. */
2405:../uvc.c      **** 
2406:../uvc.c      **** 	}
2407:../uvc.c      **** 
2408:../uvc.c      **** 	/*
2409:../uvc.c      **** 	* Handler for control requests addressed to the Extension Unit.
2410:../uvc.c      **** 	*/
2411:../uvc.c      **** static void
2412:../uvc.c      **** 	UVCHandleExtensionUnitRqts(
2413:../uvc.c      **** 	void)
2414:../uvc.c      **** {
2415:../uvc.c      **** 		uint8_t CtrlAdd;  //set control ID -add
2416:../uvc.c      **** 
2417:../uvc.c      **** #ifdef DbgInfo
2418:../uvc.c      **** 		CyU3PDebugPrint(4, "The setup request value 0x%x 0x%x\r\n", wValue, bRequest); // additional debu
2419:../uvc.c      **** #endif
2420:../uvc.c      **** 		switch (wValue)
2421:../uvc.c      **** 		{
2422:../uvc.c      **** 		case CY_FX_EXT_CONTROL_1SHUTTER: // shutter CONTROL1
2423:../uvc.c      **** 			CtrlAdd = CtrlParArry[ExtShutCtlID0][0];
2424:../uvc.c      **** 			ControlHandle(ExtShutCtlID0);
2425:../uvc.c      **** 			break;
2426:../uvc.c      **** 		case CY_FX_EXT_CONTROL_2SENUPMODE: // sense up mode CONTROL2
2427:../uvc.c      **** 			CtrlAdd = CtrlParArry[ExtSenCtlID1][0];
2428:../uvc.c      **** 			ControlHandle(ExtSenCtlID1);
2429:../uvc.c      **** 			break;
2430:../uvc.c      **** 		case CY_FX_EXT_CONTROL_3MIRROR: // mirror mode CONTROL3
2431:../uvc.c      **** 			CtrlAdd = CtrlParArry[ExtMirrCtlID2][0];
2432:../uvc.c      **** 			ControlHandle(ExtMirrCtlID2);
2433:../uvc.c      **** 			break;
2434:../uvc.c      **** 		case CY_FX_EXT_CONTROL_43DNOISEREDUC_MODE: //3D noise reduce control CONTROL4
2435:../uvc.c      **** 			CtrlAdd = CtrlParArry[Ext3DNReduMCtlID3][0];
2436:../uvc.c      **** 			ControlHandle(Ext3DNReduMCtlID3);
2437:../uvc.c      **** 			break;
2438:../uvc.c      **** 		case CY_FX_EXT_CONTROL_53DNOISEREDUC_CTRL: //3D noise reduce level CONTROL5
2439:../uvc.c      **** 			CtrlAdd = CtrlParArry[Ext3DNReduLvCtlID4][0];
2440:../uvc.c      **** 			ControlHandle(Ext3DNReduLvCtlID4);
2441:../uvc.c      **** 			break;
2442:../uvc.c      **** 		case CY_FX_EXT_CONTROL_6DAYNIGHT_MODE: // day night mode CONTROL6
2443:../uvc.c      **** 			CtrlAdd = CtrlParArry[ExtDNModCtlID5][0];
2444:../uvc.c      **** 			ControlHandle(ExtDNModCtlID5);
2445:../uvc.c      **** 			break;
2446:../uvc.c      **** 		case CY_FX_EXT_CONTROL_7DAYNIGHT_DELAY: //day night switch delay CONTROL7
2447:../uvc.c      **** 			CtrlAdd = CtrlParArry[ExtDNDelytlID6][0];
2448:../uvc.c      **** 			ControlHandle(ExtDNDelytlID6);
2449:../uvc.c      **** 			break;
2450:../uvc.c      **** 		case CY_FX_EXT_CONTROL_8DAYNIGHT_LEVEL: //day to night level CONTROL8
2451:../uvc.c      **** 			CtrlAdd = CtrlParArry[ExtDNlevCtlID7][0];
2452:../uvc.c      **** 			ControlHandle(ExtDNlevCtlID7);
2453:../uvc.c      **** 			break;
2454:../uvc.c      **** 		case CY_FX_EXT_CONTROL_9NIGHTDAY_LEVEL: //night to day level CONTROL9
2455:../uvc.c      **** 			CtrlAdd = CtrlParArry[ExtNDlevCtlID8][0];
2456:../uvc.c      **** 			ControlHandle(ExtNDlevCtlID8);
2457:../uvc.c      **** 			break;
2458:../uvc.c      **** 		case CY_FX_EXT_CONTROL_10EXPOSURE_MODE: //AEx mode CONTROL10
2459:../uvc.c      **** 			if (CamMode == 1){//only 720p support
2460:../uvc.c      **** 				CtrlAdd = CtrlParArry[ExtAexModCtlID9][0];
2461:../uvc.c      **** 				ControlHandle(ExtAexModCtlID9);
2462:../uvc.c      **** 			}
2463:../uvc.c      **** 			else/* no support for 1080p camera */
2464:../uvc.c      **** 				CyU3PDebugPrint(4, "The host command is not correct for 1080p camera 0x%x 0x%x %d\r\n", wValue,
2465:../uvc.c      **** 			break;
2466:../uvc.c      **** 		case CY_FX_EXT_CONTROL_11AEREFERENCE_LEVEL: //AEx reference level CONTROL11
2467:../uvc.c      **** 			CtrlAdd = CtrlParArry[ExtExRefCtlID10][0];
2468:../uvc.c      **** 			ControlHandle(ExtExRefCtlID10);
2469:../uvc.c      **** 			break;
2470:../uvc.c      **** 		case CY_FX_EXT_CONTROL_13CAMERA_MODE: //Camera Mode CONTROL13
2471:../uvc.c      **** 			CtrlAdd = CtrlParArry[ExtCamMCtlID12][0];
2472:../uvc.c      **** 			ControlHandle(ExtCamMCtlID12);
2473:../uvc.c      **** 			break;
2474:../uvc.c      **** 			//case CY_FX_EXT_CONTROL_14SNAP_SHOT: //Still image set CONTROL14
2475:../uvc.c      **** 			//CtrlAdd = CtrlParArry[ExtshotCtlID13][0];
2476:../uvc.c      **** 			//ControlHandle(ExtshotCtlID13);
2477:../uvc.c      **** 			//break;
2478:../uvc.c      **** 		case CY_FX_EXT_CONTROL_15SENSOR_PARS: //Sensor Parameters set CONTROL15
2479:../uvc.c      **** 			CtrlAdd = CtrlParArry[ExtSensorParCtlID14][0];
2480:../uvc.c      **** 			ControlHandle(ExtSensorParCtlID14);
2481:../uvc.c      **** 			break;
2482:../uvc.c      **** 		case CY_FX_EXT_CONTROL_16I2C_COMMAND: //I2C commands operation CONTROL16
2483:../uvc.c      **** 			CtrlAdd = CtrlParArry[ExtI2CCtlID15][0];
2484:../uvc.c      **** 			ControlHandle(ExtI2CCtlID15);
2485:../uvc.c      **** 			break;
2486:../uvc.c      **** 		case CY_FX_EXT_CONTROL_17BLC_RANGE:   //BLD range CONTROL17
2487:../uvc.c      **** 			CtrlAdd = ExUCtrlParArry[Ext1BLCRangeCtlID4 - EXUAOFFSET + 4][0];
2488:../uvc.c      **** 			ControlHandle(Ext1BLCRangeCtlID4);
2489:../uvc.c      **** 			break;
2490:../uvc.c      **** 		case CY_FX_EXT_CONTROL_18BLC_POSITION:   //BLD gain CONTROL18
2491:../uvc.c      **** 			CtrlAdd = ExUCtrlParArry[Ext1BLCWeightCtlID5 - EXUAOFFSET + 4][0];
2492:../uvc.c      **** 			ControlHandle(Ext1BLCWeightCtlID5);
2493:../uvc.c      **** 			break;
2494:../uvc.c      **** 		case CY_FX_EXT_CONTROL_18BLC_GRID:   //BLD gain CONTROL19
2495:../uvc.c      **** 			CtrlAdd = ExUCtrlParArry[Ext1BLCGridCtlID6 - EXUAOFFSET + 4][0];
2496:../uvc.c      **** 			ControlHandle(Ext1BLCGridCtlID6);
2497:../uvc.c      **** 			break;
2498:../uvc.c      **** 		default:
2499:../uvc.c      **** 			/* No requests supported as of now. Just stall EP0 to fail the request. */
2500:../uvc.c      **** 			CyU3PUsbStall(0, CyTrue, CyFalse);
2501:../uvc.c      **** 			break;
2502:../uvc.c      **** 		}
2503:../uvc.c      **** 
2504:../uvc.c      **** 	}
2505:../uvc.c      **** 
2506:../uvc.c      **** 	/*
2507:../uvc.c      **** 	* Handler for the video streaming control requests.
2508:../uvc.c      **** 	*/
2509:../uvc.c      **** static void
2510:../uvc.c      **** UVCHandleVideoStreamingRqts(
2511:../uvc.c      **** void)
2512:../uvc.c      **** {
2513:../uvc.c      **** 	CyU3PReturnStatus_t status = CY_U3P_SUCCESS;
2514:../uvc.c      **** 	CyBool_t isHandled = CyFalse;
2515:../uvc.c      **** 	uint16_t readCount;
2516:../uvc.c      **** #if 0
2517:../uvc.c      **** 	switch (wValue)
2518:../uvc.c      **** 	{
2519:../uvc.c      **** 	case CY_FX_UVC_PROBE_CTRL:
2520:../uvc.c      **** 		switch (bRequest)
2521:../uvc.c      **** 		{
2522:../uvc.c      **** 		case CY_FX_USB_UVC_GET_INFO_REQ:
2523:../uvc.c      **** 			glEp0Buffer[0] = 3;                /* GET/SET requests are supported. */
2524:../uvc.c      **** 			CyU3PUsbSendEP0Data(1, (uint8_t *)glEp0Buffer);
2525:../uvc.c      **** 			break;
2526:../uvc.c      **** 		case CY_FX_USB_UVC_GET_LEN_REQ:
2527:../uvc.c      **** 			glEp0Buffer[0] = CY_FX_UVC_MAX_PROBE_SETTING;
2528:../uvc.c      **** 			glEp0Buffer[1] = 0;
2529:../uvc.c      **** 			CyU3PUsbSendEP0Data(2, (uint8_t *)glEp0Buffer);
2530:../uvc.c      **** 			break;
2531:../uvc.c      **** 		case CY_FX_USB_UVC_GET_CUR_REQ:
2532:../uvc.c      **** 		case CY_FX_USB_UVC_GET_MIN_REQ:
2533:../uvc.c      **** 		case CY_FX_USB_UVC_GET_MAX_REQ:
2534:../uvc.c      **** 		case CY_FX_USB_UVC_GET_DEF_REQ: 	/* There is only one setting per USB speed. */
2535:../uvc.c      **** 			if (1 || usbSpeed == CY_U3P_SUPER_SPEED)//supports both SS and HS
2536:../uvc.c      **** 			{
2537:../uvc.c      **** 				CyU3PUsbSendEP0Data(CY_FX_UVC_MAX_PROBE_SETTING, (uint8_t *)glProbeCtrl);
2538:../uvc.c      **** 			}
2539:../uvc.c      **** 			else
2540:../uvc.c      **** 			{
2541:../uvc.c      **** 				CyU3PUsbSendEP0Data(CY_FX_UVC_MAX_PROBE_SETTING, (uint8_t *)glProbeCtrl20);
2542:../uvc.c      **** 			}
2543:../uvc.c      **** 			break;
2544:../uvc.c      **** 		case CY_FX_USB_UVC_SET_CUR_REQ:
2545:../uvc.c      **** 			apiRetStatus = CyU3PUsbGetEP0Data(CY_FX_UVC_MAX_PROBE_SETTING_ALIGNED,
2546:../uvc.c      **** 				glCommitCtrl, &readCount);
2547:../uvc.c      **** 			if (apiRetStatus == CY_U3P_SUCCESS)
2548:../uvc.c      **** 			{
2549:../uvc.c      **** 				//if (usbSpeed == CY_U3P_SUPER_SPEED)//for both SS and HS
2550:../uvc.c      **** 				{
2551:../uvc.c      **** 					/* Copy the relevant settings from the host provided data into the
2552:../uvc.c      **** 					active data structure. */
2553:../uvc.c      **** 					glProbeCtrl[2] = glCommitCtrl[2];
2554:../uvc.c      **** 					glProbeCtrl[3] = glCommitCtrl[3];
2555:../uvc.c      **** 					glProbeCtrl[4] = glCommitCtrl[4];
2556:../uvc.c      **** 					glProbeCtrl[5] = glCommitCtrl[5];
2557:../uvc.c      **** 					glProbeCtrl[6] = glCommitCtrl[6];
2558:../uvc.c      **** 					glProbeCtrl[7] = glCommitCtrl[7];
2559:../uvc.c      **** 					CyU3PDebugPrint(4, "Get UVC Prob(set) control %d %d %d %d %d %d %d\r\n", readCount,
2560:../uvc.c      **** 						glCommitCtrl[0], glCommitCtrl[3], glCommitCtrl[4], glCommitCtrl[5], glCommitCtrl[6], glCommit
2561:../uvc.c      **** 				}
2562:../uvc.c      **** 			}
2563:../uvc.c      **** 			break;
2564:../uvc.c      **** 		default:
2565:../uvc.c      **** 			CyU3PUsbStall(0, CyTrue, CyFalse);
2566:../uvc.c      **** 			break;
2567:../uvc.c      **** 		}
2568:../uvc.c      **** 		break;
2569:../uvc.c      **** 
2570:../uvc.c      **** 	case CY_FX_UVC_COMMIT_CTRL:
2571:../uvc.c      **** 		switch (bRequest)
2572:../uvc.c      **** 		{
2573:../uvc.c      **** 		case CY_FX_USB_UVC_GET_INFO_REQ:
2574:../uvc.c      **** 			glEp0Buffer[0] = 3;                        /* GET/SET requests are supported. */
2575:../uvc.c      **** 			CyU3PUsbSendEP0Data(1, (uint8_t *)glEp0Buffer);
2576:../uvc.c      **** 			break;
2577:../uvc.c      **** 		case CY_FX_USB_UVC_GET_LEN_REQ:
2578:../uvc.c      **** 			glEp0Buffer[0] = CY_FX_UVC_MAX_PROBE_SETTING;
2579:../uvc.c      **** 			glEp0Buffer[1] = 0;
2580:../uvc.c      **** 			CyU3PUsbSendEP0Data(2, (uint8_t *)glEp0Buffer);
2581:../uvc.c      **** 			break;
2582:../uvc.c      **** 		case CY_FX_USB_UVC_GET_CUR_REQ:
2583:../uvc.c      **** 			if (1 || usbSpeed == CY_U3P_SUPER_SPEED) //support both SS and HS
2584:../uvc.c      **** 			{
2585:../uvc.c      **** 				CyU3PUsbSendEP0Data(CY_FX_UVC_MAX_PROBE_SETTING, (uint8_t *)glProbeCtrl);
2586:../uvc.c      **** 			}
2587:../uvc.c      **** 			else
2588:../uvc.c      **** 			{
2589:../uvc.c      **** 				CyU3PUsbSendEP0Data(CY_FX_UVC_MAX_PROBE_SETTING, (uint8_t *)glProbeCtrl20);
2590:../uvc.c      **** 			}
2591:../uvc.c      **** 			break;
2592:../uvc.c      **** 		case CY_FX_USB_UVC_SET_CUR_REQ:
2593:../uvc.c      **** 			/* The host has selected the parameters for the video stream. Check the desired
2594:../uvc.c      **** 			resolution settings, configure the sensor and start the video stream.
2595:../uvc.c      **** 			*/
2596:../uvc.c      **** 			apiRetStatus = CyU3PUsbGetEP0Data(CY_FX_UVC_MAX_PROBE_SETTING_ALIGNED,
2597:../uvc.c      **** 				glCommitCtrl, &readCount);
2598:../uvc.c      **** 			if (apiRetStatus == CY_U3P_SUCCESS)//supports both SS and HS
2599:../uvc.c      **** 			{
2600:../uvc.c      **** 				if (setRes != glCommitCtrl[3])
2601:../uvc.c      **** 				{
2602:../uvc.c      **** 					switch (glCommitCtrl[3])
2603:../uvc.c      **** 					{
2604:../uvc.c      **** 					case 1: //720 or 360
2605:../uvc.c      **** 						SensorSetIrisControl(0x0b, 0x30, 0x1, I2C_DSPBOARD_ADDR_WR/*boardID*/);//start 5MP Res
2606:../uvc.c      **** 						CyU3PThreadSleep(500);
2607:../uvc.c      **** 						CyU3PDebugPrint(4, "Set the video mode format %x %d\n", 0x1, 0x0b);
2608:../uvc.c      **** 						break;
2609:../uvc.c      **** 					case 2: //960 or 480
2610:../uvc.c      **** 						SensorSetIrisControl(0x0b, 0x30, 0x0, I2C_DSPBOARD_ADDR_WR/*boardID*/);//start 5MP Res
2611:../uvc.c      **** 						CyU3PThreadSleep(500);
2612:../uvc.c      **** 						CyU3PDebugPrint(4, "Set the video mode format %x %d\n", 0x0, 0x0b);
2613:../uvc.c      **** 						break;
2614:../uvc.c      **** 					default:
2615:../uvc.c      **** 						break;
2616:../uvc.c      **** 					}
2617:../uvc.c      **** 					setRes = glCommitCtrl[3];
2618:../uvc.c      **** 				}
2619:../uvc.c      **** 				CyU3PDebugPrint(4, "Set the video mode format setRes %d\n", setRes);
2620:../uvc.c      **** 
2621:../uvc.c      **** 	#if 0
2622:../uvc.c      **** 				if (usbSpeed == CY_U3P_SUPER_SPEED)
2623:../uvc.c      **** 				{
2624:../uvc.c      **** 					SensorScaling_HD720p_30fps();
2625:../uvc.c      **** 				}
2626:../uvc.c      **** 				else
2627:../uvc.c      **** 				{
2628:../uvc.c      **** 					SensorScaling_VGA();
2629:../uvc.c      **** 				}
2630:../uvc.c      **** 	#endif
2631:../uvc.c      **** 				/* We can start streaming video now. */
2632:../uvc.c      **** 				apiRetStatus = CyU3PEventSet(&glFxUVCEvent, CY_FX_UVC_STREAM_EVENT, CYU3P_EVENT_OR);
2633:../uvc.c      **** 				if (apiRetStatus != CY_U3P_SUCCESS)
2634:../uvc.c      **** 				{
2635:../uvc.c      **** 					CyU3PDebugPrint(4, "Set CY_FX_UVC_STREAM_EVENT failed %x\n", apiRetStatus);
2636:../uvc.c      **** 				}
2637:../uvc.c      **** 			}
2638:../uvc.c      **** 			break;
2639:../uvc.c      **** 
2640:../uvc.c      **** 		default:
2641:../uvc.c      **** 			CyU3PUsbStall(0, CyTrue, CyFalse);
2642:../uvc.c      **** 			break;
2643:../uvc.c      **** 		}
2644:../uvc.c      **** 		break;
2645:../uvc.c      **** 
2646:../uvc.c      **** 		/* still image streaming handler */
2647:../uvc.c      **** 	case VD_FX_UVC_STILL_PROB_CTRL:
2648:../uvc.c      **** 		switch (bRequest)
2649:../uvc.c      **** 		{
2650:../uvc.c      **** 		case CY_FX_USB_UVC_GET_INFO_REQ:
2651:../uvc.c      **** 			glEp0Buffer[0] = 3;                /* GET/SET requests are supported. */
2652:../uvc.c      **** 			CyU3PUsbSendEP0Data(1, (uint8_t *)glEp0Buffer);
2653:../uvc.c      **** 			break;
2654:../uvc.c      **** 		case CY_FX_USB_UVC_GET_LEN_REQ:
2655:../uvc.c      **** 			glEp0Buffer[0] = CY_FX_UVC_MAX_PROBE_SETTING;
2656:../uvc.c      **** 			glEp0Buffer[1] = 0;
2657:../uvc.c      **** 			CyU3PUsbSendEP0Data(2, (uint8_t *)glEp0Buffer);
2658:../uvc.c      **** 			break;
2659:../uvc.c      **** 		case CY_FX_USB_UVC_GET_CUR_REQ:
2660:../uvc.c      **** 		case CY_FX_USB_UVC_GET_MIN_REQ:
2661:../uvc.c      **** 		case CY_FX_USB_UVC_GET_MAX_REQ:
2662:../uvc.c      **** 		case CY_FX_USB_UVC_GET_DEF_REQ: 	/* There is only one setting per USB speed. */
2663:../uvc.c      **** 			if (usbSpeed == CY_U3P_SUPER_SPEED)
2664:../uvc.c      **** 			{
2665:../uvc.c      **** 				CyU3PUsbSendEP0Data(VD_FX_UVC_MAX_STLPROBE_SETTING, (uint8_t *)glProbeStilCtrl);
2666:../uvc.c      **** 			}
2667:../uvc.c      **** 			else
2668:../uvc.c      **** 			{
2669:../uvc.c      **** 				CyU3PUsbSendEP0Data(VD_FX_UVC_MAX_STLPROBE_SETTING, (uint8_t *)glProbeStilCtrl20);
2670:../uvc.c      **** 			}
2671:../uvc.c      **** 			break;
2672:../uvc.c      **** 		case CY_FX_USB_UVC_SET_CUR_REQ:
2673:../uvc.c      **** 			apiRetStatus = CyU3PUsbGetEP0Data(CY_FX_UVC_MAX_PROBE_SETTING_ALIGNED,
2674:../uvc.c      **** 				glCommitCtrl, &readCount);
2675:../uvc.c      **** 			if (apiRetStatus == CY_U3P_SUCCESS)
2676:../uvc.c      **** 			{
2677:../uvc.c      **** 				//if (usbSpeed == CY_U3P_SUPER_SPEED)//for both SS and HS
2678:../uvc.c      **** 				{
2679:../uvc.c      **** 					/* Copy the relevant settings from the host provided data into the
2680:../uvc.c      **** 					active data structure. */
2681:../uvc.c      **** 					glProbeStilCtrl[1] = glCommitCtrl[1];
2682:../uvc.c      **** 					glProbeStilCtrl[2] = glCommitCtrl[2];
2683:../uvc.c      **** 					glProbeStilCtrl[3] = glCommitCtrl[3];
2684:../uvc.c      **** 					glProbeStilCtrl[4] = glCommitCtrl[4];
2685:../uvc.c      **** 					glProbeStilCtrl[5] = glCommitCtrl[5];
2686:../uvc.c      **** 					glProbeStilCtrl[6] = glCommitCtrl[6];
2687:../uvc.c      **** 				}
2688:../uvc.c      **** 				CyU3PDebugPrint(4, "Get UVC still Prob(set) control %d %d %d\r\n", readCount, glCommitCtrl[0], 
2689:../uvc.c      **** 			}
2690:../uvc.c      **** 			break;
2691:../uvc.c      **** 		default:
2692:../uvc.c      **** 			CyU3PUsbStall(0, CyTrue, CyFalse);
2693:../uvc.c      **** 			break;
2694:../uvc.c      **** 		}
2695:../uvc.c      **** 		break;
2696:../uvc.c      **** 
2697:../uvc.c      **** 	case VD_FX_UVC_STILL_COMIT_CTRL:
2698:../uvc.c      **** 		switch (bRequest)
2699:../uvc.c      **** 		{
2700:../uvc.c      **** 		case CY_FX_USB_UVC_GET_INFO_REQ:
2701:../uvc.c      **** 			glEp0Buffer[0] = 3;                        /* GET/SET requests are supported. */
2702:../uvc.c      **** 			CyU3PUsbSendEP0Data(1, (uint8_t *)glEp0Buffer);
2703:../uvc.c      **** 			break;
2704:../uvc.c      **** 		case CY_FX_USB_UVC_GET_LEN_REQ:
2705:../uvc.c      **** 			glEp0Buffer[0] = CY_FX_UVC_MAX_PROBE_SETTING;
2706:../uvc.c      **** 			glEp0Buffer[1] = 0;
2707:../uvc.c      **** 			CyU3PUsbSendEP0Data(2, (uint8_t *)glEp0Buffer);
2708:../uvc.c      **** 			break;
2709:../uvc.c      **** 		case CY_FX_USB_UVC_GET_CUR_REQ:
2710:../uvc.c      **** 			if (usbSpeed == CY_U3P_SUPER_SPEED)
2711:../uvc.c      **** 			{
2712:../uvc.c      **** 				CyU3PUsbSendEP0Data(VD_FX_UVC_MAX_STLPROBE_SETTING, (uint8_t *)glProbeStilCtrl);
2713:../uvc.c      **** 			}
2714:../uvc.c      **** 			else
2715:../uvc.c      **** 			{
2716:../uvc.c      **** 				CyU3PUsbSendEP0Data(VD_FX_UVC_MAX_STLPROBE_SETTING, (uint8_t *)glProbeStilCtrl20);
2717:../uvc.c      **** 			}
2718:../uvc.c      **** 			break;
2719:../uvc.c      **** 		case CY_FX_USB_UVC_SET_CUR_REQ:
2720:../uvc.c      **** 			/* The host has selected the parameters for the video stream. Check the desired
2721:../uvc.c      **** 			resolution settings, configure the sensor and start the video stream.
2722:../uvc.c      **** 			*/
2723:../uvc.c      **** 			apiRetStatus = CyU3PUsbGetEP0Data(CY_FX_UVC_MAX_PROBE_SETTING_ALIGNED,
2724:../uvc.c      **** 				glCommitCtrl, &readCount);
2725:../uvc.c      **** 			if (apiRetStatus == CY_U3P_SUCCESS)
2726:../uvc.c      **** 			{
2727:../uvc.c      **** 	#if 0
2728:../uvc.c      **** 				if (usbSpeed == CY_U3P_SUPER_SPEED)
2729:../uvc.c      **** 				{
2730:../uvc.c      **** 					SensorScaling_HD720p_30fps();
2731:../uvc.c      **** 				}
2732:../uvc.c      **** 				else
2733:../uvc.c      **** 				{
2734:../uvc.c      **** 					SensorScaling_VGA();
2735:../uvc.c      **** 				}
2736:../uvc.c      **** 				/* We can start streaming video now. */
2737:../uvc.c      **** 				apiRetStatus = CyU3PEventSet(&glFxUVCEvent, CY_FX_UVC_STREAM_EVENT, CYU3P_EVENT_OR);
2738:../uvc.c      **** 
2739:../uvc.c      **** 				if (apiRetStatus != CY_U3P_SUCCESS)
2740:../uvc.c      **** 				{
2741:../uvc.c      **** 					CyU3PDebugPrint(4, "Set CY_FX_UVC_STREAM_EVENT failed %x\n", apiRetStatus);
2742:../uvc.c      **** 				}
2743:../uvc.c      **** 	#endif
2744:../uvc.c      **** 	#if 0 //remove the still resolution set for invendo because the still res. is always the same as t
2745:../uvc.c      **** 				switch (glCommitCtrl[1])
2746:../uvc.c      **** 				{
2747:../uvc.c      **** 				case 1: //720
2748:../uvc.c      **** 					SensorSetIrisControl(0x0b, 0x30, 0x1, I2C_DSPBOARD_ADDR_WR/*boardID*/);//start 5MP Res
2749:../uvc.c      **** 					//CyU3PThreadSleep(500);
2750:../uvc.c      **** 					CyU3PDebugPrint(4, "Set the still mode format %x %d\n", 0x0b, 0x1);
2751:../uvc.c      **** 					break;
2752:../uvc.c      **** 				case 2: //960
2753:../uvc.c      **** 					SensorSetIrisControl(0x0b, 0x30, 0x0, I2C_DSPBOARD_ADDR_WR/*boardID*/);//start 5MP Res
2754:../uvc.c      **** 					//CyU3PThreadSleep(500);
2755:../uvc.c      **** 					CyU3PDebugPrint(4, "Set the still mode format %x %d\n", 0x0b, 0x0);
2756:../uvc.c      **** 					break;
2757:../uvc.c      **** 				default:
2758:../uvc.c      **** 					break;
2759:../uvc.c      **** 				}
2760:../uvc.c      **** 				setstilRes = glCommitCtrl[1];
2761:../uvc.c      **** 
2762:../uvc.c      **** 				CyU3PDebugPrint(4, "UVC still commit control set %d %d %d\r\n", readCount, glCommitCtrl[0], glC
2763:../uvc.c      **** 	#endif
2764:../uvc.c      **** 			}
2765:../uvc.c      **** 			break;
2766:../uvc.c      **** 
2767:../uvc.c      **** 		default:
2768:../uvc.c      **** 			CyU3PUsbStall(0, CyTrue, CyFalse);
2769:../uvc.c      **** 			break;
2770:../uvc.c      **** 		}
2771:../uvc.c      **** 		break;
2772:../uvc.c      **** 
2773:../uvc.c      **** 	case VD_FX_UVC_STILL_TRIG_CTRL:
2774:../uvc.c      **** 		switch (bRequest)
2775:../uvc.c      **** 		{
2776:../uvc.c      **** 		case CY_FX_USB_UVC_GET_INFO_REQ:
2777:../uvc.c      **** 			glEp0Buffer[0] = 3;                        /* GET/SET requests are supported. */
2778:../uvc.c      **** 			CyU3PUsbSendEP0Data(1, (uint8_t *)glEp0Buffer);
2779:../uvc.c      **** 			break;
2780:../uvc.c      **** 		case CY_FX_USB_UVC_GET_LEN_REQ:
2781:../uvc.c      **** 			glEp0Buffer[0] = 1;//CY_FX_UVC_MAX_PROBE_SETTING;
2782:../uvc.c      **** 			glEp0Buffer[1] = 0;
2783:../uvc.c      **** 			CyU3PUsbSendEP0Data(2, (uint8_t *)glEp0Buffer);
2784:../uvc.c      **** 			break;
2785:../uvc.c      **** 		case CY_FX_USB_UVC_GET_CUR_REQ://TODO for still trigger control
2786:../uvc.c      **** 			if (1 || usbSpeed == CY_U3P_SUPER_SPEED)// support both SS and HS
2787:../uvc.c      **** 			{
2788:../uvc.c      **** 				CyU3PUsbSendEP0Data(CY_FX_UVC_MAX_PROBE_SETTING, (uint8_t *)glProbeCtrl);
2789:../uvc.c      **** 			}
2790:../uvc.c      **** 			else
2791:../uvc.c      **** 			{
2792:../uvc.c      **** 				CyU3PUsbSendEP0Data(CY_FX_UVC_MAX_PROBE_SETTING, (uint8_t *)glProbeCtrl20);
2793:../uvc.c      **** 			}
2794:../uvc.c      **** 			break;
2795:../uvc.c      **** 		case CY_FX_USB_UVC_SET_CUR_REQ:
2796:../uvc.c      **** 			/* The host has selected the parameters for the video stream. Check the desired
2797:../uvc.c      **** 			resolution settings, configure the sensor and start the video stream.
2798:../uvc.c      **** 			*/
2799:../uvc.c      **** 			apiRetStatus = CyU3PUsbGetEP0Data(CY_FX_UVC_MAX_PROBE_SETTING_ALIGNED,
2800:../uvc.c      **** 				glCommitCtrl, &readCount);
2801:../uvc.c      **** 			if (apiRetStatus == CY_U3P_SUCCESS)
2802:../uvc.c      **** 			{
2803:../uvc.c      **** 	#if 1
2804:../uvc.c      **** 				/* We can start still streaming video now. */
2805:../uvc.c      **** 				apiRetStatus = CyU3PEventSet(&glFxUVCEvent, VD_FX_UVC_STIL_EVENT, CYU3P_EVENT_OR);
2806:../uvc.c      **** 				if (apiRetStatus != CY_U3P_SUCCESS)
2807:../uvc.c      **** 				{
2808:../uvc.c      **** 					CyU3PDebugPrint(4, "Set CY_FX_UVC_STIL_EVENT failed %x\n", apiRetStatus);
2809:../uvc.c      **** 				}
2810:../uvc.c      **** 	#endif
2811:../uvc.c      **** 				else{
2812:../uvc.c      **** 					stiflag = 0xF0;//set still trigger flag
2813:../uvc.c      **** 					//stillcont = 0;
2814:../uvc.c      **** 				}
2815:../uvc.c      **** 				CyU3PDebugPrint(4, "Get UVC still trigger control %d %d %d\r\n", readCount, glCommitCtrl[0], gl
2816:../uvc.c      **** 			}
2817:../uvc.c      **** 			else{
2818:../uvc.c      **** 				CyU3PDebugPrint(4, "UVC still trigger control fail %d %d\r\n", readCount, glCommitCtrl[0]);
2819:../uvc.c      **** 				CyU3PUsbStall(0, CyTrue, CyFalse);
2820:../uvc.c      **** 			}
2821:../uvc.c      **** 			break;
2822:../uvc.c      **** 
2823:../uvc.c      **** 		default:
2824:../uvc.c      **** 			CyU3PUsbStall(0, CyTrue, CyFalse);
2825:../uvc.c      **** 			break;
2826:../uvc.c      **** 		}
2827:../uvc.c      **** 		break;
2828:../uvc.c      **** 
2829:../uvc.c      **** 	default:
2830:../uvc.c      **** 		CyU3PUsbStall(0, CyTrue, CyFalse);
2831:../uvc.c      **** 		break;
2832:../uvc.c      **** 	}
2833:../uvc.c      **** #endif
2834:../uvc.c      **** 
2835:../uvc.c      **** 	/* the new merge*/
2836:../uvc.c      **** 		{
2837:../uvc.c      **** 			/* GET_CUR Request Handling Probe/Commit Controls*/
2838:../uvc.c      **** 			if ((bRequest == CY_FX_USB_UVC_GET_CUR_REQ) || (bRequest == CY_FX_USB_UVC_GET_MIN_REQ) || (bRequ
2839:../uvc.c      **** 			{
2840:../uvc.c      **** 				isHandled = CyTrue;
2841:../uvc.c      **** 				if ((wValue == CY_FX_UVC_PROBE_CTRL) || (wValue == CY_FX_UVC_COMMIT_CTRL))
2842:../uvc.c      **** 				{
2843:../uvc.c      **** 					//TODO Modify this "glProbeCtrl" according to the Supported Preview Resolutions that are suppo
2844:../uvc.c      **** 
2845:../uvc.c      **** 					/* Host requests for probe data of 34 bytes (UVC 1.1) or 26 Bytes (UVC1.0). Send it over EP0. 
2846:../uvc.c      **** 					if (CyU3PUsbGetSpeed() == CY_U3P_SUPER_SPEED)
2847:../uvc.c      **** 					{
2848:../uvc.c      **** 						if (glCurrentFrameIndex == 4)
2849:../uvc.c      **** 						{
2850:../uvc.c      **** 							CyU3PMemCopy(glProbeCtrl, (uint8_t *)gl5MpProbeCtrl, CY_FX_UVC_MAX_PROBE_SETTING);
2851:../uvc.c      **** 						}
2852:../uvc.c      **** 						/* Probe Control for 1280x720 stream*/
2853:../uvc.c      **** 						else if (glCurrentFrameIndex == 3)
2854:../uvc.c      **** 						{
2855:../uvc.c      **** 							CyU3PMemCopy(glProbeCtrl, (uint8_t *)gl720pProbeCtrl, CY_FX_UVC_MAX_PROBE_SETTING);
2856:../uvc.c      **** 						}
2857:../uvc.c      **** 						/* Probe Control for 640x480 stream*/
2858:../uvc.c      **** 						else  if (glCurrentFrameIndex == 2)
2859:../uvc.c      **** 						{
2860:../uvc.c      **** 							CyU3PMemCopy(glProbeCtrl, (uint8_t *)glVga60ProbeCtrl, CY_FX_UVC_MAX_PROBE_SETTING);
2861:../uvc.c      **** 						}
2862:../uvc.c      **** 						/* Probe Control for 1920x1080 stream*/
2863:../uvc.c      **** 						else  if (glCurrentFrameIndex == 1)
2864:../uvc.c      **** 						{
2865:../uvc.c      **** 							CyU3PMemCopy(glProbeCtrl, (uint8_t *)gl1080pProbeCtrl, CY_FX_UVC_MAX_PROBE_SETTING);
2866:../uvc.c      **** 						}
2867:../uvc.c      **** 
2868:../uvc.c      **** 					}
2869:../uvc.c      **** 					else if (CyU3PUsbGetSpeed() == CY_U3P_HIGH_SPEED)
2870:../uvc.c      **** 					{
2871:../uvc.c      **** 						/* Probe Control for 640x480 stream*/
2872:../uvc.c      **** 						CyU3PMemCopy(glProbeCtrl, (uint8_t *)glVga30ProbeCtrl, CY_FX_UVC_MAX_PROBE_SETTING);
2873:../uvc.c      **** 					}
2874:../uvc.c      **** 					else /* FULL-Speed*/
2875:../uvc.c      **** 					{
2876:../uvc.c      **** 						CyU3PDebugPrint(4, "\n\rFull Speed Not Supported!");
2877:../uvc.c      **** 					}
2878:../uvc.c      **** 
2879:../uvc.c      **** 					status = CyU3PUsbSendEP0Data(CY_FX_UVC_MAX_PROBE_SETTING, glProbeCtrl);
2880:../uvc.c      **** 					if (status != CY_U3P_SUCCESS)
2881:../uvc.c      **** 					{
2882:../uvc.c      **** 						CyU3PDebugPrint(4, "\n\rUSBStpCB:GET_CUR:SendEP0Data Err = 0x%x", status);
2883:../uvc.c      **** 					}
2884:../uvc.c      **** 				}
2885:../uvc.c      **** 				else if ((wValue == VD_FX_UVC_STILL_PROB_CTRL) || (wValue == VD_FX_UVC_STILL_COMIT_CTRL))
2886:../uvc.c      **** 				{
2887:../uvc.c      **** 					if (CyU3PUsbGetSpeed() == CY_U3P_SUPER_SPEED)
2888:../uvc.c      **** 					{
2889:../uvc.c      **** 						status = CyU3PUsbSendEP0Data(CY_FX_UVC_MAX_STILL_PROBE_SETTING, glStillProbeCtrl);
2890:../uvc.c      **** 						if (status != CY_U3P_SUCCESS)
2891:../uvc.c      **** 						{
2892:../uvc.c      **** 							CyU3PDebugPrint(4, "\n\rUSBStpCB:GET_CUR:SendEP0Data Err = 0x%x", status);
2893:../uvc.c      **** 						}
2894:../uvc.c      **** 					}
2895:../uvc.c      **** 				}
2896:../uvc.c      **** 			}
2897:../uvc.c      **** 			/* SET_CUR request handling Probe/Commit controls */
2898:../uvc.c      **** 			else if (bRequest == CY_FX_USB_UVC_SET_CUR_REQ)
2899:../uvc.c      **** 			{
2900:../uvc.c      **** 				isHandled = CyTrue;
2901:../uvc.c      **** 				if ((wValue == CY_FX_UVC_PROBE_CTRL) || (wValue == CY_FX_UVC_COMMIT_CTRL))
2902:../uvc.c      **** 				{
2903:../uvc.c      **** 					/* Get the UVC probe/commit control data from EP0 */
2904:../uvc.c      **** 					status = CyU3PUsbGetEP0Data(CY_FX_UVC_MAX_PROBE_SETTING_ALIGNED,
2905:../uvc.c      **** 						glCommitCtrl, &readCount);
2906:../uvc.c      **** 					if (status != CY_U3P_SUCCESS)
2907:../uvc.c      **** 					{
2908:../uvc.c      **** 						CyU3PDebugPrint(4, "\n\rUSBStpCB:SET_CUR:GetEP0Data Err = 0x%x.", status);
2909:../uvc.c      **** 					}
2910:../uvc.c      **** 					/* Check the read count. Expecting a count of CX3_UVC_MAX_PROBE_SETTING bytes. */
2911:../uvc.c      **** 					if (readCount > (uint16_t)CY_FX_UVC_MAX_PROBE_SETTING)
2912:../uvc.c      **** 					{
2913:../uvc.c      **** 						CyU3PDebugPrint(4, "\n\rUSBStpCB:Invalid SET_CUR Rqt Len.");
2914:../uvc.c      **** 					}
2915:../uvc.c      **** 					else
2916:../uvc.c      **** 					{
2917:../uvc.c      **** 						/* Set Probe Control */
2918:../uvc.c      **** 						if (wValue == CY_FX_UVC_PROBE_CTRL)
2919:../uvc.c      **** 						{
2920:../uvc.c      **** 							glCurrentFrameIndex = glCommitCtrl[3];
2921:../uvc.c      **** 						}
2922:../uvc.c      **** 						/* Set Commit Control and Start Streaming*/
2923:../uvc.c      **** 						else if (wValue == CY_FX_UVC_COMMIT_CTRL)
2924:../uvc.c      **** 						{
2925:../uvc.c      **** 
2926:../uvc.c      **** 							if ((glcommitcount == 0) || (glcheckframe != glCommitCtrl[3]))
2927:../uvc.c      **** 							{
2928:../uvc.c      **** 								glcommitcount++;
2929:../uvc.c      **** 								glcheckframe = glCommitCtrl[3];
2930:../uvc.c      **** 								glCurrentFrameIndex = glCommitCtrl[3];
2931:../uvc.c      **** 								glFrameIndexToSet = glCurrentFrameIndex;
2932:../uvc.c      **** 								glPreviewStarted = CyTrue;
2933:../uvc.c      **** 
2934:../uvc.c      **** 								//TODO Change this function with "Sensor Specific" function to write the sensor settings & 
2935:../uvc.c      **** 								//	esSetCameraResolution(glCurrentFrameIndex);
2936:../uvc.c      **** 								//esSetCameraResolution(glCommitCtrl[3]);//TODO the camera resolution calling
2937:../uvc.c      **** 
2938:../uvc.c      **** 								if (glIsApplnActive)
2939:../uvc.c      **** 								{
2940:../uvc.c      **** 									if (glcommitcount)
2941:../uvc.c      **** 										glIsClearFeature = CyFalse;
2942:../uvc.c      **** 									else
2943:../uvc.c      **** 										glIsClearFeature = CyTrue;
2944:../uvc.c      **** 
2945:../uvc.c      **** 									esUVCUvcApplnStop();
2946:../uvc.c      **** 								}
2947:../uvc.c      **** 								esUVCUvcApplnStart();
2948:../uvc.c      **** 							}
2949:../uvc.c      **** 						}
2950:../uvc.c      **** 					}
2951:../uvc.c      **** 				}
2952:../uvc.c      **** 				else if ((wValue == VD_FX_UVC_STILL_PROB_CTRL) || (wValue == VD_FX_UVC_STILL_COMIT_CTRL))
2953:../uvc.c      **** 				{
2954:../uvc.c      **** 					/* Get the UVC STILL probe/commit control data from EP0 */
2955:../uvc.c      **** 					status = CyU3PUsbGetEP0Data(CY_FX_MAX_STILL_PROBE_SETTING_ALIGNED, glStillCommitCtrl, &readCou
2956:../uvc.c      **** 					if (status != CY_U3P_SUCCESS)
2957:../uvc.c      **** 					{
2958:../uvc.c      **** 						CyU3PDebugPrint(4, "\n\rUSBStpCB:SET_CUR:GetEP0Data Err = 0x%x.", status);
2959:../uvc.c      **** 					}
2960:../uvc.c      **** 					/* Check the read count. Expecting a count of CX3_UVC_MAX_PROBE_SETTING bytes. */
2961:../uvc.c      **** 					if (readCount > (uint16_t)CY_FX_UVC_MAX_STILL_PROBE_SETTING)
2962:../uvc.c      **** 					{
2963:../uvc.c      **** 						CyU3PDebugPrint(4, "\n\rUSBStpCB:Invalid SET_CUR Rqt Len.");
2964:../uvc.c      **** 					}
2965:../uvc.c      **** 					else
2966:../uvc.c      **** 					{
2967:../uvc.c      **** 						/* Set Probe Control */
2968:../uvc.c      **** 						if (wValue == VD_FX_UVC_STILL_PROB_CTRL)
2969:../uvc.c      **** 						{
2970:../uvc.c      **** 							glCurrentStillFrameIndex = glStillCommitCtrl[1];
2971:../uvc.c      **** 						}
2972:../uvc.c      **** 						/* Set Commit Control and Start Streaming*/
2973:../uvc.c      **** 						else if (wValue == VD_FX_UVC_STILL_COMIT_CTRL)
2974:../uvc.c      **** 						{
2975:../uvc.c      **** 							glCurrentStillFrameIndex = glStillCommitCtrl[1];
2976:../uvc.c      **** 						}
2977:../uvc.c      **** 					}
2978:../uvc.c      **** 
2979:../uvc.c      **** 				}
2980:../uvc.c      **** 				else if (wValue == VD_FX_UVC_STILL_TRIG_CTRL)
2981:../uvc.c      **** 				{
2982:../uvc.c      **** 					status = CyU3PUsbGetEP0Data(CY_FX_STILL_TRIGGER_ALIGNED, &glStillTriggerCtrl, &readCount);
2983:../uvc.c      **** 					if (status != CY_U3P_SUCCESS)
2984:../uvc.c      **** 					{
2985:../uvc.c      **** 						CyU3PDebugPrint(4, "\n\rUSBStpCB:SET_CUR:GetEP0Data Err = 0x%x.", status);
2986:../uvc.c      **** 					}
2987:../uvc.c      **** 					/* Check the read count. Expecting a count of CX3_UVC_MAX_PROBE_SETTING bytes. */
2988:../uvc.c      **** 					if (readCount > (uint16_t)CY_FX_STILL_TRIGGER_COUNT)
2989:../uvc.c      **** 					{
2990:../uvc.c      **** 						CyU3PDebugPrint(4, "\n\rUSBStpCB:Invalid SET_CUR Rqt Len.");
2991:../uvc.c      **** 					}
2992:../uvc.c      **** 					else
2993:../uvc.c      **** 					{
2994:../uvc.c      **** 						if (glStillTriggerCtrl == 0x01)
2995:../uvc.c      **** 						{
2996:../uvc.c      **** 							glStillSkip = 3;
2997:../uvc.c      **** 							glStillCaptureStart = CyTrue;
2998:../uvc.c      **** 						}
2999:../uvc.c      **** 					}
3000:../uvc.c      **** 				}
3001:../uvc.c      **** 			}
3002:../uvc.c      **** 			else
3003:../uvc.c      **** 			{
3004:../uvc.c      **** 				/* Mark with error. */
3005:../uvc.c      **** 				status = CY_U3P_ERROR_FAILURE;
3006:../uvc.c      **** 			}
3007:../uvc.c      **** 		}
3008:../uvc.c      **** }
3009:../uvc.c      **** 
3010:../uvc.c      **** 
3011:../uvc.c      **** 	/*
3012:../uvc.c      ****  * Entry function for the UVC control request processing thread.
3013:../uvc.c      ****  */
3014:../uvc.c      **** void
3015:../uvc.c      **** UVCAppEP0Thread_Entry (
3016:../uvc.c      ****         uint32_t input)
3017:../uvc.c      **** {
3018:../uvc.c      ****     uint32_t eventMask = (CY_FX_UVC_VIDEO_CONTROL_REQUEST_EVENT | CY_FX_UVC_VIDEO_STREAM_REQUEST_EV
3019:../uvc.c      ****     uint32_t eventFlag;
3020:../uvc.c      **** 	CyBool_t value;
3021:../uvc.c      **** 	CyBool_t *valueptr = &value;
3022:../uvc.c      **** 
3023:../uvc.c      **** 
3024:../uvc.c      **** #ifdef USB_DEBUG_INTERFACE
3025:../uvc.c      ****     CyU3PReturnStatus_t apiRetStatus;
3026:../uvc.c      ****     CyU3PDmaBuffer_t    dmaInfo;
3027:../uvc.c      **** 
3028:../uvc.c      ****     eventMask |= CY_FX_USB_DEBUG_CMD_EVENT;
3029:../uvc.c      **** #endif
3030:../uvc.c      **** 
3031:../uvc.c      ****     /* for interrupt status test */
3032:../uvc.c      ****     CyU3PReturnStatus_t apiRetStatus;
3033:../uvc.c      ****     eventMask |= VD_FX_INT_STA_EVENT;
3034:../uvc.c      ****     CyU3PDmaBuffer_t    interStabuf;
3035:../uvc.c      **** 
3036:../uvc.c      ****     for (;;)
3037:../uvc.c      ****     {
3038:../uvc.c      ****         /* Wait for a Video control or streaming related request on the control endpoint. */
3039:../uvc.c      ****         if (CyU3PEventGet (&glFxUVCEvent, eventMask, CYU3P_EVENT_OR_CLEAR, &eventFlag,
3040:../uvc.c      ****                     CYU3P_WAIT_FOREVER) == CY_U3P_SUCCESS)
3041:../uvc.c      ****         {
3042:../uvc.c      ****             /* If this is the first request received during this connection, query the connection s
3043:../uvc.c      ****             if (!isUsbConnected)
3044:../uvc.c      ****             {
3045:../uvc.c      ****                 usbSpeed = CyU3PUsbGetSpeed ();
3046:../uvc.c      ****                 if (usbSpeed != CY_U3P_NOT_CONNECTED)
3047:../uvc.c      ****                 {
3048:../uvc.c      ****                     isUsbConnected = CyTrue;
3049:../uvc.c      ****                 }
3050:../uvc.c      ****             }
3051:../uvc.c      **** //#ifdef DbgInfo
3052:../uvc.c      **** #if 0
3053:../uvc.c      ****             if((eventFlag & eventMask) & ~VD_FX_INT_STA_EVENT)
3054:../uvc.c      ****             CyU3PDebugPrint (4, "USB speed = %d evenflag = 0x%x bmReqType = 0x%x\r\n"
3055:../uvc.c      ****             		"bRequest = 0x%x wValue = 0x%x wIndex = 0x%x wLength = 0x%x isflag 0x%x\r\n",
3056:../uvc.c      ****             		usbSpeed, eventFlag, bmReqType, bRequest, wValue, wIndex, wLength, 0/*isFlag*/); /* a
3057:../uvc.c      ****             //CyU3PDebugPrint (4, "fb = %d pb = %d pbc = %d pbcp = %d\r\n", fbbak, pbbak, pbcbak, p
3058:../uvc.c      ****             //fbbak=0;pbbak=0;pbcbak=0;pbcpbak=0;
3059:../uvc.c      **** #endif
3060:../uvc.c      **** //#endif
3061:../uvc.c      ****             if (eventFlag & CY_FX_UVC_VIDEO_CONTROL_REQUEST_EVENT)
3062:../uvc.c      ****             {
3063:../uvc.c      ****             	switch ((wIndex >> 8))
3064:../uvc.c      ****                 {
3065:../uvc.c      **** 
3066:../uvc.c      ****                     case CY_FX_UVC_PROCESSING_UNIT_ID:
3067:../uvc.c      ****                         UVCHandleProcessingUnitRqts ();
3068:../uvc.c      ****                         break;
3069:../uvc.c      **** 
3070:../uvc.c      ****                     case CY_FX_UVC_CAMERA_TERMINAL_ID:
3071:../uvc.c      ****                         ;//UVCHandleCameraTerminalRqts ();
3072:../uvc.c      ****                         break;
3073:../uvc.c      **** 
3074:../uvc.c      ****                     case CY_FX_UVC_INTERFACE_CTRL:
3075:../uvc.c      ****                         UVCHandleInterfaceCtrlRqts ();
3076:../uvc.c      ****                         break;
3077:../uvc.c      **** 
3078:../uvc.c      ****                     case CY_FX_UVC_EXTENSION_UNIT_ID:
3079:../uvc.c      ****                         UVCHandleExtensionUnitRqts ();
3080:../uvc.c      ****                         break;
3081:../uvc.c      **** 
3082:../uvc.c      ****                     default:
3083:../uvc.c      ****                         /* Unsupported request. Fail by stalling the control endpoint. */
3084:../uvc.c      ****                         CyU3PUsbStall (0, CyTrue, CyFalse);
3085:../uvc.c      ****                         break;
3086:../uvc.c      ****                 }
3087:../uvc.c      ****             }
3088:../uvc.c      **** 
3089:../uvc.c      ****             if (eventFlag & CY_FX_UVC_VIDEO_STREAM_REQUEST_EVENT)
3090:../uvc.c      ****             {
3091:../uvc.c      ****                 //CyU3PDebugPrint (4, "start a stream req. ctrl. wIndex 0x%x\r\n", wIndex);
3092:../uvc.c      **** 
3093:../uvc.c      ****                 if (wIndex != CY_FX_UVC_STREAM_INTERFACE)
3094:../uvc.c      ****                 {
3095:../uvc.c      ****                     CyU3PUsbStall (0, CyTrue, CyFalse);
3096:../uvc.c      ****                 }
3097:../uvc.c      ****                 else
3098:../uvc.c      ****                 {
3099:../uvc.c      ****                     UVCHandleVideoStreamingRqts ();
3100:../uvc.c      ****                 }
3101:../uvc.c      ****             }
3102:../uvc.c      **** 
3103:../uvc.c      ****             /* handle interrupt status event */
3104:../uvc.c      ****             if (eventFlag & VD_FX_INT_STA_EVENT)
3105:../uvc.c      ****             {
3106:../uvc.c      **** 
3107:../uvc.c      ****             	//CyU3PDebugPrint (4, "start a interrupt req. ctrl. snap flag 0x%x\r\n", snapButFlag);
3108:../uvc.c      ****             	/** preparing interrupt status data **/
3109:../uvc.c      ****             	CyU3PGpioSimpleGetValue (SENSOR_SNAPSHOT_GPIO, valueptr);// get button value 1:release
3110:../uvc.c      **** 
3111:../uvc.c      **** 				//CyU3PDebugPrint (4, "The interrupt event %d %d\r\n", testSnap, snapButFlag);
3112:../uvc.c      **** 
3113:../uvc.c      **** #if 1 //for real button
3114:../uvc.c      **** 				if(value&&(!snapButFlag)){
3115:../uvc.c      **** 					//CyU3PDebugPrint (4, "The interrupt event %d %d\r\n", testSnap, snapButFlag);
3116:../uvc.c      **** 					glInterStaBuffer[0] = 0x02;  //VS interface
3117:../uvc.c      **** 					glInterStaBuffer[1] = 0x01;  //number of VS interface
3118:../uvc.c      **** 					glInterStaBuffer[2] = 0x00;
3119:../uvc.c      **** 					glInterStaBuffer[3] = 0x00; //button release
3120:../uvc.c      **** 
3121:../uvc.c      **** 					interStabuf.buffer = glInterStaBuffer;
3122:../uvc.c      **** 					interStabuf.size   = 1024;
3123:../uvc.c      **** 					interStabuf.status = 0;
3124:../uvc.c      **** 
3125:../uvc.c      **** 					interStabuf.count = 4;
3126:../uvc.c      **** 
3127:../uvc.c      **** 					/** wait unitll the responses has gone out **/
3128:../uvc.c      **** 					CyU3PDmaChannelWaitForCompletion(&glChHandleInterStat, CYU3P_WAIT_FOREVER);
3129:../uvc.c      **** 
3130:../uvc.c      **** 					/** send a interrupt status data **/
3131:../uvc.c      **** 					apiRetStatus = CyU3PDmaChannelSetupSendBuffer (&glChHandleInterStat, &interStabuf);
3132:../uvc.c      **** 					if (apiRetStatus != CY_U3P_SUCCESS)
3133:../uvc.c      **** 					{
3134:../uvc.c      **** 						CyU3PDebugPrint (4, "Failed to send interrupt status, Error code = %d\r\n", apiRetStatus);
3135:../uvc.c      **** 						CyFxAppErrorHandler (apiRetStatus);
3136:../uvc.c      **** 					}
3137:../uvc.c      **** 					snapButFlag = 1;//snap button is masked.
3138:../uvc.c      **** 				}else if(snapButFlag&&(!value)){
3139:../uvc.c      **** 					//CyU3PDebugPrint (4, "The interrupt event %d %d\r\n", testSnap, snapButFlag);
3140:../uvc.c      **** 					glInterStaBuffer[0] = 0x02;  //VS interface
3141:../uvc.c      **** 					glInterStaBuffer[1] = 0x01;  //number of VS interface
3142:../uvc.c      **** 					glInterStaBuffer[2] = 0x00;
3143:../uvc.c      **** 					glInterStaBuffer[3] = 0x01; //button release
3144:../uvc.c      **** 
3145:../uvc.c      **** 					interStabuf.buffer = glInterStaBuffer;
3146:../uvc.c      **** 					interStabuf.size   = 1024;
3147:../uvc.c      **** 					interStabuf.status = 0;
3148:../uvc.c      **** 
3149:../uvc.c      **** 					interStabuf.count = 4;
3150:../uvc.c      **** 
3151:../uvc.c      **** 					/** wait unitll the responses has gone out **/
3152:../uvc.c      **** 					CyU3PDmaChannelWaitForCompletion(&glChHandleInterStat, CYU3P_WAIT_FOREVER);
3153:../uvc.c      **** 
3154:../uvc.c      **** 					/** send a interrupt status data **/
3155:../uvc.c      **** 					apiRetStatus = CyU3PDmaChannelSetupSendBuffer (&glChHandleInterStat, &interStabuf);
3156:../uvc.c      **** 					if (apiRetStatus != CY_U3P_SUCCESS)
3157:../uvc.c      **** 					{
3158:../uvc.c      **** 						CyU3PDebugPrint (4, "Failed to send interrupt status, Error code = %d\r\n", apiRetStatus);
3159:../uvc.c      **** 						CyFxAppErrorHandler (apiRetStatus);
3160:../uvc.c      **** 					}
3161:../uvc.c      **** 
3162:../uvc.c      **** 					snapButFlag = 0; //snap button is not masked.
3163:../uvc.c      **** 					stiflag = 0xFF;
3164:../uvc.c      **** 				}
3165:../uvc.c      **** #else			//for botton simulation
3166:../uvc.c      **** 				if(snapButFlag == 0x0f){
3167:../uvc.c      **** 					//CyU3PDebugPrint (4, "The interrupt event %d %d\r\n", testSnap, snapButFlag);
3168:../uvc.c      **** 					glInterStaBuffer[0] = 0x02;  //VS interface
3169:../uvc.c      **** 					glInterStaBuffer[1] = 0x01;  //number of VS interface
3170:../uvc.c      **** 					glInterStaBuffer[2] = 0x00;
3171:../uvc.c      **** 					glInterStaBuffer[3] = 0x00; //button release
3172:../uvc.c      **** 
3173:../uvc.c      **** 					interStabuf.buffer = glInterStaBuffer;
3174:../uvc.c      **** 					interStabuf.size   = 1024;
3175:../uvc.c      **** 					interStabuf.status = 0;
3176:../uvc.c      **** 
3177:../uvc.c      **** 					interStabuf.count = 4;
3178:../uvc.c      **** 
3179:../uvc.c      **** 					/** wait unitll the responses has gone out **/
3180:../uvc.c      **** 					CyU3PDmaChannelWaitForCompletion(&glChHandleInterStat, CYU3P_WAIT_FOREVER);
3181:../uvc.c      **** 
3182:../uvc.c      **** 					/** send a interrupt status data **/
3183:../uvc.c      **** 					apiRetStatus = CyU3PDmaChannelSetupSendBuffer (&glChHandleInterStat, &interStabuf);
3184:../uvc.c      **** 					//CyU3PDebugPrint (4, "send interrupt status\r\n");
3185:../uvc.c      **** 					if (apiRetStatus != CY_U3P_SUCCESS)
3186:../uvc.c      **** 					{
3187:../uvc.c      **** 						CyU3PDebugPrint (4, "Failed to send interrupt status, Error code = %d\r\n", apiRetStatus);
3188:../uvc.c      **** 						CyFxAppErrorHandler (apiRetStatus);
3189:../uvc.c      **** 					}
3190:../uvc.c      **** 						SensorSetControl(0x5, 0x30, 0); //mirror set to 0
3191:../uvc.c      **** 
3192:../uvc.c      **** 						snapButFlag = 1;//snap button is masked.
3193:../uvc.c      **** 				}else if(!snapButFlag){
3194:../uvc.c      **** 					//CyU3PDebugPrint (4, "The interrupt event %d %d\r\n", testSnap, snapButFlag);
3195:../uvc.c      **** 					glInterStaBuffer[0] = 0x02;  //VS interface
3196:../uvc.c      **** 					glInterStaBuffer[1] = 0x01;  //number of VS interface
3197:../uvc.c      **** 					glInterStaBuffer[2] = 0x00;
3198:../uvc.c      **** 					glInterStaBuffer[3] = 0x01; //button release
3199:../uvc.c      **** 
3200:../uvc.c      **** 					interStabuf.buffer = glInterStaBuffer;
3201:../uvc.c      **** 					interStabuf.size   = 1024;
3202:../uvc.c      **** 					interStabuf.status = 0;
3203:../uvc.c      **** 
3204:../uvc.c      **** 					interStabuf.count = 4;
3205:../uvc.c      **** 
3206:../uvc.c      **** 					/** wait unitll the responses has gone out **/
3207:../uvc.c      **** 					CyU3PDmaChannelWaitForCompletion(&glChHandleInterStat, CYU3P_WAIT_FOREVER);
3208:../uvc.c      **** 
3209:../uvc.c      **** 					/** send a interrupt status data **/
3210:../uvc.c      **** 					apiRetStatus = CyU3PDmaChannelSetupSendBuffer (&glChHandleInterStat, &interStabuf);
3211:../uvc.c      **** 					//CyU3PDebugPrint (4, "send interrupt status\r\n");
3212:../uvc.c      **** 					if (apiRetStatus != CY_U3P_SUCCESS)
3213:../uvc.c      **** 					{
3214:../uvc.c      **** 						CyU3PDebugPrint (4, "Failed to send interrupt status, Error code = %d\r\n", apiRetStatus);
3215:../uvc.c      **** 						CyFxAppErrorHandler (apiRetStatus);
3216:../uvc.c      **** 					}
3217:../uvc.c      **** 
3218:../uvc.c      **** 					SensorSetControl(0x5, 0x30, 1); //mirror set to 1
3219:../uvc.c      **** 					snapButFlag = 1; //snap button is not masked.
3220:../uvc.c      **** 				}
3221:../uvc.c      **** #endif
3222:../uvc.c      **** 
3223:../uvc.c      ****             }
3224:../uvc.c      **** 
3225:../uvc.c      **** 
3226:../uvc.c      **** #ifdef USB_DEBUG_INTERFACE
3227:../uvc.c      ****             if (eventFlag & CY_FX_USB_DEBUG_CMD_EVENT)
3228:../uvc.c      ****             {
3229:../uvc.c      ****                 /* Get the command buffer */
3230:../uvc.c      ****                 apiRetStatus = CyU3PDmaChannelGetBuffer (&glDebugCmdChannel, &dmaInfo, CYU3P_WAIT_F
3231:../uvc.c      ****                 if (apiRetStatus != CY_U3P_SUCCESS)
3232:../uvc.c      ****                 {
3233:../uvc.c      ****                     CyU3PDebugPrint (4, "Failed to receive debug command, Error code = %d\r\n", api
3234:../uvc.c      ****                     CyFxAppErrorHandler (apiRetStatus);
3235:../uvc.c      ****                 }
3236:../uvc.c      **** 
3237:../uvc.c      ****                 /* Decode the command from the command buffer, error checking is not implemented,
3238:../uvc.c      ****                  * so the command is expected to be correctly sent from the host application. First
3239:../uvc.c      ****                  * read (0x00) or write (0x01) command. Second and third bytes are register address
3240:../uvc.c      ****                  * register address low byte. For read commands the fourth byte (optional) can be N
3241:../uvc.c      ****                  * registers in sequence. Response first byte is status (0=Pass, !0=Fail) followed 
3242:../uvc.c      ****                  * register value high byte and register value low byte.
3243:../uvc.c      ****                  */
3244:../uvc.c      ****                 CyU3PDebugPrint (4, "Debug interface conut %d data %d %d %d\r\n", dmaInfo.count, dm
3245:../uvc.c      ****                 if (dmaInfo.buffer[0] == 0)
3246:../uvc.c      ****                 {
3247:../uvc.c      ****                     if (dmaInfo.count == 3)
3248:../uvc.c      ****                     {
3249:../uvc.c      ****                         /*glDebugRspBuffer[0] = SensorRead2B (SENSOR_ADDR_RD, dmaInfo.buffer[1], dm
3250:../uvc.c      ****                         		(glDebugRspBuffer+1));*/
3251:../uvc.c      ****                         dmaInfo.count = 3;
3252:../uvc.c      ****                     }
3253:../uvc.c      ****                     else if (dmaInfo.count == 4)
3254:../uvc.c      ****                     {
3255:../uvc.c      ****                         if (dmaInfo.buffer[3] > 0)
3256:../uvc.c      ****                         {
3257:../uvc.c      ****                                 glDebugRspBuffer[0] = SensorRead (SENSOR_ADDR_RD, dmaInfo.buffer[1]
3258:../uvc.c      ****                                 		(dmaInfo.buffer[3]*2), (glDebugRspBuffer+1));
3259:../uvc.c      ****                         }
3260:../uvc.c      ****                         dmaInfo.count = dmaInfo.buffer[3]*2+1;
3261:../uvc.c      ****                     }
3262:../uvc.c      ****                     CyU3PDebugPrint (4, "Debug responsR conut %d data %d %d %d\r\n", dmaInfo.count,
3263:../uvc.c      ****                 }
3264:../uvc.c      ****                 /*  For write commands, the register address is followed by N pairs (N>0) of regist
3265:../uvc.c      ****                  *  and register value low byte to write in sequence. Response first byte is status
3266:../uvc.c      ****                  *  followed by N pairs of register value high byte and register value low byte aft
3267:../uvc.c      ****                  */
3268:../uvc.c      ****                 else if (dmaInfo.buffer[0] == 1)
3269:../uvc.c      ****                 {
3270:../uvc.c      ****                         /*glDebugRspBuffer[0] = SensorWrite (SENSOR_ADDR_WR, dmaInfo.buffer[1], dma
3271:../uvc.c      ****                         		(dmaInfo.count-3), (dmaInfo.buffer+3));  original one*/
3272:../uvc.c      ****                         glDebugRspBuffer[0] = SensorWrite2B (SENSOR_ADDR_WR, dmaInfo.buffer[1], dma
3273:../uvc.c      ****                                                 		0x00, dmaInfo.buffer[3]); //additional debug
3274:../uvc.c      ****                         CyU3PDebugPrint (4, "Debug write %d data %d %d %d\r\n", dmaInfo.count, dmaI
3275:../uvc.c      ****                         if (glDebugRspBuffer[0] != CY_U3P_SUCCESS)
3276:../uvc.c      ****                         	break;
3277:../uvc.c      ****                         /*glDebugRspBuffer[0] = SensorRead (SENSOR_ADDR_RD, dmaInfo.buffer[1], dmaI
3278:../uvc.c      ****                         		(dmaInfo.count-3), (glDebugRspBuffer+1));
3279:../uvc.c      ****                         if (glDebugRspBuffer[0] != CY_U3P_SUCCESS)
3280:../uvc.c      ****                         	break;*/
3281:../uvc.c      ****                     dmaInfo.count -= 2;
3282:../uvc.c      ****                 }
3283:../uvc.c      ****                 /* Default case, prepare buffer for loop back command in response */
3284:../uvc.c      ****                 else
3285:../uvc.c      ****                 {
3286:../uvc.c      ****                    /* For now, we just copy the command into the response buffer; and send it back 
3287:../uvc.c      ****                       USB host. This can be expanded to include I2C transfers. */
3288:../uvc.c      ****                     CyU3PMemCopy (glDebugRspBuffer, dmaInfo.buffer, dmaInfo.count);
3289:../uvc.c      ****                     CyU3PDebugPrint (4, "Debug respons conut %d data %d %d %d\r\n", dmaInfo.count, 
3290:../uvc.c      ****                 }
3291:../uvc.c      **** 
3292:../uvc.c      ****                 dmaInfo.buffer = glDebugRspBuffer;
3293:../uvc.c      ****                 dmaInfo.size   = 1024;
3294:../uvc.c      ****                 dmaInfo.status = 0;
3295:../uvc.c      **** 
3296:../uvc.c      ****                 /* Free the command buffer to receive the next command. */
3297:../uvc.c      ****                 apiRetStatus = CyU3PDmaChannelDiscardBuffer (&glDebugCmdChannel);
3298:../uvc.c      ****                 if (apiRetStatus != CY_U3P_SUCCESS)
3299:../uvc.c      ****                 {
3300:../uvc.c      ****                     CyU3PDebugPrint (4, "Failed to free up command OUT EP buffer, Error code = %d\r
3301:../uvc.c      ****                     CyFxAppErrorHandler (apiRetStatus);
3302:../uvc.c      ****                 }
3303:../uvc.c      **** 
3304:../uvc.c      ****                 /* Wait until the response has gone out. */
3305:../uvc.c      ****                 CyU3PDmaChannelWaitForCompletion (&glDebugRspChannel, CYU3P_WAIT_FOREVER);
3306:../uvc.c      **** 
3307:../uvc.c      ****                 apiRetStatus = CyU3PDmaChannelSetupSendBuffer (&glDebugRspChannel, &dmaInfo);
3308:../uvc.c      ****                 if (apiRetStatus != CY_U3P_SUCCESS)
3309:../uvc.c      ****                 {
3310:../uvc.c      ****                     CyU3PDebugPrint (4, "Failed to send debug response, Error code = %d\r\n", apiRe
3311:../uvc.c      ****                     CyFxAppErrorHandler (apiRetStatus);
3312:../uvc.c      ****                 }
3313:../uvc.c      ****             }
3314:../uvc.c      **** #endif
3315:../uvc.c      ****         }
3316:../uvc.c      ****         /* Allow other ready threads to run. */
3317:../uvc.c      ****         CyU3PThreadRelinquish ();
3318:../uvc.c      ****     }
3319:../uvc.c      **** }
3320:../uvc.c      **** 
3321:../uvc.c      **** /*
3322:../uvc.c      **** * Entry function for the internal I2C control handler thread.
3323:../uvc.c      **** * added 10/2013
3324:../uvc.c      **** */
3325:../uvc.c      **** /*
3326:../uvc.c      **** static uint8_t timeDelay[64] = {
3327:../uvc.c      **** 
3328:../uvc.c      **** };
3329:../uvc.c      **** */
3330:../uvc.c      **** 
3331:../uvc.c      **** /*
3332:../uvc.c      ****  * Entry function for the UVC Application Thread
3333:../uvc.c      ****  */
3334:../uvc.c      **** 
3335:../uvc.c      **** uint32_t posTick;
3336:../uvc.c      **** CyU3PTimer I2CCmdTimer;
3337:../uvc.c      **** 
3338:../uvc.c      **** void  I2CCmdCb(uint32_t input){
  39              		.loc 1 3338 0
  40              		.cfi_startproc
  41              		@ args = 0, pretend = 0, frame = 0
  42              		@ frame_needed = 0, uses_anonymous_args = 0
  43              	.LVL2:
3339:../uvc.c      **** 	CyU3PDebugPrint (4, "I2C pos-timer %d %d\r\n", posTick, input);
  44              		.loc 1 3339 0
  45 0008 28209FE5 		ldr	r2, .L3
3338:../uvc.c      **** 	CyU3PDebugPrint (4, "I2C pos-timer %d %d\r\n", posTick, input);
  46              		.loc 1 3338 0
  47 000c 08402DE9 		stmfd	sp!, {r3, lr}
  48              	.LCFI0:
  49              		.cfi_def_cfa_offset 8
  50              		.cfi_offset 3, -8
  51              		.cfi_offset 14, -4
  52              		.loc 1 3339 0
  53 0010 002092E5 		ldr	r2, [r2]
3338:../uvc.c      **** 	CyU3PDebugPrint (4, "I2C pos-timer %d %d\r\n", posTick, input);
  54              		.loc 1 3338 0
  55 0014 0030A0E1 		mov	r3, r0
  56              		.loc 1 3339 0
  57 0018 1C109FE5 		ldr	r1, .L3+4
  58 001c 0400A0E3 		mov	r0, #4
  59              	.LVL3:
  60 0020 FEFFFFEB 		bl	CyU3PDebugPrint
  61              	.LVL4:
3340:../uvc.c      **** 	CyU3PEventSet (&glFxUVCEvent, VD_FX_I2C_CMD_EVENT, CYU3P_EVENT_OR);
  62              		.loc 1 3340 0
  63 0024 14009FE5 		ldr	r0, .L3+8
  64 0028 2010A0E3 		mov	r1, #32
  65 002c 0020A0E3 		mov	r2, #0
3341:../uvc.c      **** }
  66              		.loc 1 3341 0
  67 0030 0840BDE8 		ldmfd	sp!, {r3, lr}
3340:../uvc.c      **** 	CyU3PEventSet (&glFxUVCEvent, VD_FX_I2C_CMD_EVENT, CYU3P_EVENT_OR);
  68              		.loc 1 3340 0
  69 0034 FEFFFFEA 		b	_txe_event_flags_set
  70              	.LVL5:
  71              	.L4:
  72              		.align	2
  73              	.L3:
  74 0038 00000000 		.word	posTick
  75 003c 00000000 		.word	.LC0
  76 0040 00000000 		.word	.LANCHOR0
  77              		.cfi_endproc
  78              	.LFE21:
  80              		.align	2
  81              		.global	I2cAppThread_Entry
  83              	I2cAppThread_Entry:
  84              	.LFB22:
3342:../uvc.c      **** 
3343:../uvc.c      **** static uint8_t timercount = 0;
3344:../uvc.c      **** void I2cAppThread_Entry(uint32_t input){
  85              		.loc 1 3344 0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 8
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              	.LVL6:
  90 0044 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
  91              	.LCFI1:
  92              		.cfi_def_cfa_offset 36
  93              		.cfi_offset 4, -36
  94              		.cfi_offset 5, -32
  95              		.cfi_offset 6, -28
  96              		.cfi_offset 7, -24
  97              		.cfi_offset 8, -20
  98              		.cfi_offset 9, -16
  99              		.cfi_offset 10, -12
 100              		.cfi_offset 11, -8
 101              		.cfi_offset 14, -4
3345:../uvc.c      **** 
3346:../uvc.c      **** 	//uint16_t count = 0, cmdCopyIdx = 0; //count1 = 0, cmdQuIdx = 0,
3347:../uvc.c      **** 	VdRingBuf *cmdQuptr = &cmdQu;
3348:../uvc.c      **** 	VdRingBuf *statQuptr = &statQu;
3349:../uvc.c      **** 	VdcmdDes  *lcCmdDes;
3350:../uvc.c      **** 	VdstateDes *lcStaDes;
3351:../uvc.c      **** 	uint32_t flag = 0;
3352:../uvc.c      **** 	uint8_t  cmdFlag = 0;
3353:../uvc.c      **** 	uint8_t regAdd, /*regAdd1,*/ devAdd, data;// data1;
3354:../uvc.c      **** 	uint8_t i, curFlagIdx;
3355:../uvc.c      **** 	uint16_t delaytime;
3356:../uvc.c      **** 	//CyBool_t trigger = CyFalse;
3357:../uvc.c      **** 
3358:../uvc.c      **** #if 0 //for test the command queue
3359:../uvc.c      **** 	lcCmdDes = cmdQuptr->startAdd;
3360:../uvc.c      **** 	for (cmdQuIdx = 0; cmdQuIdx < MAXCMD; cmdQuIdx++){
3361:../uvc.c      **** 		CyU3PDebugPrint(4, "Command Queue check cmdID %d CmdDes 0x%x previous 0x%x next 0x%x Idx %d\r\n",
3362:../uvc.c      **** 			lcCmdDes->CmdID, lcCmdDes, lcCmdDes->cmdDesPrevious, lcCmdDes->cmdDesNext, cmdQuIdx);
3363:../uvc.c      **** 		lcCmdDes += 1;
3364:../uvc.c      **** 	}
3365:../uvc.c      **** #endif
3366:../uvc.c      **** 	/*** create a timer for I2C commands delay option ***/
3367:../uvc.c      **** 	CyU3PTimerCreate(&I2CCmdTimer, I2CCmdCb, 11, 1000, 0, CYU3P_NO_ACTIVATE);
 102              		.loc 1 3367 0
 103 0048 38029FE5 		ldr	r0, .L28
 104              	.LVL7:
3344:../uvc.c      **** 
 105              		.loc 1 3344 0
 106 004c 1CD04DE2 		sub	sp, sp, #28
 107              	.LCFI2:
 108              		.cfi_def_cfa_offset 64
3351:../uvc.c      **** 	uint8_t  cmdFlag = 0;
 109              		.loc 1 3351 0
 110 0050 00C0A0E3 		mov	ip, #0
 111              		.loc 1 3367 0
 112 0054 FA2FA0E3 		mov	r2, #1000
 113 0058 2C30A0E3 		mov	r3, #44
 114 005c 0C10A0E1 		mov	r1, ip
 115 0060 04C08DE5 		str	ip, [sp, #4]
 116 0064 08C08DE5 		str	ip, [sp, #8]
 117 0068 00208DE5 		str	r2, [sp]
 118 006c 0C308DE5 		str	r3, [sp, #12]
 119 0070 14229FE5 		ldr	r2, .L28+4
 120 0074 0B30A0E3 		mov	r3, #11
3351:../uvc.c      **** 	uint8_t  cmdFlag = 0;
 121              		.loc 1 3351 0
 122 0078 14C08DE5 		str	ip, [sp, #20]
 123              	.LVL8:
 124              		.loc 1 3367 0
 125 007c FEFFFFEB 		bl	_txe_timer_create
 126              	.LVL9:
3368:../uvc.c      **** 	CyU3PDebugPrint(4, "I2C per-timer %d\r\n", CyU3PGetTime());
 127              		.loc 1 3368 0
 128 0080 FEFFFFEB 		bl	_tx_time_get
 129              	.LVL10:
3369:../uvc.c      **** 	CyU3PThreadSleep(50);
3370:../uvc.c      **** 	CyU3PTimerStart(&I2CCmdTimer);
3371:../uvc.c      **** 
3372:../uvc.c      **** 	while (cmdQuptr->bugFlag == (uint8_t)CyFalse){ //waiting for first command
 130              		.loc 1 3372 0
 131 0084 04529FE5 		ldr	r5, .L28+8
3368:../uvc.c      **** 	CyU3PDebugPrint(4, "I2C per-timer %d\r\n", CyU3PGetTime());
 132              		.loc 1 3368 0
 133 0088 04129FE5 		ldr	r1, .L28+12
 134 008c 0020A0E1 		mov	r2, r0
 135 0090 0400A0E3 		mov	r0, #4
 136 0094 FEFFFFEB 		bl	CyU3PDebugPrint
 137              	.LVL11:
3369:../uvc.c      **** 	CyU3PThreadSleep(50);
 138              		.loc 1 3369 0
 139 0098 3200A0E3 		mov	r0, #50
 140 009c FEFFFFEB 		bl	_tx_thread_sleep
 141              	.LVL12:
3370:../uvc.c      **** 
 142              		.loc 1 3370 0
 143 00a0 E0019FE5 		ldr	r0, .L28
 144 00a4 FEFFFFEB 		bl	_txe_timer_activate
 145              	.LVL13:
 146              		.loc 1 3372 0
 147 00a8 1A20D5E5 		ldrb	r2, [r5, #26]	@ zero_extendqisi2
 148 00ac 000052E3 		cmp	r2, #0
 149 00b0 0300001A 		bne	.L6
 150              	.L7:
3373:../uvc.c      **** 		/* Allow other ready threads to run. */
3374:../uvc.c      **** 
3375:../uvc.c      **** 		CyU3PThreadRelinquish();
 151              		.loc 1 3375 0
 152 00b4 FEFFFFEB 		bl	_txe_thread_relinquish
 153              	.LVL14:
3372:../uvc.c      **** 		/* Allow other ready threads to run. */
 154              		.loc 1 3372 0
 155 00b8 1A20D5E5 		ldrb	r2, [r5, #26]	@ zero_extendqisi2
 156 00bc 000052E3 		cmp	r2, #0
 157 00c0 FBFFFF0A 		beq	.L7
 158              	.L6:
3376:../uvc.c      **** 	}
3377:../uvc.c      **** 	CyU3PDebugPrint(4, "The command queue is ready %d %d\r\n", cmdQuptr->bugFlag, cmdQuptr->readPtr->c
 159              		.loc 1 3377 0
 160 00c4 103095E5 		ldr	r3, [r5, #16]
 161 00c8 0400A0E3 		mov	r0, #4
 162 00cc 3C3093E5 		ldr	r3, [r3, #60]
 163 00d0 C0119FE5 		ldr	r1, .L28+16
 164 00d4 FEFFFFEB 		bl	CyU3PDebugPrint
 165              	.LVL15:
 166 00d8 BC819FE5 		ldr	r8, .L28+20
 167 00dc BC619FE5 		ldr	r6, .L28+24
 168 00e0 BCA19FE5 		ldr	r10, .L28+28
3378:../uvc.c      **** 	//CamDefSet(); //set default parameters to camera
3379:../uvc.c      **** 	/***** add recovery of the current camera settings ****/
3380:../uvc.c      **** 	//CyU3PThreadSleep(100);
3381:../uvc.c      **** 	//SetCurCmd();
3382:../uvc.c      **** 	/*********** the loop of the thread ***********/
3383:../uvc.c      **** 	for (;;){
3384:../uvc.c      **** 
3385:../uvc.c      **** 		CyU3PEventGet(&glFxUVCEvent, VD_FX_I2C_CMD_EVENT, CYU3P_EVENT_AND_CLEAR, &flag, CYU3P_WAIT_FOREVE
 169              		.loc 1 3385 0
 170 00e4 0890A0E1 		mov	r9, r8
 171 00e8 0070E0E3 		mvn	r7, #0
 172              	.L22:
 173 00ec 14308DE2 		add	r3, sp, #20
 174 00f0 0320A0E3 		mov	r2, #3
 175 00f4 2010A0E3 		mov	r1, #32
 176 00f8 00708DE5 		str	r7, [sp]
 177 00fc 98019FE5 		ldr	r0, .L28+20
 178 0100 FEFFFFEB 		bl	_txe_event_flags_get
 179              	.LVL16:
3386:../uvc.c      **** 		//CyU3PDebugPrint (4, "In I2C loop timercounter %d cmdFlag 0x%x\r\n", timercount, cmdFlag);
3387:../uvc.c      **** 		/*  // for test GPIO output
3388:../uvc.c      **** 		if(trigger)
3389:../uvc.c      **** 		{
3390:../uvc.c      **** 		CyU3PGpioSetValue(SENSOR_RESET_GPIO, CyFalse);
3391:../uvc.c      **** 		{
3392:../uvc.c      **** 		CyU3PDebugPrint(4, "GPIO Set Value Error, Error Code = %d\n", CyFalse);
3393:../uvc.c      **** 		}
3394:../uvc.c      **** 
3395:../uvc.c      **** 		}else{
3396:../uvc.c      **** 		CyU3PGpioSetValue(SENSOR_RESET_GPIO, CyTrue);
3397:../uvc.c      **** 		{
3398:../uvc.c      **** 		CyU3PDebugPrint(4, "GPIO Set Value Error, Error Code = %d\n", CyTrue);
3399:../uvc.c      **** 		}
3400:../uvc.c      **** 
3401:../uvc.c      **** 		}
3402:../uvc.c      **** 		*/
3403:../uvc.c      **** 		CyU3PMutexGet(statQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 180              		.loc 1 3403 0
 181 0104 0010E0E3 		mvn	r1, #0
 182 0108 1C0096E5 		ldr	r0, [r6, #28]
 183 010c FEFFFFEB 		bl	_txe_mutex_get
 184              	.LVL17:
3404:../uvc.c      **** 		//CyU3PDebugPrint (4, "get I2C events (0) flag 0x%x cmdflag 0x%x\r\n", flag, cmdFlag);
3405:../uvc.c      **** 		lcStaDes = (VdstateDes*)statQuptr->readPtr;
3406:../uvc.c      **** 		if (0 && (lcStaDes->statFlag == CyTrue)){ /* for state queue it's not used right now. */
3407:../uvc.c      **** 			for (i = 0; i < lcStaDes->NumData; i++){
3408:../uvc.c      **** 				regAdd = ((lcStaDes->staPar) + i)->RegAdd;
3409:../uvc.c      **** 				devAdd = ((lcStaDes->staPar) + i)->DevAdd;
3410:../uvc.c      **** 				((lcStaDes->staPar) + i)->Data = SensorGetControl(regAdd, devAdd); //get state value from I2C b
3411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
3412:../uvc.c      **** 				CyU3PDebugPrint(4, "send I2C state stateID %d cmdCopyIdx %d regAdd 0x%x devAdd 0x%x data 0x%x\r
3413:../uvc.c      **** 					lcStaDes->StatID, regAdd, devAdd, data);
3414:../uvc.c      **** #endif
3415:../uvc.c      **** 			}
3416:../uvc.c      **** 			lcStaDes->statFlag = CyFalse;
3417:../uvc.c      **** 			statQuptr->readPtr = (VdcmdDes*)lcStaDes->staDesNext; //update command queue read pointer
3418:../uvc.c      **** 			cmdFlag = 0xFF; //I2C command done
3419:../uvc.c      **** 		}
3420:../uvc.c      **** 		CyU3PMutexPut(statQuptr->ringMux);  //release the command queue mutex
 185              		.loc 1 3420 0
 186 0110 1C0096E5 		ldr	r0, [r6, #28]
 187 0114 FEFFFFEB 		bl	_txe_mutex_put
 188              	.LVL18:
3421:../uvc.c      **** 		if (cmdFlag != 0xFF){ //for during handle command
3422:../uvc.c      **** 			CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 189              		.loc 1 3422 0
 190 0118 1C0095E5 		ldr	r0, [r5, #28]
 191 011c 0010E0E3 		mvn	r1, #0
 192 0120 FEFFFFEB 		bl	_txe_mutex_get
 193              	.LVL19:
3423:../uvc.c      **** 			lcCmdDes = cmdQuptr->readPtr;
 194              		.loc 1 3423 0
 195 0124 104095E5 		ldr	r4, [r5, #16]
 196              	.LVL20:
3424:../uvc.c      **** 
3425:../uvc.c      **** 			/*
3426:../uvc.c      **** 			CyU3PDebugPrint (4, "get I2C events (1) flag 0x%x cmdflag 0x%x desflag 0x%x lcCmdDes 0x%x\r\n",
3427:../uvc.c      **** 			flag, cmdFlag, lcCmdDes->cmdFlag, lcCmdDes);
3428:../uvc.c      **** 			*/
3429:../uvc.c      **** 
3430:../uvc.c      **** 			/* find a available command */
3431:../uvc.c      **** 			i = 0;
3432:../uvc.c      **** 			while ((lcCmdDes->cmdFlag == deswait) && (i < MAXCMD)){
 197              		.loc 1 3432 0
 198 0128 3C3094E5 		ldr	r3, [r4, #60]
 199 012c 000053E3 		cmp	r3, #0
 200 0130 0900001A 		bne	.L8
 201 0134 40B0A0E3 		mov	fp, #64
 202 0138 010000EA 		b	.L11
 203              	.LVL21:
 204              	.L9:
 205              		.loc 1 3432 0 is_stmt 0 discriminator 2
 206 013c FFB013E2 		ands	fp, r3, #255
 207 0140 2D00000A 		beq	.L26
 208              	.L11:
3433:../uvc.c      **** 				i++;
3434:../uvc.c      **** 				lcCmdDes = lcCmdDes->cmdDesNext;
 209              		.loc 1 3434 0 is_stmt 1
 210 0144 344094E5 		ldr	r4, [r4, #52]
 211              	.LVL22:
 212 0148 01304BE2 		sub	r3, fp, #1
3432:../uvc.c      **** 				i++;
 213              		.loc 1 3432 0
 214 014c 3C2094E5 		ldr	r2, [r4, #60]
 215 0150 000052E3 		cmp	r2, #0
 216 0154 F8FFFF0A 		beq	.L9
 217 0158 104085E5 		str	r4, [r5, #16]
 218              	.L8:
 219              	.LVL23:
 220 015c 0130D4E5 		ldrb	r3, [r4, #1]	@ zero_extendqisi2
3435:../uvc.c      **** 				cmdQuptr->readPtr = lcCmdDes;
3436:../uvc.c      **** 			}
3437:../uvc.c      **** 			//CyU3PDebugPrint (4, "i %d Cmf_Flag %d\r\n", i, lcCmdDes->cmdFlag);
3438:../uvc.c      **** 			if (lcCmdDes->cmdFlag != deswait){
3439:../uvc.c      **** 				i = lcCmdDes->curNum;
3440:../uvc.c      **** 				regAdd = ((lcCmdDes->CmdPar) + i)->RegAdd;
3441:../uvc.c      **** 				devAdd = ((lcCmdDes->CmdPar) + i)->DevAdd;
3442:../uvc.c      **** 				data = ((lcCmdDes->CmdPar) + i)->Data;
3443:../uvc.c      **** 				delaytime = ((lcCmdDes->CmdPar) + i)->DelayT;
3444:../uvc.c      **** 				switch (lcCmdDes->CmdID){
 221              		.loc 1 3444 0
 222 0160 00C0D4E5 		ldrb	ip, [r4]	@ zero_extendqisi2
 223 0164 833083E0 		add	r3, r3, r3, asl #1
 224 0168 833084E0 		add	r3, r4, r3, asl #1
 225 016c 20C04CE2 		sub	ip, ip, #32
3440:../uvc.c      **** 				devAdd = ((lcCmdDes->CmdPar) + i)->DevAdd;
 226              		.loc 1 3440 0
 227 0170 0400D3E5 		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 228              	.LVL24:
3441:../uvc.c      **** 				data = ((lcCmdDes->CmdPar) + i)->Data;
 229              		.loc 1 3441 0
 230 0174 0510D3E5 		ldrb	r1, [r3, #5]	@ zero_extendqisi2
 231              	.LVL25:
3442:../uvc.c      **** 				delaytime = ((lcCmdDes->CmdPar) + i)->DelayT;
 232              		.loc 1 3442 0
 233 0178 0620D3E5 		ldrb	r2, [r3, #6]	@ zero_extendqisi2
 234              	.LVL26:
3443:../uvc.c      **** 				switch (lcCmdDes->CmdID){
 235              		.loc 1 3443 0
 236 017c B8B0D3E1 		ldrh	fp, [r3, #8]
 237              	.LVL27:
 238              		.loc 1 3444 0
 239 0180 03005CE3 		cmp	ip, #3
 240 0184 0CF19F97 		ldrls	pc, [pc, ip, asl #2]
 241 0188 3B0000EA 		b	.L17
 242              	.L24:
 243 018c 9C010000 		.word	.L14
 244 0190 9C010000 		.word	.L14
 245 0194 EC010000 		.word	.L16
 246 0198 EC010000 		.word	.L16
 247              	.L14:
3445:../uvc.c      **** 				case 0x20:
3446:../uvc.c      **** 					SensorSetIrisControl(regAdd, devAdd, data, I2C_DSPBOARD_ADDR_WR/*boardID*/);//set Iris auto (A
3447:../uvc.c      **** 					delaytime = 500;
3448:../uvc.c      **** 					break;
3449:../uvc.c      **** 				case 0x21:
3450:../uvc.c      **** 					SensorSetIrisControl(regAdd, devAdd, data, I2C_DSPBOARD_ADDR_WR/*boardID*/);//set Iris auto (n
 248              		.loc 1 3450 0
 249 019c 5230A0E3 		mov	r3, #82
 250              	.LVL28:
 251 01a0 FEFFFFEB 		bl	SensorSetIrisControl
 252              	.LVL29:
3451:../uvc.c      **** 					delaytime = 500;
3452:../uvc.c      **** 					break;
 253              		.loc 1 3452 0
 254 01a4 7D1FA0E3 		mov	r1, #500
 255              	.LVL30:
 256              	.L13:
3453:../uvc.c      **** 				case 0x22:
3454:../uvc.c      **** 					SensorSetIrisControl(regAdd, devAdd, data, I2C_AFBOARD_ADDR_WR/*boardID*/);//set Iris value (D
3455:../uvc.c      **** 					delaytime = 300;
3456:../uvc.c      **** 					break;
3457:../uvc.c      **** 				case 0x23:
3458:../uvc.c      **** 					SensorSetIrisControl(regAdd, devAdd, data, I2C_AFBOARD_ADDR_WR/*boardID*/);//opt Zoom
3459:../uvc.c      **** 					delaytime = 300;
3460:../uvc.c      **** 					break;
3461:../uvc.c      **** 				default:
3462:../uvc.c      **** 					SensorSetControl(regAdd, devAdd, data);    //send I2C command
3463:../uvc.c      **** 					break;
3464:../uvc.c      **** 				}
3465:../uvc.c      **** 				//SensorSetControl(regAdd, devAdd, data);    //send I2C command
3466:../uvc.c      **** 				/** timer's ticket modify **/
3467:../uvc.c      **** 				CyU3PTimerModify(&I2CCmdTimer, delaytime, 0);
 257              		.loc 1 3467 0
 258 01a8 0020A0E3 		mov	r2, #0
 259 01ac D4009FE5 		ldr	r0, .L28
 260 01b0 FEFFFFEB 		bl	_txe_timer_change
 261              	.LVL31:
3468:../uvc.c      **** 				CyU3PTimerStart(&I2CCmdTimer);  //start delay timer
 262              		.loc 1 3468 0
 263 01b4 CC009FE5 		ldr	r0, .L28
 264 01b8 FEFFFFEB 		bl	_txe_timer_activate
 265              	.LVL32:
3469:../uvc.c      **** 				//CyU3PDebugPrint (4, "set timer restart(1) %d 0x%x 0x%x %d %d %d %d\r\n", CyU3PGetTime(), regA
3470:../uvc.c      **** 				cmdFlag = 0xFF; //I2C command done
3471:../uvc.c      **** #ifdef USB_DEBUG_PRINT
3472:../uvc.c      **** 				CyU3PDebugPrint(4, "send I2C command cmdID %d regAdd 0x%x devAdd 0x%x data 0x%x cmdflag 0x%x\r\
3473:../uvc.c      **** 					lcCmdDes->CmdID, regAdd, devAdd, data, lcCmdDes->cmdFlag);
3474:../uvc.c      **** #endif
3475:../uvc.c      **** 				if (lcCmdDes->NumPara == lcCmdDes->curNum){
 266              		.loc 1 3475 0
 267 01bc 0130D4E5 		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 268 01c0 0220D4E5 		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 269 01c4 030052E1 		cmp	r2, r3
 270 01c8 1D00000A 		beq	.L27
3476:../uvc.c      **** 					lcCmdDes->cmdFlag = deswait;
3477:../uvc.c      **** 					if (lcCmdDes->CmdID >= EXUAOFFSET){
3478:../uvc.c      **** 						ExUCtrlParArry[(lcCmdDes->CmdID - EXUAOFFSET + 4)][16] = CyFalse;
3479:../uvc.c      **** 					}
3480:../uvc.c      **** 					else{
3481:../uvc.c      **** 						CtrlParArry[lcCmdDes->CmdID][16] = CyFalse; //set flag to false. wait for check.
3482:../uvc.c      **** 					}
3483:../uvc.c      **** 					cmdQuptr->readPtr = lcCmdDes->cmdDesNext; //update command queue read pointer for next handled
3484:../uvc.c      **** 				}
3485:../uvc.c      **** 				else{
3486:../uvc.c      **** 					lcCmdDes->curNum++;
 271              		.loc 1 3486 0
 272 01cc 013083E2 		add	r3, r3, #1
3487:../uvc.c      **** 					lcCmdDes->cmdFlag = desusing;
 273              		.loc 1 3487 0
 274 01d0 0F20A0E3 		mov	r2, #15
3486:../uvc.c      **** 					lcCmdDes->cmdFlag = desusing;
 275              		.loc 1 3486 0
 276 01d4 0130C4E5 		strb	r3, [r4, #1]
 277              		.loc 1 3487 0
 278 01d8 3C2084E5 		str	r2, [r4, #60]
 279              	.LVL33:
 280              	.L21:
3488:../uvc.c      **** 				}
3489:../uvc.c      **** 			}
3490:../uvc.c      **** 			else{
3491:../uvc.c      **** 				CyU3PTimerModify(&I2CCmdTimer, 1000, 0); //the free I2C commands timer pace (no setting command
3492:../uvc.c      **** 				CyU3PTimerStart(&I2CCmdTimer);
3493:../uvc.c      **** 				//CyU3PDebugPrint (4, "I2Ctimer counter %d", timercount);
3494:../uvc.c      **** 				if (timercount >= 3){
3495:../uvc.c      **** 					for (curFlagIdx = 0; curFlagIdx<64; curFlagIdx++){
3496:../uvc.c      **** 						curFlag[curFlagIdx] = 0;
3497:../uvc.c      **** 					}
3498:../uvc.c      **** 					timercount = 0;
3499:../uvc.c      **** 
3500:../uvc.c      **** 				}
3501:../uvc.c      **** 				else{
3502:../uvc.c      **** 					timercount++;
3503:../uvc.c      **** 				}
3504:../uvc.c      **** 			}
3505:../uvc.c      **** 		}
3506:../uvc.c      **** 		CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 281              		.loc 1 3506 0
 282 01dc 1C0095E5 		ldr	r0, [r5, #28]
 283 01e0 FEFFFFEB 		bl	_txe_mutex_put
 284              	.LVL34:
3507:../uvc.c      **** 		/*
3508:../uvc.c      **** 		CyU3PDebugPrint (4, "get I2C events (2) flag 0x%x cmdflag 0x%x desflag 0x%x lcCmdDes 0x%x\r\n",
3509:../uvc.c      **** 		flag, cmdFlag, lcCmdDes->cmdFlag, lcCmdDes);
3510:../uvc.c      **** 		*/
3511:../uvc.c      **** #ifdef USB_DEBUG_PRINT
3512:../uvc.c      **** 		CyU3PDebugPrint(4, "I2C thread checking camera parameters count %d data0 %d data1 %d cmdflag 0x%x
3513:../uvc.c      **** 			0/*count*/, CtrlParArry[count][13], CtrlParArry[count][14], cmdFlag);
3514:../uvc.c      **** #endif
3515:../uvc.c      **** 
3516:../uvc.c      **** 		/**** checking the camera registers if it is the same what the current copy is. ****/
3517:../uvc.c      **** 		/** this code might be used when a timer is used to schedule the I2C command sent out **/
3518:../uvc.c      **** #if 0
3519:../uvc.c      **** 		if ((CtrlParArry[cmdCopyIdx][16] != CyTrue) && (cmdFlag != 0xFF)/*&&(CtrlParArry[cmdCopyIdx][17] 
3520:../uvc.c      **** 
3521:../uvc.c      **** 			regAdd = CtrlParArry[cmdCopyIdx][0];
3522:../uvc.c      **** 			regAdd1 = CtrlParArry[cmdCopyIdx][1];
3523:../uvc.c      **** 			devAdd = CtrlParArry[cmdCopyIdx][15];
3524:../uvc.c      **** 			data = SensorGetControl(regAdd, devAdd); //SensorGetBLCMode();
3525:../uvc.c      **** 			i = 0;
3526:../uvc.c      **** 			switch (cmdCopyIdx)
3527:../uvc.c      **** 			{
3528:../uvc.c      **** 			case BrgtCtlID1:
3529:../uvc.c      **** 				if (CtrlParArry[cmdCopyIdx][14] != data){
3530:../uvc.c      **** 					CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
3531:../uvc.c      **** 					cmdSet(cmdQuptr, cmdCopyIdx, regAdd, devAdd, CtrlParArry[cmdCopyIdx][14], i);
3532:../uvc.c      **** 					CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
3533:../uvc.c      **** 					i++;
3534:../uvc.c      **** 				}
3535:../uvc.c      **** 				else{
3536:../uvc.c      **** 					;//CtrlParArry[cmdCopyIdx][16] = CyTrue; //if they are the same, set flag is true.
3537:../uvc.c      **** 				}
3538:../uvc.c      **** 
3539:../uvc.c      **** 				CyU3PBusyWait(500);
3540:../uvc.c      **** 				data = SensorGetControl(regAdd1, devAdd);
3541:../uvc.c      **** 				if (CtrlParArry[cmdCopyIdx][13] != data){
3542:../uvc.c      **** 					CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
3543:../uvc.c      **** 					cmdSet(cmdQuptr, cmdCopyIdx, regAdd1, devAdd, CtrlParArry[cmdCopyIdx][13], i);
3544:../uvc.c      **** 					CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
3545:../uvc.c      **** 				}
3546:../uvc.c      **** 				else{
3547:../uvc.c      **** 					;//CtrlParArry[cmdCopyIdx][16] = CyTrue; //if they are the same, set flag is true.
3548:../uvc.c      **** 				}
3549:../uvc.c      **** 				break;
3550:../uvc.c      **** 			case HueCtlID5:
3551:../uvc.c      **** 				if (CtrlParArry[cmdCopyIdx][13] != data){
3552:../uvc.c      **** 					CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
3553:../uvc.c      **** 					cmdSet(cmdQuptr, cmdCopyIdx, regAdd, devAdd, CtrlParArry[cmdCopyIdx][13], i);
3554:../uvc.c      **** 					CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
3555:../uvc.c      **** 				}
3556:../uvc.c      **** 				else{
3557:../uvc.c      **** 					;//CtrlParArry[cmdCopyIdx][16] = CyTrue; //if they are the same, set flag is true.
3558:../uvc.c      **** 				}
3559:../uvc.c      **** 				break;
3560:../uvc.c      **** 			case SaturCtlID6:
3561:../uvc.c      **** 			case WBTLevCtlID10:
3562:../uvc.c      **** 			default:
3563:../uvc.c      **** 				if (CtrlParArry[cmdCopyIdx][13] == data){
3564:../uvc.c      **** 					CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
3565:../uvc.c      **** 					cmdSet(cmdQuptr, cmdCopyIdx, regAdd, devAdd, CtrlParArry[cmdCopyIdx][13], i);
3566:../uvc.c      **** 					CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
3567:../uvc.c      **** 				}
3568:../uvc.c      **** 				else{
3569:../uvc.c      **** 					;//CtrlParArry[cmdCopyIdx][16] = CyTrue; //if they are the same, set flag is true.
3570:../uvc.c      **** 				}
3571:../uvc.c      **** 				break;
3572:../uvc.c      **** 			}
3573:../uvc.c      **** 			//cmdFlag = 0xFF; //one I2C command one available event.
3574:../uvc.c      **** 			CtrlParArry[cmdCopyIdx][16] = CyTrue; //set flag to true. let it sent to camera.
3575:../uvc.c      **** 		}
3576:../uvc.c      **** 		cmdCopyIdx = (cmdCopyIdx + 1) & 0x1F;    //update checking index.
3577:../uvc.c      **** #endif
3578:../uvc.c      **** 		cmdFlag = 0x00; //clear flag
3579:../uvc.c      **** 		/* Allow other ready threads to run. */
3580:../uvc.c      **** 		//CyU3PDebugPrint (4, "out of the i2cthread flag 0x%x cmdflag 0x%x\r\n", flag, cmdFlag);
3581:../uvc.c      **** 		CyU3PThreadRelinquish();
 285              		.loc 1 3581 0
 286 01e4 FEFFFFEB 		bl	_txe_thread_relinquish
 287              	.LVL35:
3582:../uvc.c      **** 	}
 288              		.loc 1 3582 0
 289 01e8 BFFFFFEA 		b	.L22
 290              	.LVL36:
 291              	.L16:
3458:../uvc.c      **** 					delaytime = 300;
 292              		.loc 1 3458 0
 293 01ec 8230A0E3 		mov	r3, #130
 294              	.LVL37:
 295 01f0 FEFFFFEB 		bl	SensorSetIrisControl
 296              	.LVL38:
3460:../uvc.c      **** 				default:
 297              		.loc 1 3460 0
 298 01f4 4B1FA0E3 		mov	r1, #300
 299 01f8 EAFFFFEA 		b	.L13
 300              	.LVL39:
 301              	.L26:
3491:../uvc.c      **** 				CyU3PTimerStart(&I2CCmdTimer);
 302              		.loc 1 3491 0
 303 01fc 0B20A0E1 		mov	r2, fp
 304 0200 FA1FA0E3 		mov	r1, #1000
 305 0204 7C009FE5 		ldr	r0, .L28
 306 0208 104085E5 		str	r4, [r5, #16]
 307 020c FEFFFFEB 		bl	_txe_timer_change
 308              	.LVL40:
3492:../uvc.c      **** 				//CyU3PDebugPrint (4, "I2Ctimer counter %d", timercount);
 309              		.loc 1 3492 0
 310 0210 70009FE5 		ldr	r0, .L28
 311 0214 FEFFFFEB 		bl	_txe_timer_activate
 312              	.LVL41:
3494:../uvc.c      **** 					for (curFlagIdx = 0; curFlagIdx<64; curFlagIdx++){
 313              		.loc 1 3494 0
 314 0218 2820D8E5 		ldrb	r2, [r8, #40]	@ zero_extendqisi2
 315 021c 020052E3 		cmp	r2, #2
3502:../uvc.c      **** 				}
 316              		.loc 1 3502 0
 317 0220 01208292 		addls	r2, r2, #1
 318 0224 2820C995 		strlsb	r2, [r9, #40]
3494:../uvc.c      **** 					for (curFlagIdx = 0; curFlagIdx<64; curFlagIdx++){
 319              		.loc 1 3494 0
 320 0228 EBFFFF9A 		bls	.L21
 321 022c 74009FE5 		ldr	r0, .L28+32
 322 0230 0B10A0E1 		mov	r1, fp
 323 0234 4020A0E3 		mov	r2, #64
 324 0238 FEFFFFEB 		bl	memset
 325              	.LVL42:
3498:../uvc.c      **** 
 326              		.loc 1 3498 0
 327 023c 28B0C9E5 		strb	fp, [r9, #40]
 328 0240 E5FFFFEA 		b	.L21
 329              	.LVL43:
 330              	.L27:
3477:../uvc.c      **** 						ExUCtrlParArry[(lcCmdDes->CmdID - EXUAOFFSET + 4)][16] = CyFalse;
 331              		.loc 1 3477 0
 332 0244 0030D4E5 		ldrb	r3, [r4]	@ zero_extendqisi2
3476:../uvc.c      **** 					if (lcCmdDes->CmdID >= EXUAOFFSET){
 333              		.loc 1 3476 0
 334 0248 0020A0E3 		mov	r2, #0
3477:../uvc.c      **** 						ExUCtrlParArry[(lcCmdDes->CmdID - EXUAOFFSET + 4)][16] = CyFalse;
 335              		.loc 1 3477 0
 336 024c 230053E3 		cmp	r3, #35
3478:../uvc.c      **** 					}
 337              		.loc 1 3478 0
 338 0250 20304382 		subhi	r3, r3, #32
 339 0254 83308380 		addhi	r3, r3, r3, asl #1
3481:../uvc.c      **** 					}
 340              		.loc 1 3481 0
 341 0258 83308390 		addls	r3, r3, r3, asl #1
3478:../uvc.c      **** 					}
 342              		.loc 1 3478 0
 343 025c 83318A80 		addhi	r3, r10, r3, asl #3
3481:../uvc.c      **** 					}
 344              		.loc 1 3481 0
 345 0260 83318A90 		addls	r3, r10, r3, asl #3
3478:../uvc.c      **** 					}
 346              		.loc 1 3478 0
 347 0264 1020C385 		strhib	r2, [r3, #16]
3481:../uvc.c      **** 					}
 348              		.loc 1 3481 0
 349 0268 9021C395 		strlsb	r2, [r3, #400]
3483:../uvc.c      **** 				}
 350              		.loc 1 3483 0
 351 026c 343094E5 		ldr	r3, [r4, #52]
3476:../uvc.c      **** 					if (lcCmdDes->CmdID >= EXUAOFFSET){
 352              		.loc 1 3476 0
 353 0270 3C2084E5 		str	r2, [r4, #60]
3483:../uvc.c      **** 				}
 354              		.loc 1 3483 0
 355 0274 103085E5 		str	r3, [r5, #16]
 356 0278 D7FFFFEA 		b	.L21
 357              	.LVL44:
 358              	.L17:
3462:../uvc.c      **** 					break;
 359              		.loc 1 3462 0
 360 027c FEFFFFEB 		bl	SensorSetControl
 361              	.LVL45:
 362 0280 0B10A0E1 		mov	r1, fp
3463:../uvc.c      **** 				}
 363              		.loc 1 3463 0
 364 0284 C7FFFFEA 		b	.L13
 365              	.L29:
 366              		.align	2
 367              	.L28:
 368 0288 00000000 		.word	I2CCmdTimer
 369 028c 00000000 		.word	I2CCmdCb
 370 0290 00000000 		.word	cmdQu
 371 0294 18000000 		.word	.LC1
 372 0298 2C000000 		.word	.LC2
 373 029c 00000000 		.word	.LANCHOR0
 374 02a0 00000000 		.word	statQu
 375 02a4 00000000 		.word	.LANCHOR1
 376 02a8 2C000000 		.word	.LANCHOR0+44
 377              		.cfi_endproc
 378              	.LFE22:
 380              		.align	2
 381              		.global	esUVCGpifCB
 383              	esUVCGpifCB:
 384              	.LFB6:
1171:../uvc.c      ****     CyU3PReturnStatus_t status = CY_U3P_SUCCESS;
 385              		.loc 1 1171 0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 0
 388              		@ frame_needed = 0, uses_anonymous_args = 0
1174:../uvc.c      ****     {
 389              		.loc 1 1174 0
 390 02ac 010050E3 		cmp	r0, #1
1171:../uvc.c      ****     CyU3PReturnStatus_t status = CY_U3P_SUCCESS;
 391              		.loc 1 1171 0
 392 02b0 08402DE9 		stmfd	sp!, {r3, lr}
 393              	.LCFI3:
 394              		.cfi_def_cfa_offset 8
 395              		.cfi_offset 3, -8
 396              		.cfi_offset 14, -4
1174:../uvc.c      ****     {
 397              		.loc 1 1174 0
 398 02b4 0880BD18 		ldmnefd	sp!, {r3, pc}
1177:../uvc.c      ****         {
 399              		.loc 1 1177 0
 400 02b8 0B0051E3 		cmp	r1, #11
 401 02bc 0A00000A 		beq	.L41
1186:../uvc.c      ****         {
 402              		.loc 1 1186 0
 403 02c0 0C0051E3 		cmp	r1, #12
 404 02c4 0880BD18 		ldmnefd	sp!, {r3, pc}
1188:../uvc.c      ****             if (status != CY_U3P_SUCCESS)
 405              		.loc 1 1188 0
 406 02c8 0010A0E1 		mov	r1, r0
 407 02cc 3C009FE5 		ldr	r0, .L42
 408 02d0 FEFFFFEB 		bl	CyU3PDmaMultiChannelSetWrapUp
1189:../uvc.c      ****             {
 409              		.loc 1 1189 0
 410 02d4 002050E2 		subs	r2, r0, #0
 411 02d8 0880BD08 		ldmeqfd	sp!, {r3, pc}
1191:../uvc.c      ****             }
 412              		.loc 1 1191 0
 413 02dc 0400A0E3 		mov	r0, #4
 414 02e0 2C109FE5 		ldr	r1, .L42+4
1195:../uvc.c      **** 
 415              		.loc 1 1195 0
 416 02e4 0840BDE8 		ldmfd	sp!, {r3, lr}
1191:../uvc.c      ****             }
 417              		.loc 1 1191 0
 418 02e8 FEFFFFEA 		b	CyU3PDebugPrint
 419              	.L41:
 420              	.LBB50:
 421              	.LBB51:
1179:../uvc.c      ****             if (status != CY_U3P_SUCCESS)
 422              		.loc 1 1179 0
 423 02ec 1C009FE5 		ldr	r0, .L42
 424 02f0 0010A0E3 		mov	r1, #0
 425 02f4 FEFFFFEB 		bl	CyU3PDmaMultiChannelSetWrapUp
1180:../uvc.c      ****             {
 426              		.loc 1 1180 0
 427 02f8 002050E2 		subs	r2, r0, #0
 428 02fc 0880BD08 		ldmeqfd	sp!, {r3, pc}
1182:../uvc.c      ****             }
 429              		.loc 1 1182 0
 430 0300 0400A0E3 		mov	r0, #4
 431 0304 0C109FE5 		ldr	r1, .L42+8
 432              	.LBE51:
 433              	.LBE50:
1195:../uvc.c      **** 
 434              		.loc 1 1195 0
 435 0308 0840BDE8 		ldmfd	sp!, {r3, lr}
 436              	.LBB53:
 437              	.LBB52:
1182:../uvc.c      ****             }
 438              		.loc 1 1182 0
 439 030c FEFFFFEA 		b	CyU3PDebugPrint
 440              	.L43:
 441              		.align	2
 442              	.L42:
 443 0310 00000000 		.word	glChHandleUVCStream
 444 0314 70000000 		.word	.LC4
 445 0318 50000000 		.word	.LC3
 446              	.LBE52:
 447              	.LBE53:
 448              		.cfi_endproc
 449              	.LFE6:
 451              		.align	2
 452              		.global	esUVCUvcAppDmaCallback
 454              	esUVCUvcAppDmaCallback:
 455              	.LFB7:
1205:../uvc.c      ****     CyU3PDmaBuffer_t DmaBuffer;
 456              		.loc 1 1205 0
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 16
 459              		@ frame_needed = 0, uses_anonymous_args = 0
 460              	.LVL46:
1209:../uvc.c      ****     {
 461              		.loc 1 1209 0
 462 031c 080051E3 		cmp	r1, #8
1205:../uvc.c      ****     CyU3PDmaBuffer_t DmaBuffer;
 463              		.loc 1 1205 0
 464 0320 F0432DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, lr}
 465              	.LCFI4:
 466              		.cfi_def_cfa_offset 28
 467              		.cfi_offset 4, -28
 468              		.cfi_offset 5, -24
 469              		.cfi_offset 6, -20
 470              		.cfi_offset 7, -16
 471              		.cfi_offset 8, -12
 472              		.cfi_offset 9, -8
 473              		.cfi_offset 14, -4
 474 0324 0160A0E1 		mov	r6, r1
 475 0328 1CD04DE2 		sub	sp, sp, #28
 476              	.LCFI5:
 477              		.cfi_def_cfa_offset 56
1205:../uvc.c      ****     CyU3PDmaBuffer_t DmaBuffer;
 478              		.loc 1 1205 0
 479 032c 0050A0E1 		mov	r5, r0
1209:../uvc.c      ****     {
 480              		.loc 1 1209 0
 481 0330 2E00000A 		beq	.L60
1260:../uvc.c      ****     {
 482              		.loc 1 1260 0
 483 0334 100051E3 		cmp	r1, #16
 484 0338 0100000A 		beq	.L61
 485              	.LVL47:
 486              	.L44:
1315:../uvc.c      **** 
 487              		.loc 1 1315 0
 488 033c 1CD08DE2 		add	sp, sp, #28
 489              		@ sp needed
 490 0340 F083BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
 491              	.LVL48:
 492              	.L61:
1262:../uvc.c      **** 
 493              		.loc 1 1262 0
 494 0344 1C429FE5 		ldr	r4, .L67
1265:../uvc.c      **** 
 495              		.loc 1 1265 0
 496 0348 0130A0E3 		mov	r3, #1
1262:../uvc.c      **** 
 497              		.loc 1 1262 0
 498 034c 782094E5 		ldr	r2, [r4, #120]
 499              	.LVL49:
1267:../uvc.c      ****         {
 500              		.loc 1 1267 0
 501 0350 705094E5 		ldr	r5, [r4, #112]
1262:../uvc.c      **** 
 502              		.loc 1 1262 0
 503 0354 012042E2 		sub	r2, r2, #1
1267:../uvc.c      ****         {
 504              		.loc 1 1267 0
 505 0358 030055E1 		cmp	r5, r3
1262:../uvc.c      **** 
 506              		.loc 1 1262 0
 507 035c 782084E5 		str	r2, [r4, #120]
1265:../uvc.c      **** 
 508              		.loc 1 1265 0
 509 0360 803084E5 		str	r3, [r4, #128]
1267:../uvc.c      ****         {
 510              		.loc 1 1267 0
 511 0364 F4FFFF1A 		bne	.L44
1267:../uvc.c      ****         {
 512              		.loc 1 1267 0 is_stmt 0 discriminator 1
 513 0368 787094E5 		ldr	r7, [r4, #120]
 514 036c 000057E3 		cmp	r7, #0
 515 0370 F1FFFF1A 		bne	.L44
1274:../uvc.c      ****             /*
 516              		.loc 1 1274 0 is_stmt 1
 517 0374 F0019FE5 		ldr	r0, .L67+4
 518              	.LVL50:
 519 0378 0230A0E3 		mov	r3, #2
 520 037c 00308DE5 		str	r3, [sp]
 521 0380 0020A0E1 		mov	r2, r0
 522 0384 0730A0E1 		mov	r3, r7
 523 0388 0710A0E1 		mov	r1, r7
 524              	.LVL51:
1269:../uvc.c      ****             glDMATxCount=0;
 525              		.loc 1 1269 0
 526 038c 707084E5 		str	r7, [r4, #112]
1270:../uvc.c      **** #ifdef RESET_TIMER_ENABLE
 527              		.loc 1 1270 0
 528 0390 747084E5 		str	r7, [r4, #116]
1274:../uvc.c      ****             /*
 529              		.loc 1 1274 0
 530 0394 FEFFFFEB 		bl	CyU3PGpifSMSwitch
 531              	.LVL52:
1283:../uvc.c      ****             doLpmDisable = CyTrue;
 532              		.loc 1 1283 0
 533 0398 FEFFFFEB 		bl	CyU3PUsbLPMEnable
 534              	.LVL53:
1289:../uvc.c      ****             {
 535              		.loc 1 1289 0
 536 039c 843094E5 		ldr	r3, [r4, #132]
1284:../uvc.c      **** #ifdef RESET_TIMER_ENABLE
 537              		.loc 1 1284 0
 538 03a0 C8819FE5 		ldr	r8, .L67+8
1289:../uvc.c      ****             {
 539              		.loc 1 1289 0
 540 03a4 010053E3 		cmp	r3, #1
1284:../uvc.c      **** #ifdef RESET_TIMER_ENABLE
 541              		.loc 1 1284 0
 542 03a8 805488E5 		str	r5, [r8, #1152]
1289:../uvc.c      ****             {
 543              		.loc 1 1289 0
 544 03ac 5900000A 		beq	.L62
 545              	.L54:
1296:../uvc.c      ****             {
 546              		.loc 1 1296 0
 547 03b0 8C3094E5 		ldr	r3, [r4, #140]
 548 03b4 ACC19FE5 		ldr	ip, .L67
 549 03b8 010053E3 		cmp	r3, #1
 550 03bc DEFFFF1A 		bne	.L44
1298:../uvc.c      **** 				{
 551              		.loc 1 1298 0
 552 03c0 9020DCE5 		ldrb	r2, [ip, #144]	@ zero_extendqisi2
 553 03c4 030052E3 		cmp	r2, #3
 554 03c8 5D00000A 		beq	.L63
1304:../uvc.c      ****             	{
 555              		.loc 1 1304 0
 556 03cc 000052E3 		cmp	r2, #0
1308:../uvc.c      ****             	}
 557              		.loc 1 1308 0
 558 03d0 8514D805 		ldreqb	r1, [r8, #1157]	@ zero_extendqisi2
1306:../uvc.c      **** 					glStillCaptured = CyTrue;
 559              		.loc 1 1306 0
 560 03d4 8C208C05 		streq	r2, [ip, #140]
1311:../uvc.c      ****             }
 561              		.loc 1 1311 0
 562 03d8 01204212 		subne	r2, r2, #1
1308:../uvc.c      ****             	}
 563              		.loc 1 1308 0
 564 03dc 20202102 		eoreq	r2, r1, #32
1307:../uvc.c      **** 					glUVCHeader[1]^=CY_FX_UVC_HEADER_STILL_IMAGE;
 565              		.loc 1 1307 0
 566 03e0 84308C05 		streq	r3, [ip, #132]
1308:../uvc.c      ****             	}
 567              		.loc 1 1308 0
 568 03e4 8524C805 		streqb	r2, [r8, #1157]
1311:../uvc.c      ****             }
 569              		.loc 1 1311 0
 570 03e8 9020CC15 		strneb	r2, [ip, #144]
 571 03ec D2FFFFEA 		b	.L44
 572              	.LVL54:
 573              	.L60:
1217:../uvc.c      ****         {
 574              		.loc 1 1217 0
 575 03f0 FEFFFFEB 		bl	CyU3PUsbGetSpeed
 576              	.LVL55:
 577 03f4 030050E3 		cmp	r0, #3
 578 03f8 3A00000A 		beq	.L64
 579              	.L46:
1229:../uvc.c      ****         while (status == CY_U3P_SUCCESS)
 580              		.loc 1 1229 0
 581 03fc 08108DE2 		add	r1, sp, #8
 582 0400 0500A0E1 		mov	r0, r5
 583 0404 0020A0E3 		mov	r2, #0
 584 0408 FEFFFFEB 		bl	CyU3PDmaMultiChannelGetBuffer
 585              	.LVL56:
1230:../uvc.c      ****         {
 586              		.loc 1 1230 0
 587 040c 000050E3 		cmp	r0, #0
 588 0410 C9FFFF1A 		bne	.L44
 589 0414 4C419FE5 		ldr	r4, .L67
 590              	.LBB62:
 591              	.LBB63:
 987:../uvc.c      **** 
 592              		.loc 1 987 0
 593 0418 50619FE5 		ldr	r6, .L67+8
 594              	.LBE63:
 595              	.LBE62:
1233:../uvc.c      ****             {
 596              		.loc 1 1233 0
 597 041c 0480A0E1 		mov	r8, r4
1236:../uvc.c      ****             }
 598              		.loc 1 1236 0
 599 0420 0170A0E3 		mov	r7, #1
 600 0424 200000EA 		b	.L53
 601              	.LVL57:
 602              	.L66:
1235:../uvc.c      ****                 glHitFV = CyTrue;
 603              		.loc 1 1235 0
 604 0428 08909DE5 		ldr	r9, [sp, #8]
 605              	.LVL58:
 606              	.LBB67:
 607              	.LBB66:
 987:../uvc.c      **** 
 608              		.loc 1 987 0
 609 042c 0C0049E2 		sub	r0, r9, #12
 610              	.LVL59:
 611 0430 FEFFFFEB 		bl	CyU3PMemCopy
 612              	.LVL60:
 613              	.LBB64:
 614              	.LBB65:
 993:../uvc.c      **** 
 615              		.loc 1 993 0
 616 0434 8534D6E5 		ldrb	r3, [r6, #1157]	@ zero_extendqisi2
 617 0438 013023E2 		eor	r3, r3, #1
 618 043c 8534C6E5 		strb	r3, [r6, #1157]
 996:../uvc.c      ****     }
 619              		.loc 1 996 0
 620 0440 0B3059E5 		ldrb	r3, [r9, #-11]	@ zero_extendqisi2
 621 0444 023083E3 		orr	r3, r3, #2
 622 0448 0B3049E5 		strb	r3, [r9, #-11]
 623              	.LBE65:
 624              	.LBE64:
 625              	.LBE66:
 626              	.LBE67:
1236:../uvc.c      ****             }
 627              		.loc 1 1236 0
 628 044c 707088E5 		str	r7, [r8, #112]
 629              	.LVL61:
 630              	.L50:
1244:../uvc.c      ****             if (status != CY_U3P_SUCCESS)
 631              		.loc 1 1244 0
 632 0450 BC10DDE1 		ldrh	r1, [sp, #12]
 633 0454 0020A0E3 		mov	r2, #0
 634 0458 0C1081E2 		add	r1, r1, #12
 635 045c 0118A0E1 		mov	r1, r1, asl #16
 636 0460 2118A0E1 		mov	r1, r1, lsr #16
 637 0464 0500A0E1 		mov	r0, r5
 638 0468 FEFFFFEB 		bl	CyU3PDmaMultiChannelCommitBuffer
 639              	.LVL62:
1257:../uvc.c      ****         }
 640              		.loc 1 1257 0
 641 046c 08108DE2 		add	r1, sp, #8
1245:../uvc.c      ****             {
 642              		.loc 1 1245 0
 643 0470 002050E2 		subs	r2, r0, #0
1257:../uvc.c      ****         }
 644              		.loc 1 1257 0
 645 0474 0500A0E1 		mov	r0, r5
 646              	.LVL63:
1245:../uvc.c      ****             {
 647              		.loc 1 1245 0
 648 0478 1500001A 		bne	.L65
 649              	.LVL64:
1252:../uvc.c      ****                 glDmaDone++;
 650              		.loc 1 1252 0
 651 047c 743094E5 		ldr	r3, [r4, #116]
 652 0480 013083E2 		add	r3, r3, #1
 653 0484 743084E5 		str	r3, [r4, #116]
1253:../uvc.c      ****             }
 654              		.loc 1 1253 0
 655 0488 783094E5 		ldr	r3, [r4, #120]
 656 048c 013083E2 		add	r3, r3, #1
 657 0490 783084E5 		str	r3, [r4, #120]
1256:../uvc.c      ****             status = CyU3PDmaMultiChannelGetBuffer(chHandle, &DmaBuffer, CYU3P_NO_WAIT);
 658              		.loc 1 1256 0
 659 0494 7C30D4E5 		ldrb	r3, [r4, #124]	@ zero_extendqisi2
 660 0498 013023E2 		eor	r3, r3, #1
 661 049c 7C30C4E5 		strb	r3, [r4, #124]
1257:../uvc.c      ****         }
 662              		.loc 1 1257 0
 663 04a0 FEFFFFEB 		bl	CyU3PDmaMultiChannelGetBuffer
 664              	.LVL65:
1230:../uvc.c      ****         {
 665              		.loc 1 1230 0
 666 04a4 000050E3 		cmp	r0, #0
 667 04a8 A3FFFF1A 		bne	.L44
 668              	.LVL66:
 669              	.L53:
1233:../uvc.c      ****             {
 670              		.loc 1 1233 0
 671 04ac BC00DDE1 		ldrh	r0, [sp, #12]
 672 04b0 BC36D4E1 		ldrh	r3, [r4, #108]
 673              	.LBB68:
 674              	.LBB69:
 987:../uvc.c      **** 
 675              		.loc 1 987 0
 676 04b4 B8109FE5 		ldr	r1, .L67+12
 677              	.LBE69:
 678              	.LBE68:
1233:../uvc.c      ****             {
 679              		.loc 1 1233 0
 680 04b8 030050E1 		cmp	r0, r3
 681              	.LBB72:
 682              	.LBB70:
 987:../uvc.c      **** 
 683              		.loc 1 987 0
 684 04bc 0C20A0E3 		mov	r2, #12
 685              	.LBE70:
 686              	.LBE72:
1233:../uvc.c      ****             {
 687              		.loc 1 1233 0
 688 04c0 D8FFFF3A 		bcc	.L66
1240:../uvc.c      ****             }
 689              		.loc 1 1240 0
 690 04c4 08009DE5 		ldr	r0, [sp, #8]
 691              	.LBB73:
 692              	.LBB71:
 987:../uvc.c      **** 
 693              		.loc 1 987 0
 694 04c8 0C0040E2 		sub	r0, r0, #12
 695              	.LVL67:
 696 04cc FEFFFFEB 		bl	CyU3PMemCopy
 697              	.LVL68:
 698 04d0 DEFFFFEA 		b	.L50
 699              	.LVL69:
 700              	.L65:
 701              	.LBE71:
 702              	.LBE73:
1247:../uvc.c      ****                    break;
 703              		.loc 1 1247 0
 704 04d4 1010A0E3 		mov	r1, #16
 705 04d8 0020A0E3 		mov	r2, #0
 706              	.LVL70:
 707 04dc 84009FE5 		ldr	r0, .L67
 708              	.LVL71:
 709 04e0 FEFFFFEB 		bl	_txe_event_flags_set
 710              	.LVL72:
1248:../uvc.c      ****             }
 711              		.loc 1 1248 0
 712 04e4 94FFFFEA 		b	.L44
 713              	.LVL73:
 714              	.L64:
1217:../uvc.c      ****         {
 715              		.loc 1 1217 0 discriminator 1
 716 04e8 80409FE5 		ldr	r4, .L67+8
 717 04ec 803494E5 		ldr	r3, [r4, #1152]
 718 04f0 000053E3 		cmp	r3, #0
 719 04f4 C0FFFF0A 		beq	.L46
1219:../uvc.c      ****             CyU3PUsbSetLinkPowerState (CyU3PUsbLPM_U0);
 720              		.loc 1 1219 0
 721 04f8 FEFFFFEB 		bl	CyU3PUsbLPMDisable
 722              	.LVL74:
1220:../uvc.c      ****             CyU3PBusyWait (200);
 723              		.loc 1 1220 0
 724 04fc 0000A0E3 		mov	r0, #0
 725 0500 FEFFFFEB 		bl	CyU3PUsbSetLinkPowerState
 726              	.LVL75:
1221:../uvc.c      **** 
 727              		.loc 1 1221 0
 728 0504 C800A0E3 		mov	r0, #200
 729 0508 FEFFFFEB 		bl	CyFx3BusyWait
 730              	.LVL76:
1223:../uvc.c      ****         }
 731              		.loc 1 1223 0
 732 050c 0030A0E3 		mov	r3, #0
 733 0510 803484E5 		str	r3, [r4, #1152]
 734 0514 B8FFFFEA 		b	.L46
 735              	.LVL77:
 736              	.L62:
1292:../uvc.c      ****             	glFrameIndexToSet = glCurrentFrameIndex;
 737              		.loc 1 1292 0
 738 0518 85C4D8E5 		ldrb	ip, [r8, #1157]	@ zero_extendqisi2
1293:../uvc.c      ****             	CyU3PEventSet(&glFxUVCEvent, ES_TIMER_RESET_EVENT,CYU3P_EVENT_OR);
 739              		.loc 1 1293 0
 740 051c 9034D8E5 		ldrb	r3, [r8, #1168]	@ zero_extendqisi2
1292:../uvc.c      ****             	glFrameIndexToSet = glCurrentFrameIndex;
 741              		.loc 1 1292 0
 742 0520 20C02CE2 		eor	ip, ip, #32
1294:../uvc.c      ****             }
 743              		.loc 1 1294 0
 744 0524 0610A0E1 		mov	r1, r6
 745 0528 0720A0E1 		mov	r2, r7
 746 052c 0400A0E1 		mov	r0, r4
1291:../uvc.c      ****             	glUVCHeader[1]^=CY_FX_UVC_HEADER_STILL_IMAGE;
 747              		.loc 1 1291 0
 748 0530 847084E5 		str	r7, [r4, #132]
1292:../uvc.c      ****             	glFrameIndexToSet = glCurrentFrameIndex;
 749              		.loc 1 1292 0
 750 0534 85C4C8E5 		strb	ip, [r8, #1157]
1293:../uvc.c      ****             	CyU3PEventSet(&glFxUVCEvent, ES_TIMER_RESET_EVENT,CYU3P_EVENT_OR);
 751              		.loc 1 1293 0
 752 0538 8830C4E5 		strb	r3, [r4, #136]
1294:../uvc.c      ****             }
 753              		.loc 1 1294 0
 754 053c FEFFFFEB 		bl	_txe_event_flags_set
 755              	.LVL78:
 756 0540 9AFFFFEA 		b	.L54
 757              	.L63:
1300:../uvc.c      ****             		glFrameIndexToSet = 4;
 758              		.loc 1 1300 0
 759 0544 02E0A0E3 		mov	lr, #2
1301:../uvc.c      **** 					CyU3PEventSet(&glFxUVCEvent, ES_TIMER_RESET_EVENT,CYU3P_EVENT_OR);
 760              		.loc 1 1301 0
 761 0548 0430A0E3 		mov	r3, #4
1302:../uvc.c      **** 				}
 762              		.loc 1 1302 0
 763 054c 0C00A0E1 		mov	r0, ip
 764 0550 1010A0E3 		mov	r1, #16
 765 0554 0020A0E3 		mov	r2, #0
1300:../uvc.c      ****             		glFrameIndexToSet = 4;
 766              		.loc 1 1300 0
 767 0558 90E0CCE5 		strb	lr, [ip, #144]
1301:../uvc.c      **** 					CyU3PEventSet(&glFxUVCEvent, ES_TIMER_RESET_EVENT,CYU3P_EVENT_OR);
 768              		.loc 1 1301 0
 769 055c 8830CCE5 		strb	r3, [ip, #136]
1302:../uvc.c      **** 				}
 770              		.loc 1 1302 0
 771 0560 FEFFFFEB 		bl	_txe_event_flags_set
 772              	.LVL79:
 773 0564 74FFFFEA 		b	.L44
 774              	.L68:
 775              		.align	2
 776              	.L67:
 777 0568 00000000 		.word	.LANCHOR0
 778 056c 01010000 		.word	257
 779 0570 00000000 		.word	.LANCHOR1
 780 0574 84040000 		.word	.LANCHOR1+1156
 781              		.cfi_endproc
 782              	.LFE7:
 784              		.align	2
 785              		.global	I2CCmdHandler
 787              	I2CCmdHandler:
 788              	.LFB0:
 339:../uvc.c      **** 	uint8_t buf[2];
 789              		.loc 1 339 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 8
 792              		@ frame_needed = 0, uses_anonymous_args = 0
 793 0578 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 794              	.LCFI6:
 795              		.cfi_def_cfa_offset 36
 796              		.cfi_offset 4, -36
 797              		.cfi_offset 5, -32
 798              		.cfi_offset 6, -28
 799              		.cfi_offset 7, -24
 800              		.cfi_offset 8, -20
 801              		.cfi_offset 9, -16
 802              		.cfi_offset 10, -12
 803              		.cfi_offset 11, -8
 804              		.cfi_offset 14, -4
 342:../uvc.c      **** 	CmdRegLen = I2CCMDArry[1];
 805              		.loc 1 342 0
 806 057c 14419FE5 		ldr	r4, .L75
 339:../uvc.c      **** 	uint8_t buf[2];
 807              		.loc 1 339 0
 808 0580 34D04DE2 		sub	sp, sp, #52
 809              	.LCFI7:
 810              		.cfi_def_cfa_offset 88
 342:../uvc.c      **** 	CmdRegLen = I2CCMDArry[1];
 811              		.loc 1 342 0
 812 0584 9450D4E5 		ldrb	r5, [r4, #148]	@ zero_extendqisi2
 813              	.LVL80:
 347:../uvc.c      **** 			I2CCMDArry[0], I2CCMDArry[1], I2CCMDArry[2], I2CCMDArry[3], I2CCMDArry[4], I2CCMDArry[5],
 814              		.loc 1 347 0
 815 0588 9E10D4E5 		ldrb	r1, [r4, #158]	@ zero_extendqisi2
 344:../uvc.c      **** 	VdRingBuf *cmdQuptr = &cmdQu;
 816              		.loc 1 344 0
 817 058c 9C60D4E5 		ldrb	r6, [r4, #156]	@ zero_extendqisi2
 818              	.LVL81:
 347:../uvc.c      **** 			I2CCMDArry[0], I2CCMDArry[1], I2CCMDArry[2], I2CCMDArry[3], I2CCMDArry[4], I2CCMDArry[5],
 819              		.loc 1 347 0
 820 0590 96B0D4E5 		ldrb	fp, [r4, #150]	@ zero_extendqisi2
 821 0594 97A0D4E5 		ldrb	r10, [r4, #151]	@ zero_extendqisi2
 822 0598 9890D4E5 		ldrb	r9, [r4, #152]	@ zero_extendqisi2
 823 059c 9980D4E5 		ldrb	r8, [r4, #153]	@ zero_extendqisi2
 824 05a0 9A70D4E5 		ldrb	r7, [r4, #154]	@ zero_extendqisi2
 825 05a4 9BE0D4E5 		ldrb	lr, [r4, #155]	@ zero_extendqisi2
 826 05a8 9DC0D4E5 		ldrb	ip, [r4, #157]	@ zero_extendqisi2
 827 05ac 9530D4E5 		ldrb	r3, [r4, #149]	@ zero_extendqisi2
 828 05b0 0400A0E3 		mov	r0, #4
 829 05b4 20108DE5 		str	r1, [sp, #32]
 830 05b8 0520A0E1 		mov	r2, r5
 831 05bc 18608DE5 		str	r6, [sp, #24]
 832 05c0 00B08DE5 		str	fp, [sp]
 833 05c4 04A08DE5 		str	r10, [sp, #4]
 834 05c8 08908DE5 		str	r9, [sp, #8]
 835 05cc 0C808DE5 		str	r8, [sp, #12]
 836 05d0 10708DE5 		str	r7, [sp, #16]
 837 05d4 14E08DE5 		str	lr, [sp, #20]
 838 05d8 1CC08DE5 		str	ip, [sp, #28]
 839 05dc B8109FE5 		ldr	r1, .L75+4
 840 05e0 FEFFFFEB 		bl	CyU3PDebugPrint
 841              	.LVL82:
 351:../uvc.c      **** 	{
 842              		.loc 1 351 0
 843 05e4 000055E3 		cmp	r5, #0
 844 05e8 0300000A 		beq	.L73
 376:../uvc.c      **** 		if(1||(CmdRegLen == 4)){//TODO cmdque mutual
 845              		.loc 1 376 0
 846 05ec 010055E3 		cmp	r5, #1
 847 05f0 1700000A 		beq	.L74
 391:../uvc.c      **** 
 848              		.loc 1 391 0
 849 05f4 34D08DE2 		add	sp, sp, #52
 850              		@ sp needed
 851 05f8 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
 852              	.LVL83:
 853              	.L73:
 367:../uvc.c      **** 			I2CCMDArry[9] = buf[0];
 854              		.loc 1 367 0
 855 05fc 9600D4E5 		ldrb	r0, [r4, #150]	@ zero_extendqisi2
 856 0600 9710D4E5 		ldrb	r1, [r4, #151]	@ zero_extendqisi2
 857 0604 9CE0D4E5 		ldrb	lr, [r4, #156]	@ zero_extendqisi2
 858 0608 28C08DE2 		add	ip, sp, #40
 859 060c 9930D4E5 		ldrb	r3, [r4, #153]	@ zero_extendqisi2
 860 0610 9820D4E5 		ldrb	r2, [r4, #152]	@ zero_extendqisi2
 861 0614 04C08DE5 		str	ip, [sp, #4]
 353:../uvc.c      **** #if 0 //for debugging
 862              		.loc 1 353 0
 863 0618 0FC0A0E3 		mov	ip, #15
 367:../uvc.c      **** 			I2CCMDArry[9] = buf[0];
 864              		.loc 1 367 0
 865 061c 00E08DE5 		str	lr, [sp]
 866 0620 011081E3 		orr	r1, r1, #1
 353:../uvc.c      **** #if 0 //for debugging
 867              		.loc 1 353 0
 868 0624 9FC0C4E5 		strb	ip, [r4, #159]
 367:../uvc.c      **** 			I2CCMDArry[9] = buf[0];
 869              		.loc 1 367 0
 870 0628 010080E3 		orr	r0, r0, #1
 871 062c FEFFFFEB 		bl	SensorRead2B
 872              	.LVL84:
 368:../uvc.c      **** 			if(CmdDataLen == 2){
 873              		.loc 1 368 0
 874 0630 2830DDE5 		ldrb	r3, [sp, #40]	@ zero_extendqisi2
 369:../uvc.c      **** 				I2CCMDArry[10] = buf[1];
 875              		.loc 1 369 0
 876 0634 020056E3 		cmp	r6, #2
 368:../uvc.c      **** 			if(CmdDataLen == 2){
 877              		.loc 1 368 0
 878 0638 9D30C4E5 		strb	r3, [r4, #157]
 370:../uvc.c      **** 			}
 879              		.loc 1 370 0
 880 063c 2930DD05 		ldreqb	r3, [sp, #41]	@ zero_extendqisi2
 881 0640 9E30C405 		streqb	r3, [r4, #158]
 372:../uvc.c      **** 		}else{//not support currently
 882              		.loc 1 372 0
 883 0644 0030E0E3 		mvn	r3, #0
 884 0648 9F30C4E5 		strb	r3, [r4, #159]
 391:../uvc.c      **** 
 885              		.loc 1 391 0
 886 064c 34D08DE2 		add	sp, sp, #52
 887              		@ sp needed
 888 0650 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
 889              	.LVL85:
 890              	.L74:
 385:../uvc.c      **** 		}else{//not support currently
 891              		.loc 1 385 0
 892 0654 9600D4E5 		ldrb	r0, [r4, #150]	@ zero_extendqisi2
 893 0658 9710D4E5 		ldrb	r1, [r4, #151]	@ zero_extendqisi2
 894 065c 9C50D4E5 		ldrb	r5, [r4, #156]	@ zero_extendqisi2
 895              	.LVL86:
 378:../uvc.c      **** 			buf[1] = I2CCMDArry[10];
 896              		.loc 1 378 0
 897 0660 9DE0D4E5 		ldrb	lr, [r4, #157]	@ zero_extendqisi2
 379:../uvc.c      **** 			if(0 && (I2CCMDArry[3]&I2C_WR_MASK)==0x82 && (I2CCMDArry[4]==0x30) && (I2CCMDArry[5]==0x10)){
 898              		.loc 1 379 0
 899 0664 9EC0D4E5 		ldrb	ip, [r4, #158]	@ zero_extendqisi2
 385:../uvc.c      **** 		}else{//not support currently
 900              		.loc 1 385 0
 901 0668 9820D4E5 		ldrb	r2, [r4, #152]	@ zero_extendqisi2
 902 066c 9930D4E5 		ldrb	r3, [r4, #153]	@ zero_extendqisi2
 903 0670 28408DE2 		add	r4, sp, #40
 904 0674 FE1001E2 		and	r1, r1, #254
 905 0678 00508DE5 		str	r5, [sp]
 906 067c 04408DE5 		str	r4, [sp, #4]
 907 0680 FE0000E2 		and	r0, r0, #254
 378:../uvc.c      **** 			buf[1] = I2CCMDArry[10];
 908              		.loc 1 378 0
 909 0684 28E0CDE5 		strb	lr, [sp, #40]
 379:../uvc.c      **** 			if(0 && (I2CCMDArry[3]&I2C_WR_MASK)==0x82 && (I2CCMDArry[4]==0x30) && (I2CCMDArry[5]==0x10)){
 910              		.loc 1 379 0
 911 0688 29C0CDE5 		strb	ip, [sp, #41]
 385:../uvc.c      **** 		}else{//not support currently
 912              		.loc 1 385 0
 913 068c FEFFFFEB 		bl	SensorWrite2B
 914              	.LVL87:
 391:../uvc.c      **** 
 915              		.loc 1 391 0
 916 0690 34D08DE2 		add	sp, sp, #52
 917              		@ sp needed
 918 0694 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
 919              	.LVL88:
 920              	.L76:
 921              		.align	2
 922              	.L75:
 923 0698 00000000 		.word	.LANCHOR0
 924 069c 90000000 		.word	.LC5
 925              		.cfi_endproc
 926              	.LFE0:
 928              		.align	2
 929              		.global	ControlHandle
 931              	ControlHandle:
 932              	.LFB1:
 393:../uvc.c      ****     CyU3PReturnStatus_t apiRetStatus = !CY_U3P_SUCCESS;
 933              		.loc 1 393 0
 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 24
 936              		@ frame_needed = 0, uses_anonymous_args = 0
 937              	.LVL89:
 938 06a0 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 939              	.LCFI8:
 940              		.cfi_def_cfa_offset 36
 941              		.cfi_offset 4, -36
 942              		.cfi_offset 5, -32
 943              		.cfi_offset 6, -28
 944              		.cfi_offset 7, -24
 945              		.cfi_offset 8, -20
 946              		.cfi_offset 9, -16
 947              		.cfi_offset 10, -12
 948              		.cfi_offset 11, -8
 949              		.cfi_offset 14, -4
 401:../uvc.c      ****         RegAdd1 = ExUCtrlParArry[locCtrlID][1];
 950              		.loc 1 401 0
 951 06a4 9C6E9FE5 		ldr	r6, .L169
 399:../uvc.c      ****     if(CtrlID >= EXUAOFFSET){//the extension command over 32.
 952              		.loc 1 399 0
 953 06a8 208040E2 		sub	r8, r0, #32
 400:../uvc.c      ****     	RegAdd0 = ExUCtrlParArry[locCtrlID][0];
 954              		.loc 1 400 0
 955 06ac 230050E3 		cmp	r0, #35
 393:../uvc.c      ****     CyU3PReturnStatus_t apiRetStatus = !CY_U3P_SUCCESS;
 956              		.loc 1 393 0
 957 06b0 2CD04DE2 		sub	sp, sp, #44
 958              	.LCFI9:
 959              		.cfi_def_cfa_offset 80
 393:../uvc.c      ****     CyU3PReturnStatus_t apiRetStatus = !CY_U3P_SUCCESS;
 960              		.loc 1 393 0
 961 06b4 0040A0E1 		mov	r4, r0
 399:../uvc.c      ****     if(CtrlID >= EXUAOFFSET){//the extension command over 32.
 962              		.loc 1 399 0
 963 06b8 FF8008E2 		and	r8, r8, #255
 964              	.LVL90:
 400:../uvc.c      ****     	RegAdd0 = ExUCtrlParArry[locCtrlID][0];
 965              		.loc 1 400 0
 966 06bc 2A00009A 		bls	.L78
 401:../uvc.c      ****         RegAdd1 = ExUCtrlParArry[locCtrlID][1];
 967              		.loc 1 401 0
 968 06c0 882088E0 		add	r2, r8, r8, asl #1
 969 06c4 8221A0E1 		mov	r2, r2, asl #3
 970 06c8 023086E0 		add	r3, r6, r2
 402:../uvc.c      ****         devAdd = ExUCtrlParArry[locCtrlID][15];
 971              		.loc 1 402 0
 972 06cc 01C0D3E5 		ldrb	ip, [r3, #1]	@ zero_extendqisi2
 403:../uvc.c      ****         Len = ExUCtrlParArry[locCtrlID][2];
 973              		.loc 1 403 0
 974 06d0 0FA0D3E5 		ldrb	r10, [r3, #15]	@ zero_extendqisi2
 404:../uvc.c      ****     }else{
 975              		.loc 1 404 0
 976 06d4 0290D3E5 		ldrb	r9, [r3, #2]	@ zero_extendqisi2
 415:../uvc.c      ****     /*
 977              		.loc 1 415 0
 978 06d8 6C3E9FE5 		ldr	r3, .L169+4
 401:../uvc.c      ****         RegAdd1 = ExUCtrlParArry[locCtrlID][1];
 979              		.loc 1 401 0
 980 06dc 02B0D6E7 		ldrb	fp, [r6, r2]	@ zero_extendqisi2
 981              	.LVL91:
 415:../uvc.c      ****     /*
 982              		.loc 1 415 0
 983 06e0 0050D3E5 		ldrb	r5, [r3]	@ zero_extendqisi2
 984              	.LVL92:
 423:../uvc.c      **** 		 {
 985              		.loc 1 423 0
 986 06e4 830055E3 		cmp	r5, #131
 987 06e8 2900000A 		beq	.L81
 988              	.LVL93:
 989              	.L167:
 990 06ec 3200009A 		bls	.L166
 991 06f0 850055E3 		cmp	r5, #133
 992 06f4 B800000A 		beq	.L86
 993 06f8 C300003A 		bcc	.L87
 994 06fc 860055E3 		cmp	r5, #134
 995 0700 7500000A 		beq	.L88
 996 0704 870055E3 		cmp	r5, #135
 997 0708 AA00001A 		bne	.L80
 643:../uvc.c      **** 				 glEp0Buffer[0] = ExUCtrlParArry[locCtrlID][11];//ext_control array;
 998              		.loc 1 643 0
 999 070c 230054E3 		cmp	r4, #35
 1000 0710 CD00009A 		bls	.L122
 644:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][12];
 1001              		.loc 1 644 0
 1002 0714 888088E0 		add	r8, r8, r8, asl #1
 1003              	.LVL94:
 1004 0718 886186E0 		add	r6, r6, r8, asl #3
 1005 071c 2C7E9FE5 		ldr	r7, .L169+8
 1006 0720 0B20D6E5 		ldrb	r2, [r6, #11]	@ zero_extendqisi2
 645:../uvc.c      **** 		 	 }
 1007              		.loc 1 645 0
 1008 0724 0C30D6E5 		ldrb	r3, [r6, #12]	@ zero_extendqisi2
 644:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][12];
 1009              		.loc 1 644 0
 1010 0728 A020C7E5 		strb	r2, [r7, #160]
 645:../uvc.c      **** 		 	 }
 1011              		.loc 1 645 0
 1012 072c A130C7E5 		strb	r3, [r7, #161]
 1013              	.L123:
 657:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 1014              		.loc 1 657 0
 1015 0730 0900A0E1 		mov	r0, r9
 1016              	.LVL95:
 1017 0734 181E9FE5 		ldr	r1, .L169+12
 1018 0738 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 1019              	.LVL96:
 1020 073c A060D7E5 		ldrb	r6, [r7, #160]	@ zero_extendqisi2
 659:../uvc.c      **** 		 case CY_FX_USB_UVC_SET_CUR_REQ:
 1021              		.loc 1 659 0
 1022 0740 FF80A0E3 		mov	r8, #255
 1023 0744 0830A0E1 		mov	r3, r8
 1024 0748 0840A0E1 		mov	r4, r8
 1025              	.LVL97:
 1026              	.L90:
 957:../uvc.c      **** }
 1027              		.loc 1 957 0
 1028 074c 48018DE8 		stmia	sp, {r3, r6, r8}
 1029 0750 001E9FE5 		ldr	r1, .L169+16
 1030 0754 0520A0E1 		mov	r2, r5
 1031 0758 0430A0E1 		mov	r3, r4
 1032 075c 0400A0E3 		mov	r0, #4
 1033 0760 FEFFFFEB 		bl	CyU3PDebugPrint
 1034              	.LVL98:
 958:../uvc.c      **** 
 1035              		.loc 1 958 0
 1036 0764 2CD08DE2 		add	sp, sp, #44
 1037              		@ sp needed
 1038 0768 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1039              	.LVL99:
 1040              	.L78:
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 1041              		.loc 1 406 0
 1042 076c 803080E0 		add	r3, r0, r0, asl #1
 1043 0770 833186E0 		add	r3, r6, r3, asl #3
 1044 0774 80B1D3E5 		ldrb	fp, [r3, #384]	@ zero_extendqisi2
 1045              	.LVL100:
 407:../uvc.c      **** 		devAdd = CtrlParArry[CtrlID][15];
 1046              		.loc 1 407 0
 1047 0778 81C1D3E5 		ldrb	ip, [r3, #385]	@ zero_extendqisi2
 1048              	.LVL101:
 408:../uvc.c      **** 		Len = CtrlParArry[CtrlID][2];
 1049              		.loc 1 408 0
 1050 077c 8FA1D3E5 		ldrb	r10, [r3, #399]	@ zero_extendqisi2
 1051              	.LVL102:
 409:../uvc.c      ****     }
 1052              		.loc 1 409 0
 1053 0780 8291D3E5 		ldrb	r9, [r3, #386]	@ zero_extendqisi2
 1054              	.LVL103:
 415:../uvc.c      ****     /*
 1055              		.loc 1 415 0
 1056 0784 C03D9FE5 		ldr	r3, .L169+4
 1057              	.LVL104:
 1058 0788 0050D3E5 		ldrb	r5, [r3]	@ zero_extendqisi2
 1059              	.LVL105:
 423:../uvc.c      **** 		 {
 1060              		.loc 1 423 0
 1061 078c 830055E3 		cmp	r5, #131
 1062 0790 D5FFFF1A 		bne	.L167
 1063              	.LVL106:
 1064              	.L81:
 598:../uvc.c      **** 				 glEp0Buffer[0] = ExUCtrlParArry[locCtrlID][5];//ext_control array;
 1065              		.loc 1 598 0
 1066 0794 230054E3 		cmp	r4, #35
 1067 0798 C100009A 		bls	.L115
 599:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][6];
 1068              		.loc 1 599 0
 1069 079c 888088E0 		add	r8, r8, r8, asl #1
 1070              	.LVL107:
 1071 07a0 886186E0 		add	r6, r6, r8, asl #3
 1072 07a4 A47D9FE5 		ldr	r7, .L169+8
 1073 07a8 0520D6E5 		ldrb	r2, [r6, #5]	@ zero_extendqisi2
 600:../uvc.c      **** 		 	 }
 1074              		.loc 1 600 0
 1075 07ac 0630D6E5 		ldrb	r3, [r6, #6]	@ zero_extendqisi2
 599:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][6];
 1076              		.loc 1 599 0
 1077 07b0 A020C7E5 		strb	r2, [r7, #160]
 600:../uvc.c      **** 		 	 }
 1078              		.loc 1 600 0
 1079 07b4 A130C7E5 		strb	r3, [r7, #161]
 1080 07b8 DCFFFFEA 		b	.L123
 1081              	.LVL108:
 1082              	.L166:
 423:../uvc.c      **** 		 {
 1083              		.loc 1 423 0
 1084 07bc 810055E3 		cmp	r5, #129
 1085 07c0 5600000A 		beq	.L83
 1086 07c4 3A00008A 		bhi	.L84
 1087 07c8 010055E3 		cmp	r5, #1
 1088 07cc 7900001A 		bne	.L80
 661:../uvc.c      **** 				  glEp0Buffer, &readCount);
 1089              		.loc 1 661 0
 1090 07d0 787D9FE5 		ldr	r7, .L169+8
 1091 07d4 26208DE2 		add	r2, sp, #38
 1092 07d8 2000A0E3 		mov	r0, #32
 1093              	.LVL109:
 1094 07dc A01087E2 		add	r1, r7, #160
 1095 07e0 10C08DE5 		str	ip, [sp, #16]
 1096 07e4 FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 1097              	.LVL110:
 663:../uvc.c      **** 			   {
 1098              		.loc 1 663 0
 1099 07e8 10C09DE5 		ldr	ip, [sp, #16]
 1100 07ec 002050E2 		subs	r2, r0, #0
 1101 07f0 0C03001A 		bne	.L125
 665:../uvc.c      **** 				  Data1 = glEp0Buffer[1];
 1102              		.loc 1 665 0
 1103 07f4 A000D7E5 		ldrb	r0, [r7, #160]	@ zero_extendqisi2
 1104              	.LVL111:
 666:../uvc.c      **** 				  getData = glEp0Buffer[0];
 1105              		.loc 1 666 0
 1106 07f8 A120D7E5 		ldrb	r2, [r7, #161]	@ zero_extendqisi2
 1107              	.LVL112:
 668:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 1108              		.loc 1 668 0
 1109 07fc A230D7E5 		ldrb	r3, [r7, #162]	@ zero_extendqisi2
 665:../uvc.c      **** 				  Data1 = glEp0Buffer[1];
 1110              		.loc 1 665 0
 1111 0800 14008DE5 		str	r0, [sp, #20]
 1112              	.LVL113:
 666:../uvc.c      **** 				  getData = glEp0Buffer[0];
 1113              		.loc 1 666 0
 1114 0804 1C208DE5 		str	r2, [sp, #28]
 1115              	.LVL114:
 668:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 1116              		.loc 1 668 0
 1117 0808 18308DE5 		str	r3, [sp, #24]
 1118              	.LVL115:
 672:../uvc.c      **** 					 {
 1119              		.loc 1 672 0
 1120 080c 260054E3 		cmp	r4, #38
 1121 0810 04F19F97 		ldrls	pc, [pc, r4, asl #2]
 1122 0814 E90200EA 		b	.L126
 1123              	.L128:
 1124 0818 24100000 		.word	.L127
 1125 081c C0130000 		.word	.L126
 1126 0820 C0130000 		.word	.L126
 1127 0824 C0130000 		.word	.L126
 1128 0828 DC0F0000 		.word	.L129
 1129 082c 940E0000 		.word	.L130
 1130 0830 100E0000 		.word	.L131
 1131 0834 C0130000 		.word	.L126
 1132 0838 C0130000 		.word	.L126
 1133 083c C0130000 		.word	.L126
 1134 0840 C0130000 		.word	.L126
 1135 0844 840D0000 		.word	.L132
 1136 0848 C0130000 		.word	.L126
 1137 084c C0130000 		.word	.L126
 1138 0850 C0130000 		.word	.L126
 1139 0854 C0130000 		.word	.L126
 1140 0858 FC0C0000 		.word	.L133
 1141 085c C0130000 		.word	.L126
 1142 0860 C0130000 		.word	.L126
 1143 0864 C0130000 		.word	.L126
 1144 0868 C0130000 		.word	.L126
 1145 086c C0130000 		.word	.L126
 1146 0870 C0130000 		.word	.L126
 1147 0874 C0130000 		.word	.L126
 1148 0878 C0130000 		.word	.L126
 1149 087c 00120000 		.word	.L134
 1150 0880 60110000 		.word	.L135
 1151 0884 C0130000 		.word	.L126
 1152 0888 50110000 		.word	.L136
 1153 088c C0130000 		.word	.L126
 1154 0890 F0100000 		.word	.L137
 1155 0894 28130000 		.word	.L138
 1156 0898 C0130000 		.word	.L126
 1157 089c C0130000 		.word	.L126
 1158 08a0 C0130000 		.word	.L126
 1159 08a4 C0130000 		.word	.L126
 1160 08a8 90120000 		.word	.L139
 1161 08ac 58130000 		.word	.L140
 1162 08b0 940C0000 		.word	.L141
 1163              	.LVL116:
 1164              	.L84:
 579:../uvc.c      **** 				 glEp0Buffer[0] = ExUCtrlParArry[locCtrlID][3];//ext_control array;
 1165              		.loc 1 579 0
 1166 08b4 230054E3 		cmp	r4, #35
 1167 08b8 6D00009A 		bls	.L112
 580:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][4];
 1168              		.loc 1 580 0
 1169 08bc 888088E0 		add	r8, r8, r8, asl #1
 1170              	.LVL117:
 1171 08c0 886186E0 		add	r6, r6, r8, asl #3
 1172 08c4 847C9FE5 		ldr	r7, .L169+8
 1173 08c8 0320D6E5 		ldrb	r2, [r6, #3]	@ zero_extendqisi2
 581:../uvc.c      **** 		 	 }
 1174              		.loc 1 581 0
 1175 08cc 0430D6E5 		ldrb	r3, [r6, #4]	@ zero_extendqisi2
 580:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][4];
 1176              		.loc 1 580 0
 1177 08d0 A020C7E5 		strb	r2, [r7, #160]
 581:../uvc.c      **** 		 	 }
 1178              		.loc 1 581 0
 1179 08d4 A130C7E5 		strb	r3, [r7, #161]
 1180 08d8 94FFFFEA 		b	.L123
 1181              	.LVL118:
 1182              	.L88:
 632:../uvc.c      **** 				 glEp0Buffer[0] = ExUCtrlParArry[locCtrlID][9];//ext_control array;
 1183              		.loc 1 632 0
 1184 08dc 230054E3 		cmp	r4, #35
 633:../uvc.c      **** 		 	 }
 1185              		.loc 1 633 0
 1186 08e0 88808880 		addhi	r8, r8, r8, asl #1
 1187              	.LVL119:
 636:../uvc.c      **** 		 	 }
 1188              		.loc 1 636 0
 1189 08e4 84408490 		addls	r4, r4, r4, asl #1
 633:../uvc.c      **** 		 	 }
 1190              		.loc 1 633 0
 1191 08e8 88618680 		addhi	r6, r6, r8, asl #3
 636:../uvc.c      **** 		 	 }
 1192              		.loc 1 636 0
 1193 08ec 84618690 		addls	r6, r6, r4, asl #3
 633:../uvc.c      **** 		 	 }
 1194              		.loc 1 633 0
 1195 08f0 0930D685 		ldrhib	r3, [r6, #9]	@ zero_extendqisi2
 636:../uvc.c      **** 		 	 }
 1196              		.loc 1 636 0
 1197 08f4 8931D695 		ldrlsb	r3, [r6, #393]	@ zero_extendqisi2
 1198 08f8 506C9FE5 		ldr	r6, .L169+8
 641:../uvc.c      **** 		 case CY_FX_USB_UVC_GET_DEF_REQ:
 1199              		.loc 1 641 0
 1200 08fc FF80A0E3 		mov	r8, #255
 1201 0900 0610A0E1 		mov	r1, r6
 1202 0904 A030E1E5 		strb	r3, [r1, #160]!
 638:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 1203              		.loc 1 638 0
 1204 0908 0100A0E3 		mov	r0, #1
 1205              	.LVL120:
 1206 090c FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 1207              	.LVL121:
 641:../uvc.c      **** 		 case CY_FX_USB_UVC_GET_DEF_REQ:
 1208              		.loc 1 641 0
 1209 0910 0840A0E1 		mov	r4, r8
 1210 0914 A060D6E5 		ldrb	r6, [r6, #160]	@ zero_extendqisi2
 1211 0918 0830A0E1 		mov	r3, r8
 1212 091c 8AFFFFEA 		b	.L90
 1213              	.LVL122:
 1214              	.L83:
 434:../uvc.c      **** 			 {
 1215              		.loc 1 434 0
 1216 0920 053044E2 		sub	r3, r4, #5
 1217 0924 210053E3 		cmp	r3, #33
 1218 0928 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 1219 092c CA0000EA 		b	.L91
 1220              	.L93:
 1221 0930 DC0B0000 		.word	.L92
 1222 0934 5C0C0000 		.word	.L91
 1223 0938 5C0C0000 		.word	.L91
 1224 093c 5C0C0000 		.word	.L91
 1225 0940 5C0C0000 		.word	.L91
 1226 0944 5C0C0000 		.word	.L91
 1227 0948 000C0000 		.word	.L94
 1228 094c 5C0C0000 		.word	.L91
 1229 0950 5C0C0000 		.word	.L91
 1230 0954 5C0C0000 		.word	.L91
 1231 0958 5C0C0000 		.word	.L91
 1232 095c 5C0C0000 		.word	.L91
 1233 0960 5C0C0000 		.word	.L91
 1234 0964 5C0C0000 		.word	.L91
 1235 0968 5C0C0000 		.word	.L91
 1236 096c 5C0C0000 		.word	.L91
 1237 0970 5C0C0000 		.word	.L91
 1238 0974 5C0C0000 		.word	.L91
 1239 0978 5C0C0000 		.word	.L91
 1240 097c 5C0C0000 		.word	.L91
 1241 0980 880B0000 		.word	.L95
 1242 0984 5C0C0000 		.word	.L91
 1243 0988 5C0C0000 		.word	.L91
 1244 098c 540B0000 		.word	.L96
 1245 0990 5C0C0000 		.word	.L91
 1246 0994 5C0C0000 		.word	.L91
 1247 0998 0C0B0000 		.word	.L97
 1248 099c 5C0C0000 		.word	.L91
 1249 09a0 5C0C0000 		.word	.L91
 1250 09a4 5C0C0000 		.word	.L91
 1251 09a8 5C0C0000 		.word	.L91
 1252 09ac D40A0000 		.word	.L98
 1253 09b0 D40A0000 		.word	.L98
 1254 09b4 D40A0000 		.word	.L98
 1255              	.L80:
 954:../uvc.c      **** 			  break;
 1256              		.loc 1 954 0
 1257 09b8 0000A0E3 		mov	r0, #0
 1258              	.LVL123:
 955:../uvc.c      **** 		 }
 1259              		.loc 1 955 0
 1260 09bc FF80A0E3 		mov	r8, #255
 1261              	.LVL124:
 954:../uvc.c      **** 			  break;
 1262              		.loc 1 954 0
 1263 09c0 0020A0E1 		mov	r2, r0
 1264 09c4 0110A0E3 		mov	r1, #1
 1265 09c8 FEFFFFEB 		bl	CyU3PUsbStall
 1266              	.LVL125:
 955:../uvc.c      **** 		 }
 1267              		.loc 1 955 0
 1268 09cc 0860A0E1 		mov	r6, r8
 1269 09d0 0830A0E1 		mov	r3, r8
 1270 09d4 0840A0E1 		mov	r4, r8
 1271              	.LVL126:
 1272 09d8 5BFFFFEA 		b	.L90
 1273              	.LVL127:
 1274              	.L86:
 427:../uvc.c      **** 			  glEp0Buffer[1] = 0;
 1275              		.loc 1 427 0
 1276 09dc 6C6B9FE5 		ldr	r6, .L169+8
 428:../uvc.c      **** 			  CyU3PUsbSendEP0Data (2, (uint8_t *)glEp0Buffer);
 1277              		.loc 1 428 0
 1278 09e0 0030A0E3 		mov	r3, #0
 429:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 1279              		.loc 1 429 0
 1280 09e4 A01086E2 		add	r1, r6, #160
 431:../uvc.c      **** 		 case CY_FX_USB_UVC_GET_CUR_REQ: /* Current value. */
 1281              		.loc 1 431 0
 1282 09e8 FF80A0E3 		mov	r8, #255
 1283              	.LVL128:
 429:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 1284              		.loc 1 429 0
 1285 09ec 0200A0E3 		mov	r0, #2
 1286              	.LVL129:
 428:../uvc.c      **** 			  CyU3PUsbSendEP0Data (2, (uint8_t *)glEp0Buffer);
 1287              		.loc 1 428 0
 1288 09f0 A130C6E5 		strb	r3, [r6, #161]
 427:../uvc.c      **** 			  glEp0Buffer[1] = 0;
 1289              		.loc 1 427 0
 1290 09f4 A090C6E5 		strb	r9, [r6, #160]
 431:../uvc.c      **** 		 case CY_FX_USB_UVC_GET_CUR_REQ: /* Current value. */
 1291              		.loc 1 431 0
 1292 09f8 0840A0E1 		mov	r4, r8
 1293              	.LVL130:
 429:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 1294              		.loc 1 429 0
 1295 09fc FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 1296              	.LVL131:
 1297 0a00 A060D6E5 		ldrb	r6, [r6, #160]	@ zero_extendqisi2
 431:../uvc.c      **** 		 case CY_FX_USB_UVC_GET_CUR_REQ: /* Current value. */
 1298              		.loc 1 431 0
 1299 0a04 0830A0E1 		mov	r3, r8
 1300 0a08 4FFFFFEA 		b	.L90
 1301              	.LVL132:
 1302              	.L87:
 616:../uvc.c      **** 				 glEp0Buffer[0] = ExUCtrlParArry[locCtrlID][7];//ext_control array;
 1303              		.loc 1 616 0
 1304 0a0c 230054E3 		cmp	r4, #35
 617:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][8];
 1305              		.loc 1 617 0
 1306 0a10 88808880 		addhi	r8, r8, r8, asl #1
 1307              	.LVL133:
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 1308              		.loc 1 623 0
 1309 0a14 84408490 		addls	r4, r4, r4, asl #1
 617:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][8];
 1310              		.loc 1 617 0
 1311 0a18 88618680 		addhi	r6, r6, r8, asl #3
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 1312              		.loc 1 623 0
 1313 0a1c 84618690 		addls	r6, r6, r4, asl #3
 1314 0a20 287B9FE5 		ldr	r7, .L169+8
 617:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][8];
 1315              		.loc 1 617 0
 1316 0a24 0710D685 		ldrhib	r1, [r6, #7]	@ zero_extendqisi2
 618:../uvc.c      **** 				 glEp0Buffer[2] = 0;
 1317              		.loc 1 618 0
 1318 0a28 0820D685 		ldrhib	r2, [r6, #8]	@ zero_extendqisi2
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 1319              		.loc 1 623 0
 1320 0a2c 8711D695 		ldrlsb	r1, [r6, #391]	@ zero_extendqisi2
 624:../uvc.c      **** 			  glEp0Buffer[2] = 0;
 1321              		.loc 1 624 0
 1322 0a30 8821D695 		ldrlsb	r2, [r6, #392]	@ zero_extendqisi2
 625:../uvc.c      **** 			  glEp0Buffer[3] = 0;
 1323              		.loc 1 625 0
 1324 0a34 0030A0E3 		mov	r3, #0
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 1325              		.loc 1 623 0
 1326 0a38 A010C7E5 		strb	r1, [r7, #160]
 624:../uvc.c      **** 			  glEp0Buffer[2] = 0;
 1327              		.loc 1 624 0
 1328 0a3c A120C7E5 		strb	r2, [r7, #161]
 625:../uvc.c      **** 			  glEp0Buffer[3] = 0;
 1329              		.loc 1 625 0
 1330 0a40 A230C7E5 		strb	r3, [r7, #162]
 626:../uvc.c      **** 		 	 }
 1331              		.loc 1 626 0
 1332 0a44 A330C7E5 		strb	r3, [r7, #163]
 1333 0a48 38FFFFEA 		b	.L123
 1334              	.LVL134:
 1335              	.L122:
 648:../uvc.c      **** 				  glEp0Buffer[0] = CtrlParArry[CtrlID][11];
 1336              		.loc 1 648 0
 1337 0a4c 0B0054E3 		cmp	r4, #11
 1338 0a50 7800000A 		beq	.L168
 654:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][12];
 1339              		.loc 1 654 0
 1340 0a54 844084E0 		add	r4, r4, r4, asl #1
 1341 0a58 846186E0 		add	r6, r6, r4, asl #3
 1342 0a5c EC7A9FE5 		ldr	r7, .L169+8
 1343 0a60 8B21D6E5 		ldrb	r2, [r6, #395]	@ zero_extendqisi2
 655:../uvc.c      **** 			 }
 1344              		.loc 1 655 0
 1345 0a64 8C31D6E5 		ldrb	r3, [r6, #396]	@ zero_extendqisi2
 654:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][12];
 1346              		.loc 1 654 0
 1347 0a68 A020C7E5 		strb	r2, [r7, #160]
 655:../uvc.c      **** 			 }
 1348              		.loc 1 655 0
 1349 0a6c A130C7E5 		strb	r3, [r7, #161]
 1350 0a70 2EFFFFEA 		b	.L123
 1351              	.L112:
 584:../uvc.c      **** 				 glEp0Buffer[0] = 1;//WBMenuCmpArry[0];//using for blue part
 1352              		.loc 1 584 0
 1353 0a74 0B0054E3 		cmp	r4, #11
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 1354              		.loc 1 591 0
 1355 0a78 84408410 		addne	r4, r4, r4, asl #1
 1356 0a7c 84618610 		addne	r6, r6, r4, asl #3
 1357 0a80 C87A9F15 		ldrne	r7, .L169+8
 585:../uvc.c      **** 				 glEp0Buffer[1] = 0;
 1358              		.loc 1 585 0
 1359 0a84 C47A9F05 		ldreq	r7, .L169+8
 1360 0a88 CC3A9F05 		ldreq	r3, .L169+20
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 1361              		.loc 1 591 0
 1362 0a8c 8321D615 		ldrneb	r2, [r6, #387]	@ zero_extendqisi2
 592:../uvc.c      **** 			 }
 1363              		.loc 1 592 0
 1364 0a90 8431D615 		ldrneb	r3, [r6, #388]	@ zero_extendqisi2
 585:../uvc.c      **** 				 glEp0Buffer[1] = 0;
 1365              		.loc 1 585 0
 1366 0a94 A0308705 		streq	r3, [r7, #160]
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 1367              		.loc 1 591 0
 1368 0a98 A020C715 		strneb	r2, [r7, #160]
 592:../uvc.c      **** 			 }
 1369              		.loc 1 592 0
 1370 0a9c A130C715 		strneb	r3, [r7, #161]
 1371 0aa0 22FFFFEA 		b	.L123
 1372              	.L115:
 602:../uvc.c      **** 				 glEp0Buffer[0] = 0xff;//WBMenuCmpArry[0];//using for blue part
 1373              		.loc 1 602 0
 1374 0aa4 0B0054E3 		cmp	r4, #11
 609:../uvc.c      **** 				  glEp0Buffer[1] = CtrlParArry[CtrlID][6];
 1375              		.loc 1 609 0
 1376 0aa8 84408410 		addne	r4, r4, r4, asl #1
 1377 0aac 84618610 		addne	r6, r6, r4, asl #3
 1378 0ab0 987A9F15 		ldrne	r7, .L169+8
 603:../uvc.c      **** 				 glEp0Buffer[1] = 0;
 1379              		.loc 1 603 0
 1380 0ab4 947A9F05 		ldreq	r7, .L169+8
 1381 0ab8 A03A9F05 		ldreq	r3, .L169+24
 609:../uvc.c      **** 				  glEp0Buffer[1] = CtrlParArry[CtrlID][6];
 1382              		.loc 1 609 0
 1383 0abc 8521D615 		ldrneb	r2, [r6, #389]	@ zero_extendqisi2
 610:../uvc.c      **** 			 }
 1384              		.loc 1 610 0
 1385 0ac0 8631D615 		ldrneb	r3, [r6, #390]	@ zero_extendqisi2
 603:../uvc.c      **** 				 glEp0Buffer[1] = 0;
 1386              		.loc 1 603 0
 1387 0ac4 A0308705 		streq	r3, [r7, #160]
 609:../uvc.c      **** 				  glEp0Buffer[1] = CtrlParArry[CtrlID][6];
 1388              		.loc 1 609 0
 1389 0ac8 A020C715 		strneb	r2, [r7, #160]
 610:../uvc.c      **** 			 }
 1390              		.loc 1 610 0
 1391 0acc A130C715 		strneb	r3, [r7, #161]
 1392 0ad0 16FFFFEA 		b	.L123
 1393              	.L98:
 440:../uvc.c      **** 						 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][14];
 1394              		.loc 1 440 0
 1395 0ad4 888088E0 		add	r8, r8, r8, asl #1
 1396              	.LVL135:
 1397 0ad8 886186E0 		add	r6, r6, r8, asl #3
 1398 0adc 0D20D6E5 		ldrb	r2, [r6, #13]	@ zero_extendqisi2
 441:../uvc.c      **** 						 sendData = glEp0Buffer[0];
 1399              		.loc 1 441 0
 1400 0ae0 0E80D6E5 		ldrb	r8, [r6, #14]	@ zero_extendqisi2
 440:../uvc.c      **** 						 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][14];
 1401              		.loc 1 440 0
 1402 0ae4 643A9FE5 		ldr	r3, .L169+8
 1403 0ae8 0260A0E1 		mov	r6, r2
 1404 0aec A020C3E5 		strb	r2, [r3, #160]
 441:../uvc.c      **** 						 sendData = glEp0Buffer[0];
 1405              		.loc 1 441 0
 1406 0af0 A180C3E5 		strb	r8, [r3, #161]
 1407              	.LVL136:
 1408              	.L102:
 572:../uvc.c      **** 
 1409              		.loc 1 572 0
 1410 0af4 0900A0E1 		mov	r0, r9
 1411 0af8 541A9FE5 		ldr	r1, .L169+12
 1412 0afc FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 1413              	.LVL137:
 577:../uvc.c      **** 		 case CY_FX_USB_UVC_GET_MIN_REQ: /* Minimum BLC = 0. */
 1414              		.loc 1 577 0
 1415 0b00 FF30A0E3 		mov	r3, #255
 1416 0b04 0340A0E1 		mov	r4, r3
 1417 0b08 0FFFFFEA 		b	.L90
 1418              	.LVL138:
 1419              	.L97:
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 1420              		.loc 1 461 0 discriminator 1
 1421 0b0c 000059E3 		cmp	r9, #0
 1422 0b10 0300000A 		beq	.L105
 1423 0b14 380A9FE5 		ldr	r0, .L169+12
 1424              	.LVL139:
 1425 0b18 0920A0E1 		mov	r2, r9
 1426 0b1c 0C1040E2 		sub	r1, r0, #12
 1427 0b20 FEFFFFEB 		bl	memcpy
 1428              	.LVL140:
 1429              	.L105:
 464:../uvc.c      **** 			 		 sendData1 = glEp0Buffer[10];
 1430              		.loc 1 464 0
 1431 0b24 243A9FE5 		ldr	r3, .L169+8
 471:../uvc.c      **** 			 		 {
 1432              		.loc 1 471 0
 1433 0b28 9F20D3E5 		ldrb	r2, [r3, #159]	@ zero_extendqisi2
 464:../uvc.c      **** 			 		 sendData1 = glEp0Buffer[10];
 1434              		.loc 1 464 0
 1435 0b2c A960D3E5 		ldrb	r6, [r3, #169]	@ zero_extendqisi2
 1436              	.LVL141:
 471:../uvc.c      **** 			 		 {
 1437              		.loc 1 471 0
 1438 0b30 FF0052E3 		cmp	r2, #255
 465:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 1439              		.loc 1 465 0
 1440 0b34 AA80D3E5 		ldrb	r8, [r3, #170]	@ zero_extendqisi2
 1441              	.LVL142:
 471:../uvc.c      **** 			 		 {
 1442              		.loc 1 471 0
 1443 0b38 EDFFFF0A 		beq	.L102
 473:../uvc.c      **** 			 		 }
 1444              		.loc 1 473 0
 1445 0b3c 9D20D3E5 		ldrb	r2, [r3, #157]	@ zero_extendqisi2
 1446 0b40 1C1A9FE5 		ldr	r1, .L169+28
 1447 0b44 9E30D3E5 		ldrb	r3, [r3, #158]	@ zero_extendqisi2
 1448 0b48 0400A0E3 		mov	r0, #4
 1449 0b4c FEFFFFEB 		bl	CyU3PDebugPrint
 1450              	.LVL143:
 1451 0b50 E7FFFFEA 		b	.L102
 1452              	.LVL144:
 1453              	.L96:
 447:../uvc.c      **** 					 if(CamMode == 1){//720p or invendo
 1454              		.loc 1 447 0
 1455 0b54 2D34D6E5 		ldrb	r3, [r6, #1069]	@ zero_extendqisi2
 1456              	.LVL145:
 1457 0b58 E8499FE5 		ldr	r4, .L169
 449:../uvc.c      **** 							CyU3PDebugPrint (4, "back light compensation setting is not correct. %d %d\r\n", CamMode, se
 1458              		.loc 1 449 0
 1459 0b5c 020053E3 		cmp	r3, #2
 1460 0b60 6F02008A 		bhi	.L103
 1461 0b64 043083E2 		add	r3, r3, #4
 1462 0b68 FF3003E2 		and	r3, r3, #255
 1463 0b6c 0360A0E1 		mov	r6, r3
 1464              	.LVL146:
 1465              	.L104:
 457:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 1466              		.loc 1 457 0
 1467 0b70 D8299FE5 		ldr	r2, .L169+8
 458:../uvc.c      **** 					 break;
 1468              		.loc 1 458 0
 1469 0b74 0010A0E3 		mov	r1, #0
 457:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 1470              		.loc 1 457 0
 1471 0b78 A030C2E5 		strb	r3, [r2, #160]
 458:../uvc.c      **** 					 break;
 1472              		.loc 1 458 0
 1473 0b7c A110C2E5 		strb	r1, [r2, #161]
 459:../uvc.c      **** 			 	 case ExtI2CCtlID15:
 1474              		.loc 1 459 0
 1475 0b80 FF80A0E3 		mov	r8, #255
 1476              	.LVL147:
 1477 0b84 DAFFFFEA 		b	.L102
 1478              	.LVL148:
 1479              	.L95:
 478:../uvc.c      **** 						 glEp0Buffer[0] = CtrlParArry[CtrlID][13];//exposure mode
 1480              		.loc 1 478 0
 1481 0b88 C0799FE5 		ldr	r7, .L169+8
 1482 0b8c 4530D7E5 		ldrb	r3, [r7, #69]	@ zero_extendqisi2
 1483 0b90 000053E3 		cmp	r3, #0
 1484 0b94 4502000A 		beq	.L106
 1485 0b98 E6E3D6E5 		ldrb	lr, [r6, #998]	@ zero_extendqisi2
 1486              	.LVL149:
 1487              	.L107:
 492:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 1488              		.loc 1 492 0
 1489 0b9c E543D6E5 		ldrb	r4, [r6, #997]	@ zero_extendqisi2
 493:../uvc.c      **** 					 glEp0Buffer[2] = CtrlParArry[CtrlID][14];//AGC
 1490              		.loc 1 493 0
 1491 0ba0 00C0A0E3 		mov	ip, #0
 498:../uvc.c      **** 					 break;
 1492              		.loc 1 498 0
 1493 0ba4 00E08DE5 		str	lr, [sp]
 1494 0ba8 04C08DE5 		str	ip, [sp, #4]
 1495 0bac 0420A0E1 		mov	r2, r4
 1496 0bb0 0C30A0E1 		mov	r3, ip
 1497 0bb4 AC199FE5 		ldr	r1, .L169+32
 492:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 1498              		.loc 1 492 0
 1499 0bb8 A040C7E5 		strb	r4, [r7, #160]
 494:../uvc.c      **** 					 glEp0Buffer[3] = 0;
 1500              		.loc 1 494 0
 1501 0bbc A2E0C7E5 		strb	lr, [r7, #162]
 493:../uvc.c      **** 					 glEp0Buffer[2] = CtrlParArry[CtrlID][14];//AGC
 1502              		.loc 1 493 0
 1503 0bc0 A1C0C7E5 		strb	ip, [r7, #161]
 495:../uvc.c      **** 					 sendData = glEp0Buffer[0];
 1504              		.loc 1 495 0
 1505 0bc4 A3C0C7E5 		strb	ip, [r7, #163]
 1506              	.LVL150:
 498:../uvc.c      **** 					 break;
 1507              		.loc 1 498 0
 1508 0bc8 0400A0E3 		mov	r0, #4
 1509 0bcc 0E80A0E1 		mov	r8, lr
 1510              	.LVL151:
 1511 0bd0 0460A0E1 		mov	r6, r4
 1512 0bd4 FEFFFFEB 		bl	CyU3PDebugPrint
 1513              	.LVL152:
 499:../uvc.c      **** #if 0	//the brightness is placed by Axreference for invendo camera
 1514              		.loc 1 499 0
 1515 0bd8 C5FFFFEA 		b	.L102
 1516              	.LVL153:
 1517              	.L92:
 529:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 1518              		.loc 1 529 0
 1519 0bdc 0562D6E5 		ldrb	r6, [r6, #517]	@ zero_extendqisi2
 1520 0be0 68399FE5 		ldr	r3, .L169+8
 1521 0be4 806046E2 		sub	r6, r6, #128
 1522 0be8 FF6006E2 		and	r6, r6, #255
 530:../uvc.c      **** 					 sendData = glEp0Buffer[0];
 1523              		.loc 1 530 0
 1524 0bec 0020A0E3 		mov	r2, #0
 529:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 1525              		.loc 1 529 0
 1526 0bf0 A060C3E5 		strb	r6, [r3, #160]
 530:../uvc.c      **** 					 sendData = glEp0Buffer[0];
 1527              		.loc 1 530 0
 1528 0bf4 A120C3E5 		strb	r2, [r3, #161]
 1529              	.LVL154:
 532:../uvc.c      **** 				 case WBTLevCtlID11:
 1530              		.loc 1 532 0
 1531 0bf8 FF80A0E3 		mov	r8, #255
 1532              	.LVL155:
 1533 0bfc BCFFFFEA 		b	.L102
 1534              	.LVL156:
 1535              	.L94:
 535:../uvc.c      **** 						 glEp0Buffer[0] = WBMenuCmpArry[0];//using for blue part
 1536              		.loc 1 535 0
 1537 0c00 48799FE5 		ldr	r7, .L169+8
 1538 0c04 3730D7E5 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 1539 0c08 000053E3 		cmp	r3, #0
 1540 0c0c 1702000A 		beq	.L108
 536:../uvc.c      **** 						 glEp0Buffer[2] = WBMenuCmpArry[2];//using for red part
 1541              		.loc 1 536 0
 1542 0c10 9434D6E5 		ldrb	r3, [r6, #1172]	@ zero_extendqisi2
 537:../uvc.c      **** 		 	 		 }else{
 1543              		.loc 1 537 0
 1544 0c14 9684D6E5 		ldrb	r8, [r6, #1174]	@ zero_extendqisi2
 1545              	.LVL157:
 1546 0c18 0320A0E1 		mov	r2, r3
 536:../uvc.c      **** 						 glEp0Buffer[2] = WBMenuCmpArry[2];//using for red part
 1547              		.loc 1 536 0
 1548 0c1c A030C7E5 		strb	r3, [r7, #160]
 537:../uvc.c      **** 		 	 		 }else{
 1549              		.loc 1 537 0
 1550 0c20 A280C7E5 		strb	r8, [r7, #162]
 1551              	.LVL158:
 1552              	.L109:
 548:../uvc.c      **** 					 glEp0Buffer[3] = 0;
 1553              		.loc 1 548 0
 1554 0c24 0030A0E3 		mov	r3, #0
 1555 0c28 0260A0E1 		mov	r6, r2
 1556 0c2c A130C7E5 		strb	r3, [r7, #161]
 549:../uvc.c      **** 					 sendData = glEp0Buffer[0];
 1557              		.loc 1 549 0
 1558 0c30 A330C7E5 		strb	r3, [r7, #163]
 1559              	.LVL159:
 552:../uvc.c      **** 				 case SaturCtlID6://TODO check sensor register
 1560              		.loc 1 552 0
 1561 0c34 AEFFFFEA 		b	.L102
 1562              	.LVL160:
 1563              	.L168:
 649:../uvc.c      **** 				  glEp0Buffer[1] = 0;
 1564              		.loc 1 649 0
 1565 0c38 10799FE5 		ldr	r7, .L169+8
 1566 0c3c 9312D6E5 		ldrb	r1, [r6, #659]	@ zero_extendqisi2
 651:../uvc.c      **** 				  glEp0Buffer[3] = 0;
 1567              		.loc 1 651 0
 1568 0c40 9422D6E5 		ldrb	r2, [r6, #660]	@ zero_extendqisi2
 650:../uvc.c      **** 				  glEp0Buffer[2] = CtrlParArry[CtrlID][12];
 1569              		.loc 1 650 0
 1570 0c44 0030A0E3 		mov	r3, #0
 649:../uvc.c      **** 				  glEp0Buffer[1] = 0;
 1571              		.loc 1 649 0
 1572 0c48 A010C7E5 		strb	r1, [r7, #160]
 651:../uvc.c      **** 				  glEp0Buffer[3] = 0;
 1573              		.loc 1 651 0
 1574 0c4c A220C7E5 		strb	r2, [r7, #162]
 650:../uvc.c      **** 				  glEp0Buffer[2] = CtrlParArry[CtrlID][12];
 1575              		.loc 1 650 0
 1576 0c50 A130C7E5 		strb	r3, [r7, #161]
 652:../uvc.c      **** 			 }else{
 1577              		.loc 1 652 0
 1578 0c54 A330C7E5 		strb	r3, [r7, #163]
 1579 0c58 B4FEFFEA 		b	.L123
 1580              	.L91:
 556:../uvc.c      **** 						 glEp0Buffer[0] = CtrlParArry[CtrlID][13];//ext_control array;
 1581              		.loc 1 556 0
 1582 0c5c EC789FE5 		ldr	r7, .L169+8
 1583 0c60 048087E0 		add	r8, r7, r4
 1584              	.LVL161:
 1585 0c64 2C30D8E5 		ldrb	r3, [r8, #44]	@ zero_extendqisi2
 1586 0c68 000053E3 		cmp	r3, #0
 1587 0c6c F501000A 		beq	.L110
 1588 0c70 844084E0 		add	r4, r4, r4, asl #1
 1589 0c74 846186E0 		add	r6, r6, r4, asl #3
 1590 0c78 8D31D6E5 		ldrb	r3, [r6, #397]	@ zero_extendqisi2
 1591              	.LVL162:
 1592              	.L111:
 567:../uvc.c      **** 					 sendData = glEp0Buffer[0];
 1593              		.loc 1 567 0
 1594 0c7c 0020A0E3 		mov	r2, #0
 1595 0c80 0360A0E1 		mov	r6, r3
 569:../uvc.c      **** 			 }
 1596              		.loc 1 569 0
 1597 0c84 FF80A0E3 		mov	r8, #255
 566:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 1598              		.loc 1 566 0
 1599 0c88 A030C7E5 		strb	r3, [r7, #160]
 567:../uvc.c      **** 					 sendData = glEp0Buffer[0];
 1600              		.loc 1 567 0
 1601 0c8c A120C7E5 		strb	r2, [r7, #161]
 1602              	.LVL163:
 569:../uvc.c      **** 			 }
 1603              		.loc 1 569 0
 1604 0c90 97FFFFEA 		b	.L102
 1605              	.LVL164:
 1606              	.L141:
 816:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //set grid status
 1607              		.loc 1 816 0
 1608 0c94 D0489FE5 		ldr	r4, .L169+36
 1609 0c98 0010E0E3 		mvn	r1, #0
 1610 0c9c 1C0094E5 		ldr	r0, [r4, #28]
 1611 0ca0 FEFFFFEB 		bl	_txe_mutex_get
 1612              	.LVL165:
 817:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 1613              		.loc 1 817 0
 1614 0ca4 14209DE5 		ldr	r2, [sp, #20]
 1615 0ca8 0010A0E3 		mov	r1, #0
 1616 0cac 0A30A0E1 		mov	r3, r10
 1617 0cb0 00208DE5 		str	r2, [sp]
 1618 0cb4 0400A0E1 		mov	r0, r4
 1619 0cb8 0B20A0E1 		mov	r2, fp
 1620 0cbc 04108DE5 		str	r1, [sp, #4]
 1621 0cc0 2610A0E3 		mov	r1, #38
 1622 0cc4 FEFFFFEB 		bl	cmdSet
 1623              	.LVL166:
 818:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][13] = Data0;
 1624              		.loc 1 818 0
 1625 0cc8 1C0094E5 		ldr	r0, [r4, #28]
 1626 0ccc FEFFFFEB 		bl	_txe_mutex_put
 1627              	.LVL167:
 819:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][16] = CyTrue;
 1628              		.loc 1 819 0
 1629 0cd0 14309DE5 		ldr	r3, [sp, #20]
 1630 0cd4 888088E0 		add	r8, r8, r8, asl #1
 1631              	.LVL168:
 1632 0cd8 886186E0 		add	r6, r6, r8, asl #3
 820:../uvc.c      **** 							 break;
 1633              		.loc 1 820 0
 1634 0cdc 0120A0E3 		mov	r2, #1
 821:../uvc.c      **** #if 0	//the brightness is placed by Axreference for invendo camera
 1635              		.loc 1 821 0
 1636 0ce0 FF80A0E3 		mov	r8, #255
 819:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][16] = CyTrue;
 1637              		.loc 1 819 0
 1638 0ce4 0D30C6E5 		strb	r3, [r6, #13]
 1639 0ce8 0340A0E1 		mov	r4, r3
 820:../uvc.c      **** 							 break;
 1640              		.loc 1 820 0
 1641 0cec 1020C6E5 		strb	r2, [r6, #16]
 1642 0cf0 18309DE5 		ldr	r3, [sp, #24]
 821:../uvc.c      **** #if 0	//the brightness is placed by Axreference for invendo camera
 1643              		.loc 1 821 0
 1644 0cf4 0860A0E1 		mov	r6, r8
 1645 0cf8 93FEFFEA 		b	.L90
 1646              	.LVL169:
 1647              	.L133:
 675:../uvc.c      **** 							 if(Data0 == 0){//set exposure mode auto
 1648              		.loc 1 675 0
 1649 0cfc 44389FE5 		ldr	r3, .L169
 676:../uvc.c      **** 								 if((CTCtrlParArry[AutoExMCtlID1][13] != 8) && (CTCtrlParArry[AutoExMCtlID1][13] != 2)){
 1650              		.loc 1 676 0
 1651 0d00 000050E3 		cmp	r0, #0
 675:../uvc.c      **** 							 if(Data0 == 0){//set exposure mode auto
 1652              		.loc 1 675 0
 1653 0d04 0D03C6E5 		strb	r0, [r6, #781]
 677:../uvc.c      **** 									 if(CTCtrlParArry[AutoExMCtlID1][13] == 1) {
 1654              		.loc 1 677 0
 1655 0d08 BD24D3E5 		ldrb	r2, [r3, #1213]	@ zero_extendqisi2
 676:../uvc.c      **** 								 if((CTCtrlParArry[AutoExMCtlID1][13] != 8) && (CTCtrlParArry[AutoExMCtlID1][13] != 2)){
 1656              		.loc 1 676 0
 1657 0d0c EF01001A 		bne	.L143
 677:../uvc.c      **** 									 if(CTCtrlParArry[AutoExMCtlID1][13] == 1) {
 1658              		.loc 1 677 0
 1659 0d10 020052E3 		cmp	r2, #2
 1660 0d14 08005213 		cmpne	r2, #8
 1661 0d18 0300000A 		beq	.L144
 678:../uvc.c      **** 										 CTCtrlParArry[AutoExMCtlID1][13] = 8; //aperture priority
 1662              		.loc 1 678 0
 1663 0d1c 010052E3 		cmp	r2, #1
 679:../uvc.c      **** 									 }else{
 1664              		.loc 1 679 0
 1665 0d20 0820A003 		moveq	r2, #8
 681:../uvc.c      **** 									 }
 1666              		.loc 1 681 0
 1667 0d24 0220A013 		movne	r2, #2
 1668 0d28 BD24C3E5 		strb	r2, [r3, #1213]
 1669              	.LVL170:
 1670              	.L144:
 703:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 1671              		.loc 1 703 0
 1672 0d2c 38489FE5 		ldr	r4, .L169+36
 701:../uvc.c      **** 							 dataIdx = 0;
 1673              		.loc 1 701 0
 1674 0d30 0130A0E3 		mov	r3, #1
 703:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 1675              		.loc 1 703 0
 1676 0d34 1C0094E5 		ldr	r0, [r4, #28]
 1677 0d38 0010E0E3 		mvn	r1, #0
 701:../uvc.c      **** 							 dataIdx = 0;
 1678              		.loc 1 701 0
 1679 0d3c 1033C6E5 		strb	r3, [r6, #784]
 1680              	.LVL171:
 703:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 1681              		.loc 1 703 0
 1682 0d40 FEFFFFEB 		bl	_txe_mutex_get
 1683              	.LVL172:
 704:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 1684              		.loc 1 704 0
 1685 0d44 14209DE5 		ldr	r2, [sp, #20]
 1686 0d48 0010A0E3 		mov	r1, #0
 1687 0d4c 0A30A0E1 		mov	r3, r10
 1688 0d50 00208DE5 		str	r2, [sp]
 1689 0d54 0400A0E1 		mov	r0, r4
 1690 0d58 0B20A0E1 		mov	r2, fp
 1691 0d5c 04108DE5 		str	r1, [sp, #4]
 1692 0d60 1010A0E3 		mov	r1, #16
 1693 0d64 FEFFFFEB 		bl	cmdSet
 1694              	.LVL173:
 707:../uvc.c      **** 						 case ExtAexModCtlID9://exposure&AGC
 1695              		.loc 1 707 0
 1696 0d68 FF80A0E3 		mov	r8, #255
 1697              	.LVL174:
 705:../uvc.c      **** 							 //CyU3PDebugPrint (4, "The shutter&exposure 0x%x 0x%x 0x%x ox%x\r\n", Data1, Data0, CTCtrlP
 1698              		.loc 1 705 0
 1699 0d6c 1C0094E5 		ldr	r0, [r4, #28]
 1700 0d70 FEFFFFEB 		bl	_txe_mutex_put
 1701              	.LVL175:
 707:../uvc.c      **** 						 case ExtAexModCtlID9://exposure&AGC
 1702              		.loc 1 707 0
 1703 0d74 0860A0E1 		mov	r6, r8
 1704 0d78 14409DE5 		ldr	r4, [sp, #20]
 1705 0d7c 18309DE5 		ldr	r3, [sp, #24]
 1706 0d80 71FEFFEA 		b	.L90
 1707              	.LVL176:
 1708              	.L132:
 884:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd1, devAdd, Data0, dataIdx);  //First
 1709              		.loc 1 884 0
 1710 0d84 E0479FE5 		ldr	r4, .L169+36
 1711 0d88 0010E0E3 		mvn	r1, #0
 1712 0d8c 1C0094E5 		ldr	r0, [r4, #28]
 1713 0d90 10C08DE5 		str	ip, [sp, #16]
 1714 0d94 FEFFFFEB 		bl	_txe_mutex_get
 1715              	.LVL177:
 885:../uvc.c      **** 							 dataIdx++;
 1716              		.loc 1 885 0
 1717 0d98 10C09DE5 		ldr	ip, [sp, #16]
 1718 0d9c 14009DE5 		ldr	r0, [sp, #20]
 1719 0da0 0030A0E3 		mov	r3, #0
 1720 0da4 0C20A0E1 		mov	r2, ip
 1721 0da8 00008DE5 		str	r0, [sp]
 1722 0dac 04308DE5 		str	r3, [sp, #4]
 1723 0db0 0400A0E1 		mov	r0, r4
 1724 0db4 0B10A0E3 		mov	r1, #11
 1725 0db8 0A30A0E1 		mov	r3, r10
 1726 0dbc FEFFFFEB 		bl	cmdSet
 1727              	.LVL178:
 887:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 1728              		.loc 1 887 0
 1729 0dc0 18209DE5 		ldr	r2, [sp, #24]
 1730 0dc4 0170A0E3 		mov	r7, #1
 1731 0dc8 0A30A0E1 		mov	r3, r10
 1732 0dcc 00208DE5 		str	r2, [sp]
 1733 0dd0 0400A0E1 		mov	r0, r4
 1734 0dd4 0B20A0E1 		mov	r2, fp
 1735 0dd8 0B10A0E3 		mov	r1, #11
 1736 0ddc 04708DE5 		str	r7, [sp, #4]
 1737 0de0 FEFFFFEB 		bl	cmdSet
 1738              	.LVL179:
 888:../uvc.c      **** 
 1739              		.loc 1 888 0
 1740 0de4 1C0094E5 		ldr	r0, [r4, #28]
 1741 0de8 FEFFFFEB 		bl	_txe_mutex_put
 1742              	.LVL180:
 891:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 1743              		.loc 1 891 0
 1744 0dec 18009DE5 		ldr	r0, [sp, #24]
 1745 0df0 14409DE5 		ldr	r4, [sp, #20]
 893:../uvc.c      **** 						 case MFreqCtlID4:
 1746              		.loc 1 893 0
 1747 0df4 FF80A0E3 		mov	r8, #255
 1748              	.LVL181:
 892:../uvc.c      **** 							 break;
 1749              		.loc 1 892 0
 1750 0df8 9872C6E5 		strb	r7, [r6, #664]
 890:../uvc.c      **** 							 WBMenuCmpArry[2] = Data1;//using for red part
 1751              		.loc 1 890 0
 1752 0dfc 9444C6E5 		strb	r4, [r6, #1172]
 891:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 1753              		.loc 1 891 0
 1754 0e00 9604C6E5 		strb	r0, [r6, #1174]
 1755 0e04 0030A0E1 		mov	r3, r0
 893:../uvc.c      **** 						 case MFreqCtlID4:
 1756              		.loc 1 893 0
 1757 0e08 0860A0E1 		mov	r6, r8
 1758 0e0c 4EFEFFEA 		b	.L90
 1759              	.LVL182:
 1760              	.L131:
 870:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 1761              		.loc 1 870 0
 1762 0e10 54479FE5 		ldr	r4, .L169+36
 1763 0e14 0010E0E3 		mvn	r1, #0
 1764 0e18 1C0094E5 		ldr	r0, [r4, #28]
 1765 0e1c 10C08DE5 		str	ip, [sp, #16]
 1766 0e20 FEFFFFEB 		bl	_txe_mutex_get
 1767              	.LVL183:
 871:../uvc.c      **** 							 dataIdx++;
 1768              		.loc 1 871 0
 1769 0e24 14009DE5 		ldr	r0, [sp, #20]
 1770 0e28 0030A0E3 		mov	r3, #0
 1771 0e2c 00008DE5 		str	r0, [sp]
 1772 0e30 0B20A0E1 		mov	r2, fp
 1773 0e34 0400A0E1 		mov	r0, r4
 1774 0e38 04308DE5 		str	r3, [sp, #4]
 1775 0e3c 0610A0E3 		mov	r1, #6
 1776 0e40 0A30A0E1 		mov	r3, r10
 1777 0e44 FEFFFFEB 		bl	cmdSet
 1778              	.LVL184:
 873:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 1779              		.loc 1 873 0
 1780 0e48 14209DE5 		ldr	r2, [sp, #20]
 1781 0e4c 10C09DE5 		ldr	ip, [sp, #16]
 1782 0e50 0170A0E3 		mov	r7, #1
 1783 0e54 0A30A0E1 		mov	r3, r10
 1784 0e58 00208DE5 		str	r2, [sp]
 1785 0e5c 0400A0E1 		mov	r0, r4
 1786 0e60 0C20A0E1 		mov	r2, ip
 1787 0e64 0610A0E3 		mov	r1, #6
 1788 0e68 04708DE5 		str	r7, [sp, #4]
 1789 0e6c FEFFFFEB 		bl	cmdSet
 1790              	.LVL185:
 874:../uvc.c      **** 							 CtrlParArry[CtrlID][13] = Data0;
 1791              		.loc 1 874 0
 1792 0e70 1C0094E5 		ldr	r0, [r4, #28]
 1793 0e74 FEFFFFEB 		bl	_txe_mutex_put
 1794              	.LVL186:
 1795 0e78 14409DE5 		ldr	r4, [sp, #20]
 877:../uvc.c      **** 
 1796              		.loc 1 877 0
 1797 0e7c FF80A0E3 		mov	r8, #255
 1798              	.LVL187:
 876:../uvc.c      **** 							 break;
 1799              		.loc 1 876 0
 1800 0e80 2072C6E5 		strb	r7, [r6, #544]
 875:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 1801              		.loc 1 875 0
 1802 0e84 1D42C6E5 		strb	r4, [r6, #541]
 1803 0e88 18309DE5 		ldr	r3, [sp, #24]
 877:../uvc.c      **** 
 1804              		.loc 1 877 0
 1805 0e8c 0860A0E1 		mov	r6, r8
 1806 0e90 2DFEFFEA 		b	.L90
 1807              	.LVL188:
 1808              	.L130:
 850:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, (Data0-GREEN_BASE), dataIdx);  //First
 1809              		.loc 1 850 0
 1810 0e94 D0469FE5 		ldr	r4, .L169+36
 1811 0e98 0010E0E3 		mvn	r1, #0
 1812 0e9c 1C0094E5 		ldr	r0, [r4, #28]
 1813 0ea0 10C08DE5 		str	ip, [sp, #16]
 1814 0ea4 FEFFFFEB 		bl	_txe_mutex_get
 1815              	.LVL189:
 851:../uvc.c      **** 							 dataIdx++;
 1816              		.loc 1 851 0
 1817 0ea8 14009DE5 		ldr	r0, [sp, #20]
 1818 0eac 0030A0E3 		mov	r3, #0
 1819 0eb0 801040E2 		sub	r1, r0, #128
 1820 0eb4 FF1001E2 		and	r1, r1, #255
 1821 0eb8 0B20A0E1 		mov	r2, fp
 1822 0ebc 00108DE5 		str	r1, [sp]
 1823 0ec0 0400A0E1 		mov	r0, r4
 1824 0ec4 04308DE5 		str	r3, [sp, #4]
 1825 0ec8 0510A0E3 		mov	r1, #5
 1826 0ecc 0A30A0E1 		mov	r3, r10
 1827 0ed0 FEFFFFEB 		bl	cmdSet
 1828              	.LVL190:
 853:../uvc.c      **** 							 dataIdx++;
 1829              		.loc 1 853 0
 1830 0ed4 14209DE5 		ldr	r2, [sp, #20]
 1831 0ed8 0190A0E3 		mov	r9, #1
 1832 0edc 763042E2 		sub	r3, r2, #118
 1833 0ee0 FF3003E2 		and	r3, r3, #255
 1834 0ee4 00308DE5 		str	r3, [sp]
 1835 0ee8 0400A0E1 		mov	r0, r4
 1836 0eec 0510A0E3 		mov	r1, #5
 1837 0ef0 DC20A0E3 		mov	r2, #220
 1838 0ef4 0A30A0E1 		mov	r3, r10
 1839 0ef8 04908DE5 		str	r9, [sp, #4]
 1840 0efc FEFFFFEB 		bl	cmdSet
 1841              	.LVL191:
 855:../uvc.c      **** 							 dataIdx++;
 1842              		.loc 1 855 0
 1843 0f00 14309DE5 		ldr	r3, [sp, #20]
 1844 0f04 0400A0E1 		mov	r0, r4
 1845 0f08 7E2083E2 		add	r2, r3, #126
 1846 0f0c FF2002E2 		and	r2, r2, #255
 1847 0f10 0230A0E3 		mov	r3, #2
 1848 0f14 00208DE5 		str	r2, [sp]
 1849 0f18 04308DE5 		str	r3, [sp, #4]
 1850 0f1c 0510A0E3 		mov	r1, #5
 1851 0f20 DE20A0E3 		mov	r2, #222
 1852 0f24 0A30A0E1 		mov	r3, r10
 1853 0f28 FEFFFFEB 		bl	cmdSet
 1854              	.LVL192:
 857:../uvc.c      **** 							 dataIdx++;
 1855              		.loc 1 857 0
 1856 0f2c 14009DE5 		ldr	r0, [sp, #20]
 1857 0f30 0330A0E3 		mov	r3, #3
 1858 0f34 722080E2 		add	r2, r0, #114
 1859 0f38 FF2002E2 		and	r2, r2, #255
 1860 0f3c 00208DE5 		str	r2, [sp]
 1861 0f40 0400A0E1 		mov	r0, r4
 1862 0f44 04308DE5 		str	r3, [sp, #4]
 1863 0f48 0510A0E3 		mov	r1, #5
 1864 0f4c E020A0E3 		mov	r2, #224
 1865 0f50 0A30A0E1 		mov	r3, r10
 1866 0f54 FEFFFFEB 		bl	cmdSet
 1867              	.LVL193:
 859:../uvc.c      **** 							 dataIdx++;
 1868              		.loc 1 859 0
 1869 0f58 14309DE5 		ldr	r3, [sp, #20]
 1870 0f5c 0400A0E1 		mov	r0, r4
 1871 0f60 6F2043E2 		sub	r2, r3, #111
 1872 0f64 FF2002E2 		and	r2, r2, #255
 1873 0f68 0430A0E3 		mov	r3, #4
 1874 0f6c 00208DE5 		str	r2, [sp]
 1875 0f70 04308DE5 		str	r3, [sp, #4]
 1876 0f74 0510A0E3 		mov	r1, #5
 1877 0f78 DD20A0E3 		mov	r2, #221
 1878 0f7c 0A30A0E1 		mov	r3, r10
 1879 0f80 FEFFFFEB 		bl	cmdSet
 1880              	.LVL194:
 861:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 1881              		.loc 1 861 0
 1882 0f84 A000D7E5 		ldrb	r0, [r7, #160]	@ zero_extendqisi2
 1883 0f88 10C09DE5 		ldr	ip, [sp, #16]
 1884 0f8c 7F0080E2 		add	r0, r0, #127
 1885 0f90 0510A0E3 		mov	r1, #5
 1886 0f94 FF0000E2 		and	r0, r0, #255
 1887 0f98 0A30A0E1 		mov	r3, r10
 1888 0f9c 0C20A0E1 		mov	r2, ip
 1889 0fa0 00008DE5 		str	r0, [sp]
 1890 0fa4 04108DE5 		str	r1, [sp, #4]
 1891 0fa8 0400A0E1 		mov	r0, r4
 1892 0fac FEFFFFEB 		bl	cmdSet
 1893              	.LVL195:
 862:../uvc.c      **** 
 1894              		.loc 1 862 0
 1895 0fb0 1C0094E5 		ldr	r0, [r4, #28]
 1896 0fb4 FEFFFFEB 		bl	_txe_mutex_put
 1897              	.LVL196:
 864:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 1898              		.loc 1 864 0
 1899 0fb8 A030D7E5 		ldrb	r3, [r7, #160]	@ zero_extendqisi2
 866:../uvc.c      **** 						 case SaturCtlID6:
 1900              		.loc 1 866 0
 1901 0fbc FF80A0E3 		mov	r8, #255
 1902              	.LVL197:
 864:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 1903              		.loc 1 864 0
 1904 0fc0 803043E2 		sub	r3, r3, #128
 1905 0fc4 0532C6E5 		strb	r3, [r6, #517]
 865:../uvc.c      **** 							 break;
 1906              		.loc 1 865 0
 1907 0fc8 0892C6E5 		strb	r9, [r6, #520]
 1908 0fcc 14409DE5 		ldr	r4, [sp, #20]
 1909 0fd0 18309DE5 		ldr	r3, [sp, #24]
 866:../uvc.c      **** 						 case SaturCtlID6:
 1910              		.loc 1 866 0
 1911 0fd4 0860A0E1 		mov	r6, r8
 1912 0fd8 DBFDFFEA 		b	.L90
 1913              	.LVL198:
 1914              	.L129:
 902:../uvc.c      **** 							 //remove for Invendo
 1915              		.loc 1 902 0
 1916 0fdc 88459FE5 		ldr	r4, .L169+36
 896:../uvc.c      **** 							 if(Data0 < 0)  //for specific check. if it's minor value, set to 0.
 1917              		.loc 1 896 0
 1918 0fe0 017040E2 		sub	r7, r0, #1
 902:../uvc.c      **** 							 //remove for Invendo
 1919              		.loc 1 902 0
 1920 0fe4 0010E0E3 		mvn	r1, #0
 1921 0fe8 1C0094E5 		ldr	r0, [r4, #28]
 1922 0fec FEFFFFEB 		bl	_txe_mutex_get
 1923              	.LVL199:
 896:../uvc.c      **** 							 if(Data0 < 0)  //for specific check. if it's minor value, set to 0.
 1924              		.loc 1 896 0
 1925 0ff0 FF7007E2 		and	r7, r7, #255
 1926              	.LVL200:
 905:../uvc.c      **** 
 1927              		.loc 1 905 0
 1928 0ff4 1C0094E5 		ldr	r0, [r4, #28]
 1929 0ff8 FEFFFFEB 		bl	_txe_mutex_put
 1930              	.LVL201:
 900:../uvc.c      **** 
 1931              		.loc 1 900 0
 1932 0ffc 020057E3 		cmp	r7, #2
 1933 1000 0170A083 		movhi	r7, #1
 1934              	.LVL202:
 908:../uvc.c      **** 							 break;
 1935              		.loc 1 908 0
 1936 1004 0120A0E3 		mov	r2, #1
 909:../uvc.c      **** 					 	 case BLCCtlID0:
 1937              		.loc 1 909 0
 1938 1008 FF80A0E3 		mov	r8, #255
 1939              	.LVL203:
 907:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 1940              		.loc 1 907 0
 1941 100c ED71C6E5 		strb	r7, [r6, #493]
 908:../uvc.c      **** 							 break;
 1942              		.loc 1 908 0
 1943 1010 F021C6E5 		strb	r2, [r6, #496]
 1944 1014 14409DE5 		ldr	r4, [sp, #20]
 1945 1018 18309DE5 		ldr	r3, [sp, #24]
 909:../uvc.c      **** 					 	 case BLCCtlID0:
 1946              		.loc 1 909 0
 1947 101c 0860A0E1 		mov	r6, r8
 1948 1020 C9FDFFEA 		b	.L90
 1949              	.LVL204:
 1950              	.L127:
 911:../uvc.c      **** 							 if(Data0 == 3)
 1951              		.loc 1 911 0
 1952 1024 1C359FE5 		ldr	r3, .L169
 912:../uvc.c      **** 								 WDRflag = CyTrue; //WDR mode
 1953              		.loc 1 912 0
 1954 1028 030050E3 		cmp	r0, #3
 913:../uvc.c      **** 							 else
 1955              		.loc 1 913 0
 1956 102c 0120A003 		moveq	r2, #1
 911:../uvc.c      **** 							 if(Data0 == 3)
 1957              		.loc 1 911 0
 1958 1030 8D01C6E5 		strb	r0, [r6, #397]
 913:../uvc.c      **** 							 else
 1959              		.loc 1 913 0
 1960 1034 C0208705 		streq	r2, [r7, #192]
 916:../uvc.c      **** 							 if(CamMode == 1) //mode 720p
 1961              		.loc 1 916 0
 1962 1038 9021C305 		streqb	r2, [r3, #400]
 912:../uvc.c      **** 								 WDRflag = CyTrue; //WDR mode
 1963              		.loc 1 912 0
 1964 103c 0800000A 		beq	.L154
 919:../uvc.c      **** 					 				 ;//Data0 += 4;
 1965              		.loc 1 919 0
 1966 1040 14009DE5 		ldr	r0, [sp, #20]
 915:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 1967              		.loc 1 915 0
 1968 1044 0010A0E3 		mov	r1, #0
 919:../uvc.c      **** 					 				 ;//Data0 += 4;
 1969              		.loc 1 919 0
 1970 1048 010050E3 		cmp	r0, #1
 916:../uvc.c      **** 							 if(CamMode == 1) //mode 720p
 1971              		.loc 1 916 0
 1972 104c 0120A0E3 		mov	r2, #1
 1973 1050 0040A091 		movls	r4, r0
 915:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 1974              		.loc 1 915 0
 1975 1054 C01087E5 		str	r1, [r7, #192]
 916:../uvc.c      **** 							 if(CamMode == 1) //mode 720p
 1976              		.loc 1 916 0
 1977 1058 9021C3E5 		strb	r2, [r3, #400]
 919:../uvc.c      **** 					 				 ;//Data0 += 4;
 1978              		.loc 1 919 0
 1979 105c 0460A091 		movls	r6, r4
 1980 1060 0800009A 		bls	.L155
 1981              	.L154:
 922:../uvc.c      **** 									Data0 = 0; //set to default.
 1982              		.loc 1 922 0
 1983 1064 14409DE5 		ldr	r4, [sp, #20]
 1984 1068 0120A0E3 		mov	r2, #1
 1985 106c 0430A0E1 		mov	r3, r4
 1986 1070 0400A0E3 		mov	r0, #4
 1987 1074 F4149FE5 		ldr	r1, .L169+40
 1988 1078 FEFFFFEB 		bl	CyU3PDebugPrint
 1989              	.LVL205:
 1990 107c 0020A0E3 		mov	r2, #0
 923:../uvc.c      **** 					 			 }
 1991              		.loc 1 923 0
 1992 1080 0260A0E1 		mov	r6, r2
 922:../uvc.c      **** 									Data0 = 0; //set to default.
 1993              		.loc 1 922 0
 1994 1084 14208DE5 		str	r2, [sp, #20]
 1995              	.LVL206:
 1996              	.L155:
 928:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 1997              		.loc 1 928 0
 1998 1088 DC849FE5 		ldr	r8, .L169+36
 1999              	.LVL207:
 2000 108c 0010E0E3 		mvn	r1, #0
 2001 1090 1C0098E5 		ldr	r0, [r8, #28]
 2002 1094 FEFFFFEB 		bl	_txe_mutex_get
 2003              	.LVL208:
 929:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 2004              		.loc 1 929 0
 2005 1098 14309DE5 		ldr	r3, [sp, #20]
 2006 109c 0010A0E3 		mov	r1, #0
 2007 10a0 0B20A0E1 		mov	r2, fp
 2008 10a4 04108DE5 		str	r1, [sp, #4]
 2009 10a8 00308DE5 		str	r3, [sp]
 2010 10ac 0800A0E1 		mov	r0, r8
 2011 10b0 0A30A0E1 		mov	r3, r10
 2012 10b4 FEFFFFEB 		bl	cmdSet
 2013              	.LVL209:
 930:../uvc.c      **** 							 CyU3PDebugPrint (4, "BLC set. %d %d; %d %d\r\n", Data0, WDRflag, glEp0Buffer[2], glEp0Buffe
 2014              		.loc 1 930 0
 2015 10b8 1C0098E5 		ldr	r0, [r8, #28]
 2016 10bc FEFFFFEB 		bl	_txe_mutex_put
 2017              	.LVL210:
 931:../uvc.c      **** 
 2018              		.loc 1 931 0
 2019 10c0 A200D7E5 		ldrb	r0, [r7, #162]	@ zero_extendqisi2
 2020 10c4 A310D7E5 		ldrb	r1, [r7, #163]	@ zero_extendqisi2
 2021 10c8 C03097E5 		ldr	r3, [r7, #192]
 2022 10cc 0620A0E1 		mov	r2, r6
 2023 10d0 03008DE8 		stmia	sp, {r0, r1}
 2024 10d4 98149FE5 		ldr	r1, .L169+44
 2025 10d8 0400A0E3 		mov	r0, #4
 933:../uvc.c      **** 						 default:
 2026              		.loc 1 933 0
 2027 10dc FF80A0E3 		mov	r8, #255
 931:../uvc.c      **** 
 2028              		.loc 1 931 0
 2029 10e0 FEFFFFEB 		bl	CyU3PDebugPrint
 2030              	.LVL211:
 933:../uvc.c      **** 						 default:
 2031              		.loc 1 933 0
 2032 10e4 0860A0E1 		mov	r6, r8
 2033 10e8 18309DE5 		ldr	r3, [sp, #24]
 2034 10ec 96FDFFEA 		b	.L90
 2035              	.LVL212:
 2036              	.L137:
 759:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 2037              		.loc 1 759 0
 2038 10f0 74449FE5 		ldr	r4, .L169+36
 2039 10f4 0010E0E3 		mvn	r1, #0
 2040 10f8 1C0094E5 		ldr	r0, [r4, #28]
 2041 10fc FEFFFFEB 		bl	_txe_mutex_get
 2042              	.LVL213:
 760:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 2043              		.loc 1 760 0
 2044 1100 14209DE5 		ldr	r2, [sp, #20]
 2045 1104 0010A0E3 		mov	r1, #0
 2046 1108 01C072E2 		rsbs	ip, r2, #1
 2047 110c 00C0A033 		movcc	ip, #0
 2048 1110 0B20A0E1 		mov	r2, fp
 2049 1114 0A30A0E1 		mov	r3, r10
 2050 1118 0400A0E1 		mov	r0, r4
 2051 111c 00C08DE5 		str	ip, [sp]
 2052 1120 04108DE5 		str	r1, [sp, #4]
 2053 1124 1E10A0E3 		mov	r1, #30
 2054 1128 FEFFFFEB 		bl	cmdSet
 2055              	.LVL214:
 761:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 2056              		.loc 1 761 0
 2057 112c 1C0094E5 		ldr	r0, [r4, #28]
 2058 1130 FEFFFFEB 		bl	_txe_mutex_put
 2059              	.LVL215:
 763:../uvc.c      **** 						 case ExtI2CCtlID15:
 2060              		.loc 1 763 0
 2061 1134 FF80A0E3 		mov	r8, #255
 2062              	.LVL216:
 762:../uvc.c      **** 							 break;
 2063              		.loc 1 762 0
 2064 1138 0120A0E3 		mov	r2, #1
 2065 113c 6024C6E5 		strb	r2, [r6, #1120]
 2066 1140 14409DE5 		ldr	r4, [sp, #20]
 2067 1144 18309DE5 		ldr	r3, [sp, #24]
 763:../uvc.c      **** 						 case ExtI2CCtlID15:
 2068              		.loc 1 763 0
 2069 1148 0860A0E1 		mov	r6, r8
 2070 114c 7EFDFFEA 		b	.L90
 2071              	.LVL217:
 2072              	.L136:
 672:../uvc.c      **** 					 {
 2073              		.loc 1 672 0
 2074 1150 FF80A0E3 		mov	r8, #255
 2075              	.LVL218:
 2076 1154 0040A0E1 		mov	r4, r0
 2077              	.LVL219:
 2078 1158 0860A0E1 		mov	r6, r8
 2079 115c 7AFDFFEA 		b	.L90
 2080              	.LVL220:
 2081              	.L135:
 726:../uvc.c      **** 							 if(WDRflag)
 2082              		.loc 1 726 0
 2083 1160 04449FE5 		ldr	r4, .L169+36
 2084 1164 0020A0E1 		mov	r2, r0
 2085 1168 0010E0E3 		mvn	r1, #0
 725:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 2086              		.loc 1 725 0
 2087 116c 0130A0E3 		mov	r3, #1
 726:../uvc.c      **** 							 if(WDRflag)
 2088              		.loc 1 726 0
 2089 1170 1C0094E5 		ldr	r0, [r4, #28]
 724:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 2090              		.loc 1 724 0
 2091 1174 FD23C6E5 		strb	r2, [r6, #1021]
 725:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 2092              		.loc 1 725 0
 2093 1178 0034C6E5 		strb	r3, [r6, #1024]
 726:../uvc.c      **** 							 if(WDRflag)
 2094              		.loc 1 726 0
 2095 117c 10C08DE5 		str	ip, [sp, #16]
 2096 1180 FEFFFFEB 		bl	_txe_mutex_get
 2097              	.LVL221:
 727:../uvc.c      **** 								 cmdSet(cmdQuptr, CtrlID, RegAdd1, devAdd, Data0, dataIdx);  //First
 2098              		.loc 1 727 0
 2099 1184 C03097E5 		ldr	r3, [r7, #192]
 2100 1188 10C09DE5 		ldr	ip, [sp, #16]
 2101 118c 000053E3 		cmp	r3, #0
 728:../uvc.c      **** 							 else
 2102              		.loc 1 728 0
 2103 1190 14309D15 		ldrne	r3, [sp, #20]
 730:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 2104              		.loc 1 730 0
 2105 1194 14009D05 		ldreq	r0, [sp, #20]
 728:../uvc.c      **** 							 else
 2106              		.loc 1 728 0
 2107 1198 0010A013 		movne	r1, #0
 2108 119c 00308D15 		strne	r3, [sp]
 2109 11a0 0C20A011 		movne	r2, ip
 2110 11a4 0A30A011 		movne	r3, r10
 730:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 2111              		.loc 1 730 0
 2112 11a8 0B20A001 		moveq	r2, fp
 732:../uvc.c      **** 						 case ExtCamMCtlID12:
 2113              		.loc 1 732 0
 2114 11ac FF80A0E3 		mov	r8, #255
 2115              	.LVL222:
 2116 11b0 0860A0E1 		mov	r6, r8
 730:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 2117              		.loc 1 730 0
 2118 11b4 09008D08 		stmeqia	sp, {r0, r3}
 728:../uvc.c      **** 							 else
 2119              		.loc 1 728 0
 2120 11b8 04108D15 		strne	r1, [sp, #4]
 730:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 2121              		.loc 1 730 0
 2122 11bc 0A30A001 		moveq	r3, r10
 2123 11c0 1A10A0E3 		mov	r1, #26
 2124 11c4 0400A0E1 		mov	r0, r4
 2125 11c8 FEFFFFEB 		bl	cmdSet
 2126              	.LVL223:
 731:../uvc.c      **** 							 CyU3PDebugPrint (4, "Exe level. %d %d; %d %d\r\n", Data0, WDRflag, glEp0Buffer[2], glEp0Buf
 2127              		.loc 1 731 0
 2128 11cc 1C0094E5 		ldr	r0, [r4, #28]
 2129 11d0 FEFFFFEB 		bl	_txe_mutex_put
 2130              	.LVL224:
 732:../uvc.c      **** 						 case ExtCamMCtlID12:
 2131              		.loc 1 732 0
 2132 11d4 A200D7E5 		ldrb	r0, [r7, #162]	@ zero_extendqisi2
 2133 11d8 A310D7E5 		ldrb	r1, [r7, #163]	@ zero_extendqisi2
 2134 11dc 14409DE5 		ldr	r4, [sp, #20]
 2135 11e0 C03097E5 		ldr	r3, [r7, #192]
 2136 11e4 0420A0E1 		mov	r2, r4
 2137 11e8 03008DE8 		stmia	sp, {r0, r1}
 2138 11ec 84139FE5 		ldr	r1, .L169+48
 2139 11f0 0400A0E3 		mov	r0, #4
 2140 11f4 FEFFFFEB 		bl	CyU3PDebugPrint
 2141              	.LVL225:
 2142 11f8 18309DE5 		ldr	r3, [sp, #24]
 2143 11fc 52FDFFEA 		b	.L90
 2144              	.LVL226:
 2145              	.L134:
 713:../uvc.c      **** 							 //cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, getData, dataIdx);  //Exposure
 2146              		.loc 1 713 0
 2147 1200 64439FE5 		ldr	r4, .L169+36
 2148 1204 0020A0E1 		mov	r2, r0
 709:../uvc.c      **** 							 CtrlParArry[CtrlID][14] = getData1;//AGC
 2149              		.loc 1 709 0
 2150 1208 E523C6E5 		strb	r2, [r6, #997]
 710:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 2151              		.loc 1 710 0
 2152 120c 18209DE5 		ldr	r2, [sp, #24]
 711:../uvc.c      **** 							 dataIdx = 0;
 2153              		.loc 1 711 0
 2154 1210 0130A0E3 		mov	r3, #1
 713:../uvc.c      **** 							 //cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, getData, dataIdx);  //Exposure
 2155              		.loc 1 713 0
 2156 1214 1C0094E5 		ldr	r0, [r4, #28]
 2157 1218 0010E0E3 		mvn	r1, #0
 710:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 2158              		.loc 1 710 0
 2159 121c E623C6E5 		strb	r2, [r6, #998]
 711:../uvc.c      **** 							 dataIdx = 0;
 2160              		.loc 1 711 0
 2161 1220 E833C6E5 		strb	r3, [r6, #1000]
 2162              	.LVL227:
 713:../uvc.c      **** 							 //cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, getData, dataIdx);  //Exposure
 2163              		.loc 1 713 0
 2164 1224 10C08DE5 		str	ip, [sp, #16]
 2165 1228 FEFFFFEB 		bl	_txe_mutex_get
 2166              	.LVL228:
 717:../uvc.c      **** 							 }
 2167              		.loc 1 717 0
 2168 122c 10C09DE5 		ldr	ip, [sp, #16]
 2169 1230 18309DE5 		ldr	r3, [sp, #24]
 2170 1234 0010A0E3 		mov	r1, #0
 2171 1238 0C20A0E1 		mov	r2, ip
 2172 123c 00308DE5 		str	r3, [sp]
 2173 1240 0400A0E1 		mov	r0, r4
 2174 1244 0A30A0E1 		mov	r3, r10
 2175 1248 04108DE5 		str	r1, [sp, #4]
 2176 124c 1910A0E3 		mov	r1, #25
 2177 1250 FEFFFFEB 		bl	cmdSet
 2178              	.LVL229:
 719:../uvc.c      **** 							 CyU3PDebugPrint (4, "ExpM&AGC gotten from host. %d %d; %d %d\r\n", glEp0Buffer[0], glEp0Buf
 2179              		.loc 1 719 0
 2180 1254 1C0094E5 		ldr	r0, [r4, #28]
 2181 1258 FEFFFFEB 		bl	_txe_mutex_put
 2182              	.LVL230:
 720:../uvc.c      **** 							 break;
 2183              		.loc 1 720 0
 2184 125c A200D7E5 		ldrb	r0, [r7, #162]	@ zero_extendqisi2
 2185 1260 A310D7E5 		ldrb	r1, [r7, #163]	@ zero_extendqisi2
 2186 1264 A130D7E5 		ldrb	r3, [r7, #161]	@ zero_extendqisi2
 2187 1268 A020D7E5 		ldrb	r2, [r7, #160]	@ zero_extendqisi2
 721:../uvc.c      **** 						 case ExtExRefCtlID10:
 2188              		.loc 1 721 0
 2189 126c FF80A0E3 		mov	r8, #255
 2190              	.LVL231:
 720:../uvc.c      **** 							 break;
 2191              		.loc 1 720 0
 2192 1270 03008DE8 		stmia	sp, {r0, r1}
 2193 1274 00139FE5 		ldr	r1, .L169+52
 2194 1278 0400A0E3 		mov	r0, #4
 2195 127c FEFFFFEB 		bl	CyU3PDebugPrint
 2196              	.LVL232:
 721:../uvc.c      **** 						 case ExtExRefCtlID10:
 2197              		.loc 1 721 0
 2198 1280 0860A0E1 		mov	r6, r8
 2199 1284 14409DE5 		ldr	r4, [sp, #20]
 2200 1288 18309DE5 		ldr	r3, [sp, #24]
 2201 128c 2EFDFFEA 		b	.L90
 2202              	.LVL233:
 2203              	.L139:
 794:../uvc.c      **** 						     /* end test */
 2204              		.loc 1 794 0
 2205 1290 D4429FE5 		ldr	r4, .L169+36
 2206 1294 0010E0E3 		mvn	r1, #0
 2207 1298 1C0094E5 		ldr	r0, [r4, #28]
 2208 129c 10C08DE5 		str	ip, [sp, #16]
 2209 12a0 FEFFFFEB 		bl	_txe_mutex_get
 2210              	.LVL234:
 793:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 2211              		.loc 1 793 0
 2212 12a4 14309DE5 		ldr	r3, [sp, #20]
 796:../uvc.c      **** 							 dataIdx++;
 2213              		.loc 1 796 0
 2214 12a8 0B20A0E1 		mov	r2, fp
 793:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 2215              		.loc 1 793 0
 2216 12ac 7F7003E2 		and	r7, r3, #127
 2217              	.LVL235:
 796:../uvc.c      **** 							 dataIdx++;
 2218              		.loc 1 796 0
 2219 12b0 0030A0E3 		mov	r3, #0
 2220 12b4 0400A0E1 		mov	r0, r4
 2221 12b8 04308DE5 		str	r3, [sp, #4]
 2222 12bc 2410A0E3 		mov	r1, #36
 2223 12c0 0A30A0E1 		mov	r3, r10
 2224 12c4 00708DE5 		str	r7, [sp]
 2225 12c8 FEFFFFEB 		bl	cmdSet
 2226              	.LVL236:
 798:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 2227              		.loc 1 798 0
 2228 12cc 1C009DE5 		ldr	r0, [sp, #28]
 2229 12d0 10C09DE5 		ldr	ip, [sp, #16]
 2230 12d4 0190A0E3 		mov	r9, #1
 2231 12d8 0C20A0E1 		mov	r2, ip
 2232 12dc 0A30A0E1 		mov	r3, r10
 2233 12e0 00008DE5 		str	r0, [sp]
 2234 12e4 2410A0E3 		mov	r1, #36
 2235 12e8 0400A0E1 		mov	r0, r4
 2236 12ec 04908DE5 		str	r9, [sp, #4]
 2237 12f0 FEFFFFEB 		bl	cmdSet
 2238              	.LVL237:
 799:../uvc.c      **** 							 getData1 = Data1;
 2239              		.loc 1 799 0
 2240 12f4 1C0094E5 		ldr	r0, [r4, #28]
 2241 12f8 FEFFFFEB 		bl	_txe_mutex_put
 2242              	.LVL238:
 803:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][16] = CyTrue;
 2243              		.loc 1 803 0
 2244 12fc 1C209DE5 		ldr	r2, [sp, #28]
 802:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][14] = Data1;
 2245              		.loc 1 802 0
 2246 1300 888088E0 		add	r8, r8, r8, asl #1
 2247              	.LVL239:
 2248 1304 886186E0 		add	r6, r6, r8, asl #3
 805:../uvc.c      **** 						 case Ext1BLCWeightCtlID5: //register value 0x11 (need check).
 2249              		.loc 1 805 0
 2250 1308 FF80A0E3 		mov	r8, #255
 802:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][14] = Data1;
 2251              		.loc 1 802 0
 2252 130c 0D70C6E5 		strb	r7, [r6, #13]
 803:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][16] = CyTrue;
 2253              		.loc 1 803 0
 2254 1310 0E20C6E5 		strb	r2, [r6, #14]
 804:../uvc.c      **** 							 break;
 2255              		.loc 1 804 0
 2256 1314 1090C6E5 		strb	r9, [r6, #16]
 2257 1318 14409DE5 		ldr	r4, [sp, #20]
 2258 131c 0230A0E1 		mov	r3, r2
 805:../uvc.c      **** 						 case Ext1BLCWeightCtlID5: //register value 0x11 (need check).
 2259              		.loc 1 805 0
 2260 1320 0860A0E1 		mov	r6, r8
 2261 1324 08FDFFEA 		b	.L90
 2262              	.LVL240:
 2263              	.L138:
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 2264              		.loc 1 765 0 discriminator 1
 2265 1328 000059E3 		cmp	r9, #0
 2266 132c 0300000A 		beq	.L151
 2267 1330 48029FE5 		ldr	r0, .L169+56
 2268 1334 0920A0E1 		mov	r2, r9
 2269 1338 0C1080E2 		add	r1, r0, #12
 2270 133c FEFFFFEB 		bl	memcpy
 2271              	.LVL241:
 2272              	.L151:
 769:../uvc.c      **** 						 case Ext1BLCRangeCtlID4: //registers value BLD window enable (0x17); position (0x13); size (
 2273              		.loc 1 769 0
 2274 1340 FF80A0E3 		mov	r8, #255
 2275              	.LVL242:
 768:../uvc.c      **** 							 break;
 2276              		.loc 1 768 0
 2277 1344 FEFFFFEB 		bl	I2CCmdHandler
 2278              	.LVL243:
 769:../uvc.c      **** 						 case Ext1BLCRangeCtlID4: //registers value BLD window enable (0x17); position (0x13); size (
 2279              		.loc 1 769 0
 2280 1348 0860A0E1 		mov	r6, r8
 2281 134c 14409DE5 		ldr	r4, [sp, #20]
 2282              	.LVL244:
 2283 1350 18309DE5 		ldr	r3, [sp, #24]
 2284 1354 FCFCFFEA 		b	.L90
 2285              	.LVL245:
 2286              	.L140:
 808:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //set weight factor
 2287              		.loc 1 808 0
 2288 1358 0C429FE5 		ldr	r4, .L169+36
 2289 135c 0010E0E3 		mvn	r1, #0
 2290 1360 1C0094E5 		ldr	r0, [r4, #28]
 2291 1364 FEFFFFEB 		bl	_txe_mutex_get
 2292              	.LVL246:
 809:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 2293              		.loc 1 809 0
 2294 1368 14309DE5 		ldr	r3, [sp, #20]
 2295 136c 0010A0E3 		mov	r1, #0
 2296 1370 0B20A0E1 		mov	r2, fp
 2297 1374 00308DE5 		str	r3, [sp]
 2298 1378 0400A0E1 		mov	r0, r4
 2299 137c 0A30A0E1 		mov	r3, r10
 2300 1380 04108DE5 		str	r1, [sp, #4]
 2301 1384 2510A0E3 		mov	r1, #37
 2302 1388 FEFFFFEB 		bl	cmdSet
 2303              	.LVL247:
 810:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][13] = Data0;
 2304              		.loc 1 810 0
 2305 138c 1C0094E5 		ldr	r0, [r4, #28]
 2306 1390 FEFFFFEB 		bl	_txe_mutex_put
 2307              	.LVL248:
 811:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][16] = CyTrue;
 2308              		.loc 1 811 0
 2309 1394 14009DE5 		ldr	r0, [sp, #20]
 2310 1398 888088E0 		add	r8, r8, r8, asl #1
 2311              	.LVL249:
 2312 139c 886186E0 		add	r6, r6, r8, asl #3
 812:../uvc.c      **** 							 break;
 2313              		.loc 1 812 0
 2314 13a0 0120A0E3 		mov	r2, #1
 813:../uvc.c      **** 						 case Ext1BLCGridCtlID6:
 2315              		.loc 1 813 0
 2316 13a4 FF80A0E3 		mov	r8, #255
 811:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][16] = CyTrue;
 2317              		.loc 1 811 0
 2318 13a8 0D00C6E5 		strb	r0, [r6, #13]
 812:../uvc.c      **** 							 break;
 2319              		.loc 1 812 0
 2320 13ac 1020C6E5 		strb	r2, [r6, #16]
 2321 13b0 0040A0E1 		mov	r4, r0
 2322 13b4 18309DE5 		ldr	r3, [sp, #24]
 813:../uvc.c      **** 						 case Ext1BLCGridCtlID6:
 2323              		.loc 1 813 0
 2324 13b8 0860A0E1 		mov	r6, r8
 2325 13bc E2FCFFEA 		b	.L90
 2326              	.LVL250:
 2327              	.L126:
 937:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 2328              		.loc 1 937 0
 2329 13c0 A4719FE5 		ldr	r7, .L169+36
 2330 13c4 0010E0E3 		mvn	r1, #0
 2331 13c8 1C0097E5 		ldr	r0, [r7, #28]
 2332 13cc FEFFFFEB 		bl	_txe_mutex_get
 2333              	.LVL251:
 938:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 2334              		.loc 1 938 0
 2335 13d0 14009DE5 		ldr	r0, [sp, #20]
 2336 13d4 0010A0E3 		mov	r1, #0
 2337 13d8 0B20A0E1 		mov	r2, fp
 2338 13dc 0A30A0E1 		mov	r3, r10
 2339 13e0 00008DE5 		str	r0, [sp]
 2340 13e4 04108DE5 		str	r1, [sp, #4]
 2341 13e8 0700A0E1 		mov	r0, r7
 2342 13ec 0410A0E1 		mov	r1, r4
 2343 13f0 FEFFFFEB 		bl	cmdSet
 2344              	.LVL252:
 939:../uvc.c      **** 
 2345              		.loc 1 939 0
 2346 13f4 1C0097E5 		ldr	r0, [r7, #28]
 2347 13f8 FEFFFFEB 		bl	_txe_mutex_put
 2348              	.LVL253:
 941:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 2349              		.loc 1 941 0
 2350 13fc 14309DE5 		ldr	r3, [sp, #20]
 2351 1400 844084E0 		add	r4, r4, r4, asl #1
 2352 1404 846186E0 		add	r6, r6, r4, asl #3
 942:../uvc.c      **** 							 break;
 2353              		.loc 1 942 0
 2354 1408 0120A0E3 		mov	r2, #1
 943:../uvc.c      **** 					 }
 2355              		.loc 1 943 0
 2356 140c FF80A0E3 		mov	r8, #255
 2357              	.LVL254:
 941:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 2358              		.loc 1 941 0
 2359 1410 8D31C6E5 		strb	r3, [r6, #397]
 2360 1414 0340A0E1 		mov	r4, r3
 942:../uvc.c      **** 							 break;
 2361              		.loc 1 942 0
 2362 1418 9021C6E5 		strb	r2, [r6, #400]
 2363 141c 18309DE5 		ldr	r3, [sp, #24]
 943:../uvc.c      **** 					 }
 2364              		.loc 1 943 0
 2365 1420 0860A0E1 		mov	r6, r8
 2366 1424 C8FCFFEA 		b	.L90
 2367              	.LVL255:
 2368              	.L125:
 946:../uvc.c      **** 			   }
 2369              		.loc 1 946 0
 2370 1428 FF80A0E3 		mov	r8, #255
 2371              	.LVL256:
 2372 142c 0400A0E3 		mov	r0, #4
 2373              	.LVL257:
 2374 1430 4C119FE5 		ldr	r1, .L169+60
 2375 1434 FEFFFFEB 		bl	CyU3PDebugPrint
 2376              	.LVL258:
 2377 1438 0860A0E1 		mov	r6, r8
 2378 143c 0830A0E1 		mov	r3, r8
 2379 1440 0840A0E1 		mov	r4, r8
 2380              	.LVL259:
 2381 1444 C0FCFFEA 		b	.L90
 2382              	.LVL260:
 2383              	.L110:
 560:../uvc.c      **** 		 	 			CtrlParArry[CtrlID][13] = glEp0Buffer[0];
 2384              		.loc 1 560 0
 2385 1448 0B00A0E1 		mov	r0, fp
 2386              	.LVL261:
 2387 144c 0A10A0E1 		mov	r1, r10
 2388 1450 FEFFFFEB 		bl	SensorGetControl
 2389              	.LVL262:
 561:../uvc.c      **** 		 	 			glEp0Buffer[1] = CtrlParArry[CtrlID][14];
 2390              		.loc 1 561 0
 2391 1454 844084E0 		add	r4, r4, r4, asl #1
 2392              	.LVL263:
 2393 1458 846186E0 		add	r6, r6, r4, asl #3
 563:../uvc.c      **** 		 	 		 }
 2394              		.loc 1 563 0
 2395 145c 0120A0E3 		mov	r2, #1
 2396 1460 2C20C8E5 		strb	r2, [r8, #44]
 2397 1464 0030A0E1 		mov	r3, r0
 561:../uvc.c      **** 		 	 			glEp0Buffer[1] = CtrlParArry[CtrlID][14];
 2398              		.loc 1 561 0
 2399 1468 8D01C6E5 		strb	r0, [r6, #397]
 2400 146c 02FEFFEA 		b	.L111
 2401              	.LVL264:
 2402              	.L108:
 539:../uvc.c      **** 		 	 			Data1 = SensorGetControl(RegAdd0, devAdd);
 2403              		.loc 1 539 0
 2404 1470 0C00A0E1 		mov	r0, ip
 2405              	.LVL265:
 2406 1474 0A10A0E1 		mov	r1, r10
 2407 1478 FEFFFFEB 		bl	SensorGetControl
 2408              	.LVL266:
 540:../uvc.c      **** 						glEp0Buffer[0] = Data0;
 2409              		.loc 1 540 0
 2410 147c 0A10A0E1 		mov	r1, r10
 539:../uvc.c      **** 		 	 			Data1 = SensorGetControl(RegAdd0, devAdd);
 2411              		.loc 1 539 0
 2412 1480 0040A0E1 		mov	r4, r0
 2413              	.LVL267:
 540:../uvc.c      **** 						glEp0Buffer[0] = Data0;
 2414              		.loc 1 540 0
 2415 1484 0B00A0E1 		mov	r0, fp
 2416              	.LVL268:
 2417 1488 FEFFFFEB 		bl	SensorGetControl
 2418              	.LVL269:
 545:../uvc.c      **** 		 	 		 }
 2419              		.loc 1 545 0
 2420 148c 0130A0E3 		mov	r3, #1
 2421 1490 0420A0E1 		mov	r2, r4
 541:../uvc.c      **** 						WBMenuCmpArry[0] = glEp0Buffer[0];//using for blue part
 2422              		.loc 1 541 0
 2423 1494 A040C7E5 		strb	r4, [r7, #160]
 542:../uvc.c      **** 						glEp0Buffer[2] = Data1;
 2424              		.loc 1 542 0
 2425 1498 9444C6E5 		strb	r4, [r6, #1172]
 545:../uvc.c      **** 		 	 		 }
 2426              		.loc 1 545 0
 2427 149c 3730C7E5 		strb	r3, [r7, #55]
 2428 14a0 0080A0E1 		mov	r8, r0
 2429              	.LVL270:
 543:../uvc.c      **** 						WBMenuCmpArry[2]= glEp0Buffer[2];//using for red part
 2430              		.loc 1 543 0
 2431 14a4 A200C7E5 		strb	r0, [r7, #162]
 544:../uvc.c      **** 		 	 			curFlag[CtrlID] = CyTrue;
 2432              		.loc 1 544 0
 2433 14a8 9604C6E5 		strb	r0, [r6, #1174]
 2434 14ac DCFDFFEA 		b	.L109
 2435              	.LVL271:
 2436              	.L106:
 487:../uvc.c      **** 		 	 			CtrlParArry[CtrlID][14] = glEp0Buffer[2];
 2437              		.loc 1 487 0
 2438 14b0 0C00A0E1 		mov	r0, ip
 2439              	.LVL272:
 2440 14b4 0A10A0E1 		mov	r1, r10
 2441 14b8 FEFFFFEB 		bl	SensorGetControl
 2442              	.LVL273:
 489:../uvc.c      **** 		 	 		 }
 2443              		.loc 1 489 0
 2444 14bc 0130A0E3 		mov	r3, #1
 2445 14c0 4530C7E5 		strb	r3, [r7, #69]
 2446 14c4 00E0A0E1 		mov	lr, r0
 488:../uvc.c      **** 		 	 			curFlag[CtrlID] = CyTrue;
 2447              		.loc 1 488 0
 2448 14c8 E603C6E5 		strb	r0, [r6, #998]
 2449 14cc B2FDFFEA 		b	.L107
 2450              	.LVL274:
 2451              	.L143:
 685:../uvc.c      **** 								 if((CTCtrlParArry[AutoExMCtlID1][13] != 1) && (CTCtrlParArry[AutoExMCtlID1][13] != 4)){
 2452              		.loc 1 685 0
 2453 14d0 011040E2 		sub	r1, r0, #1
 686:../uvc.c      **** 									 if(CTCtrlParArry[AutoExMCtlID1][13] == 8) {
 2454              		.loc 1 686 0
 2455 14d4 040052E3 		cmp	r2, #4
 2456 14d8 01005213 		cmpne	r2, #1
 685:../uvc.c      **** 								 if((CTCtrlParArry[AutoExMCtlID1][13] != 1) && (CTCtrlParArry[AutoExMCtlID1][13] != 4)){
 2457              		.loc 1 685 0
 2458 14dc FF1001E2 		and	r1, r1, #255
 2459              	.LVL275:
 686:../uvc.c      **** 									 if(CTCtrlParArry[AutoExMCtlID1][13] == 8) {
 2460              		.loc 1 686 0
 2461 14e0 0300000A 		beq	.L146
 687:../uvc.c      **** 										 CTCtrlParArry[AutoExMCtlID1][13] = 1; //manual mode
 2462              		.loc 1 687 0
 2463 14e4 080052E3 		cmp	r2, #8
 688:../uvc.c      **** 									 }else{
 2464              		.loc 1 688 0
 2465 14e8 0120A003 		moveq	r2, #1
 690:../uvc.c      **** 									 }
 2466              		.loc 1 690 0
 2467 14ec 0420A013 		movne	r2, #4
 2468 14f0 BD24C3E5 		strb	r2, [r3, #1213]
 2469              	.L146:
 693:../uvc.c      **** 									 CTCtrlParArry[ExTmACtlID3][13] = ExTime[Data1][0];
 2470              		.loc 1 693 0
 2471 14f4 070051E3 		cmp	r1, #7
 694:../uvc.c      **** 									 CTCtrlParArry[ExTmACtlID3][14] = ExTime[Data1][1];
 2472              		.loc 1 694 0
 2473 14f8 88309F95 		ldrls	r3, .L169+64
 697:../uvc.c      **** 									 CTCtrlParArry[ExTmACtlID3][14] = ExTime[7][1];
 2474              		.loc 1 697 0
 2475 14fc 0120A083 		movhi	r2, #1
 695:../uvc.c      **** 								 }else{
 2476              		.loc 1 695 0
 2477 1500 81208390 		addls	r2, r3, r1, asl #1
 2478 1504 0120D295 		ldrlsb	r2, [r2, #1]	@ zero_extendqisi2
 694:../uvc.c      **** 									 CTCtrlParArry[ExTmACtlID3][14] = ExTime[Data1][1];
 2479              		.loc 1 694 0
 2480 1508 8130D397 		ldrlsb	r3, [r3, r1, asl #1]	@ zero_extendqisi2
 698:../uvc.c      **** 								 }
 2481              		.loc 1 698 0
 2482 150c 0030A083 		movhi	r3, #0
 695:../uvc.c      **** 								 }else{
 2483              		.loc 1 695 0
 2484 1510 EE24C695 		strlsb	r2, [r6, #1262]
 694:../uvc.c      **** 									 CTCtrlParArry[ExTmACtlID3][14] = ExTime[Data1][1];
 2485              		.loc 1 694 0
 2486 1514 ED34C695 		strlsb	r3, [r6, #1261]
 697:../uvc.c      **** 									 CTCtrlParArry[ExTmACtlID3][14] = ExTime[7][1];
 2487              		.loc 1 697 0
 2488 1518 ED24C685 		strhib	r2, [r6, #1261]
 698:../uvc.c      **** 								 }
 2489              		.loc 1 698 0
 2490 151c EE34C685 		strhib	r3, [r6, #1262]
 2491 1520 01FEFFEA 		b	.L144
 2492              	.LVL276:
 2493              	.L103:
 450:../uvc.c      **** 							sendData = 0; //set back to default
 2494              		.loc 1 450 0
 2495 1524 0400A0E3 		mov	r0, #4
 2496              	.LVL277:
 2497 1528 0120A0E3 		mov	r2, #1
 2498 152c 3C109FE5 		ldr	r1, .L169+40
 452:../uvc.c      **** 						}
 2499              		.loc 1 452 0
 2500 1530 0060A0E1 		mov	r6, r0
 450:../uvc.c      **** 							sendData = 0; //set back to default
 2501              		.loc 1 450 0
 2502 1534 FEFFFFEB 		bl	CyU3PDebugPrint
 2503              	.LVL278:
 452:../uvc.c      **** 						}
 2504              		.loc 1 452 0
 2505 1538 0020A0E3 		mov	r2, #0
 2506 153c 0630A0E1 		mov	r3, r6
 2507 1540 2D24C4E5 		strb	r2, [r4, #1069]
 2508 1544 89FDFFEA 		b	.L104
 2509              	.L170:
 2510              		.align	2
 2511              	.L169:
 2512 1548 00000000 		.word	.LANCHOR1
 2513 154c 00000000 		.word	bRequest
 2514 1550 00000000 		.word	.LANCHOR0
 2515 1554 A0000000 		.word	.LANCHOR0+160
 2516 1558 08020000 		.word	.LC13
 2517 155c 01000100 		.word	65537
 2518 1560 FF00FF00 		.word	16711935
 2519 1564 14010000 		.word	.LC7
 2520 1568 50010000 		.word	.LC8
 2521 156c 00000000 		.word	cmdQu
 2522 1570 DC000000 		.word	.LC6
 2523 1574 C0010000 		.word	.LC11
 2524 1578 A4010000 		.word	.LC10
 2525 157c 78010000 		.word	.LC9
 2526 1580 94000000 		.word	.LANCHOR0+148
 2527 1584 D8010000 		.word	.LC12
 2528 1588 00000000 		.word	.LANCHOR2
 2529              		.cfi_endproc
 2530              	.LFE1:
 2532              		.align	2
 2533              		.global	CyFxAppErrorHandler
 2535              	CyFxAppErrorHandler:
 2536              	.LFB2:
 965:../uvc.c      ****     /* Application failed with the error code status */
 2537              		.loc 1 965 0
 2538              		.cfi_startproc
 2539              		@ Volatile: function does not return.
 2540              		@ args = 0, pretend = 0, frame = 0
 2541              		@ frame_needed = 0, uses_anonymous_args = 0
 2542              	.LVL279:
 2543 158c 08402DE9 		stmfd	sp!, {r3, lr}
 2544              	.LCFI10:
 2545              		.cfi_def_cfa_offset 8
 2546              		.cfi_offset 3, -8
 2547              		.cfi_offset 14, -4
 2548              	.LVL280:
 2549              	.L172:
 974:../uvc.c      ****     }
 2550              		.loc 1 974 0 discriminator 1
 2551 1590 6400A0E3 		mov	r0, #100
 2552 1594 FEFFFFEB 		bl	_tx_thread_sleep
 2553              	.LVL281:
 2554 1598 FCFFFFEA 		b	.L172
 2555              		.cfi_endproc
 2556              	.LFE2:
 2558              		.align	2
 2559              		.global	esUVCUvcApplnStart
 2561              	esUVCUvcApplnStart:
 2562              	.LFB4:
1008:../uvc.c      ****     CyU3PReturnStatus_t status = CY_U3P_SUCCESS;
 2563              		.loc 1 1008 0
 2564              		.cfi_startproc
 2565              		@ args = 0, pretend = 0, frame = 0
 2566              		@ frame_needed = 0, uses_anonymous_args = 0
 2567              	.LVL282:
 2568 159c 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 2569              	.LCFI11:
 2570              		.cfi_def_cfa_offset 16
 2571              		.cfi_offset 4, -16
 2572              		.cfi_offset 5, -12
 2573              		.cfi_offset 6, -8
 2574              		.cfi_offset 14, -4
1015:../uvc.c      **** 
 2575              		.loc 1 1015 0
 2576 15a0 F0209FE5 		ldr	r2, .L179
1011:../uvc.c      ****     glDmaDone = 0;
 2577              		.loc 1 1011 0
 2578 15a4 F0409FE5 		ldr	r4, .L179+4
 2579 15a8 0150A0E3 		mov	r5, #1
1012:../uvc.c      ****     glDMATxCount = 0;
 2580              		.loc 1 1012 0
 2581 15ac 0030A0E3 		mov	r3, #0
1008:../uvc.c      ****     CyU3PReturnStatus_t status = CY_U3P_SUCCESS;
 2582              		.loc 1 1008 0
 2583 15b0 08D04DE2 		sub	sp, sp, #8
 2584              	.LCFI12:
 2585              		.cfi_def_cfa_offset 24
1023:../uvc.c      ****     CyU3PBusyWait (100);
 2586              		.loc 1 1023 0
 2587 15b4 0510A0E1 		mov	r1, r5
 2588 15b8 8300A0E3 		mov	r0, #131
1012:../uvc.c      ****     glDMATxCount = 0;
 2589              		.loc 1 1012 0
 2590 15bc 783084E5 		str	r3, [r4, #120]
1014:../uvc.c      ****     doLpmDisable = CyTrue;
 2591              		.loc 1 1014 0
 2592 15c0 703084E5 		str	r3, [r4, #112]
1013:../uvc.c      ****     glHitFV = CyFalse;
 2593              		.loc 1 1013 0
 2594 15c4 743084E5 		str	r3, [r4, #116]
1011:../uvc.c      ****     glDmaDone = 0;
 2595              		.loc 1 1011 0
 2596 15c8 C45084E5 		str	r5, [r4, #196]
1015:../uvc.c      **** 
 2597              		.loc 1 1015 0
 2598 15cc 805482E5 		str	r5, [r2, #1152]
1023:../uvc.c      ****     CyU3PBusyWait (100);
 2599              		.loc 1 1023 0
 2600 15d0 FEFFFFEB 		bl	CyU3PUsbSetEpNak
 2601              	.LVL283:
1024:../uvc.c      **** 
 2602              		.loc 1 1024 0
 2603 15d4 6400A0E3 		mov	r0, #100
 2604 15d8 FEFFFFEB 		bl	CyFx3BusyWait
 2605              	.LVL284:
1027:../uvc.c      ****     status = CyU3PDmaMultiChannelReset (&glChHandleUVCStream);
 2606              		.loc 1 1027 0
 2607 15dc 8300A0E3 		mov	r0, #131
 2608 15e0 FEFFFFEB 		bl	CyU3PUsbFlushEp
 2609              	.LVL285:
1028:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 2610              		.loc 1 1028 0
 2611 15e4 B4009FE5 		ldr	r0, .L179+8
 2612 15e8 FEFFFFEB 		bl	CyU3PDmaMultiChannelReset
 2613              	.LVL286:
1029:../uvc.c      ****     {
 2614              		.loc 1 1029 0
 2615 15ec 006050E2 		subs	r6, r0, #0
 2616 15f0 2100001A 		bne	.L177
1035:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 2617              		.loc 1 1035 0
 2618 15f4 0610A0E1 		mov	r1, r6
 2619 15f8 0620A0E1 		mov	r2, r6
 2620 15fc 9C009FE5 		ldr	r0, .L179+8
 2621              	.LVL287:
 2622 1600 FEFFFFEB 		bl	CyU3PDmaMultiChannelSetXfer
 2623              	.LVL288:
1036:../uvc.c      ****     {
 2624              		.loc 1 1036 0
 2625 1604 006050E2 		subs	r6, r0, #0
 2626 1608 1400001A 		bne	.L178
 2627              	.LBB76:
 2628              	.LBB77:
1042:../uvc.c      ****     CyU3PBusyWait (200);
 2629              		.loc 1 1042 0
 2630 160c 0610A0E1 		mov	r1, r6
 2631 1610 8300A0E3 		mov	r0, #131
 2632              	.LVL289:
 2633 1614 FEFFFFEB 		bl	CyU3PUsbSetEpNak
 2634              	.LVL290:
1043:../uvc.c      **** //
 2635              		.loc 1 1043 0
 2636 1618 C800A0E3 		mov	r0, #200
 2637 161c FEFFFFEB 		bl	CyFx3BusyWait
 2638              	.LVL291:
1083:../uvc.c      **** 
 2639              		.loc 1 1083 0
 2640 1620 0600A0E1 		mov	r0, r6
 2641 1624 FEFFFFEB 		bl	CyU3PGpifSMControl
 2642              	.LVL292:
1086:../uvc.c      ****     		ES_UVC_INVALID_GPIF_STATE, ALPHA_CX3_START_SCK0, ES_UVC_GPIF_SWITCH_TIMEOUT*/);
 2643              		.loc 1 1086 0
 2644 1628 74009FE5 		ldr	r0, .L179+12
 2645 162c 0230A0E3 		mov	r3, #2
 2646 1630 0020A0E1 		mov	r2, r0
 2647 1634 00308DE5 		str	r3, [sp]
 2648 1638 0610A0E1 		mov	r1, r6
 2649 163c 0630A0E1 		mov	r3, r6
1085:../uvc.c      ****     CyU3PGpifSMSwitch(257, 0, 257, 0, 2/*ES_UVC_INVALID_GPIF_STATE, CX3_START_SCK0,
 2650              		.loc 1 1085 0
 2651 1640 7C60C4E5 		strb	r6, [r4, #124]
1086:../uvc.c      ****     		ES_UVC_INVALID_GPIF_STATE, ALPHA_CX3_START_SCK0, ES_UVC_GPIF_SWITCH_TIMEOUT*/);
 2652              		.loc 1 1086 0
 2653 1644 FEFFFFEB 		bl	CyU3PGpifSMSwitch
 2654              	.LVL293:
1089:../uvc.c      **** 
 2655              		.loc 1 1089 0
 2656 1648 0A00A0E3 		mov	r0, #10
 2657 164c FEFFFFEB 		bl	_tx_thread_sleep
 2658              	.LVL294:
1097:../uvc.c      **** 
 2659              		.loc 1 1097 0
 2660 1650 0600A0E1 		mov	r0, r6
 2661 1654 C85084E5 		str	r5, [r4, #200]
 2662              	.LBE77:
 2663              	.LBE76:
1105:../uvc.c      **** 
 2664              		.loc 1 1105 0
 2665 1658 08D08DE2 		add	sp, sp, #8
 2666              		@ sp needed
 2667 165c 7080BDE8 		ldmfd	sp!, {r4, r5, r6, pc}
 2668              	.LVL295:
 2669              	.L178:
1038:../uvc.c      ****         return status;
 2670              		.loc 1 1038 0
 2671 1660 40109FE5 		ldr	r1, .L179+16
 2672 1664 0620A0E1 		mov	r2, r6
 2673 1668 0400A0E3 		mov	r0, #4
 2674              	.LVL296:
 2675 166c FEFFFFEB 		bl	CyU3PDebugPrint
 2676              	.LVL297:
1039:../uvc.c      ****     }
 2677              		.loc 1 1039 0
 2678 1670 0600A0E1 		mov	r0, r6
1105:../uvc.c      **** 
 2679              		.loc 1 1105 0
 2680 1674 08D08DE2 		add	sp, sp, #8
 2681              		@ sp needed
 2682 1678 7080BDE8 		ldmfd	sp!, {r4, r5, r6, pc}
 2683              	.LVL298:
 2684              	.L177:
1031:../uvc.c      ****         return status;
 2685              		.loc 1 1031 0
 2686 167c 28109FE5 		ldr	r1, .L179+20
 2687 1680 0620A0E1 		mov	r2, r6
 2688 1684 0400A0E3 		mov	r0, #4
 2689              	.LVL299:
 2690 1688 FEFFFFEB 		bl	CyU3PDebugPrint
 2691              	.LVL300:
1032:../uvc.c      ****     }
 2692              		.loc 1 1032 0
 2693 168c 0600A0E1 		mov	r0, r6
1105:../uvc.c      **** 
 2694              		.loc 1 1105 0
 2695 1690 08D08DE2 		add	sp, sp, #8
 2696              		@ sp needed
 2697 1694 7080BDE8 		ldmfd	sp!, {r4, r5, r6, pc}
 2698              	.LVL301:
 2699              	.L180:
 2700              		.align	2
 2701              	.L179:
 2702 1698 00000000 		.word	.LANCHOR1
 2703 169c 00000000 		.word	.LANCHOR0
 2704 16a0 00000000 		.word	glChHandleUVCStream
 2705 16a4 01010000 		.word	257
 2706 16a8 7C020000 		.word	.LC15
 2707 16ac 58020000 		.word	.LC14
 2708              		.cfi_endproc
 2709              	.LFE4:
 2711              		.align	2
 2713              	esUVCUvcApplnUSBEventCB:
 2714              	.LFB8:
1323:../uvc.c      ****     uint8_t interface = 0, altSetting = 0;
 2715              		.loc 1 1323 0
 2716              		.cfi_startproc
 2717              		@ args = 0, pretend = 0, frame = 0
 2718              		@ frame_needed = 0, uses_anonymous_args = 0
 2719 16b0 070050E3 		cmp	r0, #7
 2720 16b4 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 2721              	.LCFI13:
 2722              		.cfi_def_cfa_offset 16
 2723              		.cfi_offset 4, -16
 2724              		.cfi_offset 5, -12
 2725              		.cfi_offset 6, -8
 2726              		.cfi_offset 14, -4
 2727 16b8 7080BD88 		ldmhifd	sp!, {r4, r5, r6, pc}
 2728 16bc 0150A0E3 		mov	r5, #1
 2729 16c0 1530A0E1 		mov	r3, r5, asl r0
 2730 16c4 33C013E2 		ands	ip, r3, #51
 2731 16c8 1200001A 		bne	.L184
 2732 16cc 804013E2 		ands	r4, r3, #128
 2733 16d0 3E00000A 		beq	.L225
 2734              	.LBB86:
 2735              	.LBB87:
1342:../uvc.c      ****             {
 2736              		.loc 1 1342 0
 2737 16d4 2134A0E1 		mov	r3, r1, lsr #8
 2738 16d8 012053E2 		subs	r2, r3, #1
 2739 16dc 003072E2 		rsbs	r3, r2, #0
 2740 16e0 0230B3E0 		adcs	r3, r3, r2
1338:../uvc.c      **** 
 2741              		.loc 1 1338 0
 2742 16e4 FF1001E2 		and	r1, r1, #255
1340:../uvc.c      **** 
 2743              		.loc 1 1340 0
 2744 16e8 68429FE5 		ldr	r4, .L230
1342:../uvc.c      ****             {
 2745              		.loc 1 1342 0
 2746 16ec 010051E3 		cmp	r1, #1
 2747 16f0 0020A013 		movne	r2, #0
 2748 16f4 01200302 		andeq	r2, r3, #1
 2749 16f8 000052E3 		cmp	r2, #0
1340:../uvc.c      **** 
 2750              		.loc 1 1340 0
 2751 16fc 80C084E5 		str	ip, [r4, #128]
1342:../uvc.c      ****             {
 2752              		.loc 1 1342 0
 2753 1700 3B00000A 		beq	.L187
1345:../uvc.c      ****                 {
 2754              		.loc 1 1345 0
 2755 1704 C43094E5 		ldr	r3, [r4, #196]
 2756 1708 000053E3 		cmp	r3, #0
 2757 170c 6200001A 		bne	.L226
 2758              	.L188:
 2759              	.LBE87:
 2760              	.LBE86:
1386:../uvc.c      **** 
 2761              		.loc 1 1386 0
 2762 1710 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 2763              	.LBB105:
 2764              	.LBB102:
1350:../uvc.c      **** 
 2765              		.loc 1 1350 0
 2766 1714 FEFFFFEA 		b	esUVCUvcApplnStart
 2767              	.L184:
 2768              	.LBE102:
 2769              	.LBE105:
1370:../uvc.c      ****                 glIsConfigured = CyTrue;
 2770              		.loc 1 1370 0
 2771 1718 053050E2 		subs	r3, r0, #5
1369:../uvc.c      ****             if (evtype == CY_U3P_USB_EVENT_SETCONF)
 2772              		.loc 1 1369 0
 2773 171c 34429FE5 		ldr	r4, .L230
1370:../uvc.c      ****                 glIsConfigured = CyTrue;
 2774              		.loc 1 1370 0
 2775 1720 000073E2 		rsbs	r0, r3, #0
 2776 1724 0300B0E0 		adcs	r0, r0, r3
1369:../uvc.c      ****             if (evtype == CY_U3P_USB_EVENT_SETCONF)
 2777              		.loc 1 1369 0
 2778 1728 0060A0E3 		mov	r6, #0
 2779 172c D80084E5 		str	r0, [r4, #216]
 2780 1730 806084E5 		str	r6, [r4, #128]
1376:../uvc.c      ****             if (glIsApplnActive)
 2781              		.loc 1 1376 0
 2782 1734 FEFFFFEB 		bl	CyU3PUsbLPMEnable
1377:../uvc.c      ****             {
 2783              		.loc 1 1377 0
 2784 1738 C43094E5 		ldr	r3, [r4, #196]
 2785 173c 060053E1 		cmp	r3, r6
 2786 1740 7080BD08 		ldmeqfd	sp!, {r4, r5, r6, pc}
 2787              	.LBB106:
 2788              	.LBB107:
1135:../uvc.c      ****     CyU3PBusyWait (100);
 2789              		.loc 1 1135 0
 2790 1744 0510A0E1 		mov	r1, r5
 2791 1748 8300A0E3 		mov	r0, #131
 2792              	.LBE107:
 2793              	.LBE106:
1379:../uvc.c      ****                 esUVCUvcApplnStop ();
 2794              		.loc 1 1379 0
 2795 174c CC5084E5 		str	r5, [r4, #204]
 2796              	.LBB111:
 2797              	.LBB108:
1118:../uvc.c      **** 
 2798              		.loc 1 1118 0
 2799 1750 C46084E5 		str	r6, [r4, #196]
1135:../uvc.c      ****     CyU3PBusyWait (100);
 2800              		.loc 1 1135 0
 2801 1754 FEFFFFEB 		bl	CyU3PUsbSetEpNak
1136:../uvc.c      **** 
 2802              		.loc 1 1136 0
 2803 1758 6400A0E3 		mov	r0, #100
 2804 175c FEFFFFEB 		bl	CyFx3BusyWait
1140:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 2805              		.loc 1 1140 0
 2806 1760 F4019FE5 		ldr	r0, .L230+4
 2807 1764 FEFFFFEB 		bl	CyU3PDmaMultiChannelReset
1141:../uvc.c      ****     {
 2808              		.loc 1 1141 0
 2809 1768 002050E2 		subs	r2, r0, #0
 2810 176c 6D00001A 		bne	.L227
 2811              	.L193:
1145:../uvc.c      **** 
 2812              		.loc 1 1145 0
 2813 1770 1900A0E3 		mov	r0, #25
 2814 1774 FEFFFFEB 		bl	_tx_thread_sleep
1148:../uvc.c      ****     /* Clear the stall condition and sequence numbers if ClearFeature. */
 2815              		.loc 1 1148 0
 2816 1778 8300A0E3 		mov	r0, #131
 2817 177c FEFFFFEB 		bl	CyU3PUsbFlushEp
1150:../uvc.c      ****     {
 2818              		.loc 1 1150 0
 2819 1780 CC3094E5 		ldr	r3, [r4, #204]
 2820 1784 CC519FE5 		ldr	r5, .L230
 2821 1788 000053E3 		cmp	r3, #0
 2822 178c 0500000A 		beq	.L194
1152:../uvc.c      ****         glIsClearFeature = CyFalse;
 2823              		.loc 1 1152 0
 2824 1790 8300A0E3 		mov	r0, #131
 2825 1794 0010A0E3 		mov	r1, #0
 2826 1798 0120A0E3 		mov	r2, #1
 2827 179c FEFFFFEB 		bl	CyU3PUsbStall
1153:../uvc.c      ****     }
 2828              		.loc 1 1153 0
 2829 17a0 0030A0E3 		mov	r3, #0
 2830 17a4 CC3085E5 		str	r3, [r5, #204]
 2831              	.L194:
1155:../uvc.c      **** 	CyU3PBusyWait (200);
 2832              		.loc 1 1155 0
 2833 17a8 0010A0E3 		mov	r1, #0
 2834 17ac 8300A0E3 		mov	r0, #131
 2835 17b0 FEFFFFEB 		bl	CyU3PUsbSetEpNak
1156:../uvc.c      **** 
 2836              		.loc 1 1156 0
 2837 17b4 C800A0E3 		mov	r0, #200
 2838 17b8 FEFFFFEB 		bl	CyFx3BusyWait
1158:../uvc.c      ****     glDmaDone = 0;
 2839              		.loc 1 1158 0
 2840 17bc 0030A0E3 		mov	r3, #0
 2841 17c0 743084E5 		str	r3, [r4, #116]
1159:../uvc.c      **** 
 2842              		.loc 1 1159 0
 2843 17c4 783084E5 		str	r3, [r4, #120]
 2844              	.LBE108:
 2845              	.LBE111:
1386:../uvc.c      **** 
 2846              		.loc 1 1386 0
 2847 17c8 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 2848              	.LBB112:
 2849              	.LBB109:
1162:../uvc.c      **** }
 2850              		.loc 1 1162 0
 2851 17cc FEFFFFEA 		b	CyU3PUsbLPMEnable
 2852              	.L225:
 2853 17d0 040013E3 		tst	r3, #4
 2854 17d4 7080BD08 		ldmeqfd	sp!, {r4, r5, r6, pc}
 2855              	.LBE109:
 2856              	.LBE112:
1330:../uvc.c      ****             CyU3PEventSet (&glFxUVCEvent, ES_USB_SUSP_EVENT_FLAG, CYU3P_EVENT_OR);
 2857              		.loc 1 1330 0
 2858 17d8 78319FE5 		ldr	r3, .L230
1331:../uvc.c      ****             break;
 2859              		.loc 1 1331 0
 2860 17dc 0420A0E1 		mov	r2, r4
1330:../uvc.c      ****             CyU3PEventSet (&glFxUVCEvent, ES_USB_SUSP_EVENT_FLAG, CYU3P_EVENT_OR);
 2861              		.loc 1 1330 0
 2862 17e0 804083E5 		str	r4, [r3, #128]
1331:../uvc.c      ****             break;
 2863              		.loc 1 1331 0
 2864 17e4 0300A0E1 		mov	r0, r3
 2865 17e8 2010A0E3 		mov	r1, #32
1386:../uvc.c      **** 
 2866              		.loc 1 1386 0
 2867 17ec 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
1331:../uvc.c      ****             break;
 2868              		.loc 1 1331 0
 2869 17f0 FEFFFFEA 		b	_txe_event_flags_set
 2870              	.L187:
 2871              	.LBB113:
 2872              	.LBB103:
1353:../uvc.c      ****             {
 2873              		.loc 1 1353 0
 2874 17f4 000051E3 		cmp	r1, #0
 2875 17f8 0010A013 		movne	r1, #0
 2876 17fc 01100302 		andeq	r1, r3, #1
 2877 1800 000051E3 		cmp	r1, #0
 2878 1804 7080BD08 		ldmeqfd	sp!, {r4, r5, r6, pc}
 2879              	.LBB88:
 2880              	.LBB89:
1135:../uvc.c      ****     CyU3PBusyWait (100);
 2881              		.loc 1 1135 0
 2882 1808 0510A0E1 		mov	r1, r5
 2883 180c 8300A0E3 		mov	r0, #131
 2884              	.LBE89:
 2885              	.LBE88:
1355:../uvc.c      ****             	/* Stop the application before re-starting. */
 2886              		.loc 1 1355 0
 2887 1810 D02084E5 		str	r2, [r4, #208]
 2888              	.LBB93:
 2889              	.LBB90:
1118:../uvc.c      **** 
 2890              		.loc 1 1118 0
 2891 1814 C42084E5 		str	r2, [r4, #196]
 2892              	.LBE90:
 2893              	.LBE93:
1357:../uvc.c      **** 				esUVCUvcApplnStop ();
 2894              		.loc 1 1357 0
 2895 1818 CC5084E5 		str	r5, [r4, #204]
 2896              	.LBB94:
 2897              	.LBB91:
1135:../uvc.c      ****     CyU3PBusyWait (100);
 2898              		.loc 1 1135 0
 2899 181c FEFFFFEB 		bl	CyU3PUsbSetEpNak
1136:../uvc.c      **** 
 2900              		.loc 1 1136 0
 2901 1820 6400A0E3 		mov	r0, #100
 2902 1824 FEFFFFEB 		bl	CyFx3BusyWait
1140:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 2903              		.loc 1 1140 0
 2904 1828 2C019FE5 		ldr	r0, .L230+4
 2905 182c FEFFFFEB 		bl	CyU3PDmaMultiChannelReset
1141:../uvc.c      ****     {
 2906              		.loc 1 1141 0
 2907 1830 002050E2 		subs	r2, r0, #0
 2908 1834 4300001A 		bne	.L228
 2909              	.L191:
1145:../uvc.c      **** 
 2910              		.loc 1 1145 0
 2911 1838 1900A0E3 		mov	r0, #25
 2912 183c FEFFFFEB 		bl	_tx_thread_sleep
1148:../uvc.c      ****     /* Clear the stall condition and sequence numbers if ClearFeature. */
 2913              		.loc 1 1148 0
 2914 1840 8300A0E3 		mov	r0, #131
 2915 1844 FEFFFFEB 		bl	CyU3PUsbFlushEp
1150:../uvc.c      ****     {
 2916              		.loc 1 1150 0
 2917 1848 CC3094E5 		ldr	r3, [r4, #204]
 2918 184c 04519FE5 		ldr	r5, .L230
 2919 1850 000053E3 		cmp	r3, #0
 2920 1854 0500000A 		beq	.L192
1152:../uvc.c      ****         glIsClearFeature = CyFalse;
 2921              		.loc 1 1152 0
 2922 1858 8300A0E3 		mov	r0, #131
 2923 185c 0010A0E3 		mov	r1, #0
 2924 1860 0120A0E3 		mov	r2, #1
 2925 1864 FEFFFFEB 		bl	CyU3PUsbStall
1153:../uvc.c      ****     }
 2926              		.loc 1 1153 0
 2927 1868 0030A0E3 		mov	r3, #0
 2928 186c CC3085E5 		str	r3, [r5, #204]
 2929              	.L192:
1155:../uvc.c      **** 	CyU3PBusyWait (200);
 2930              		.loc 1 1155 0
 2931 1870 0010A0E3 		mov	r1, #0
 2932 1874 8300A0E3 		mov	r0, #131
 2933 1878 FEFFFFEB 		bl	CyU3PUsbSetEpNak
1158:../uvc.c      ****     glDmaDone = 0;
 2934              		.loc 1 1158 0
 2935 187c 0050A0E3 		mov	r5, #0
1156:../uvc.c      **** 
 2936              		.loc 1 1156 0
 2937 1880 C800A0E3 		mov	r0, #200
 2938 1884 FEFFFFEB 		bl	CyFx3BusyWait
1158:../uvc.c      ****     glDmaDone = 0;
 2939              		.loc 1 1158 0
 2940 1888 745084E5 		str	r5, [r4, #116]
1159:../uvc.c      **** 
 2941              		.loc 1 1159 0
 2942 188c 785084E5 		str	r5, [r4, #120]
1162:../uvc.c      **** }
 2943              		.loc 1 1162 0
 2944 1890 FEFFFFEB 		bl	CyU3PUsbLPMEnable
 2945              	.LBE91:
 2946              	.LBE94:
1359:../uvc.c      ****             }
 2947              		.loc 1 1359 0
 2948 1894 D450C4E5 		strb	r5, [r4, #212]
 2949 1898 7080BDE8 		ldmfd	sp!, {r4, r5, r6, pc}
 2950              	.L226:
 2951              	.LBB95:
 2952              	.LBB96:
1135:../uvc.c      ****     CyU3PBusyWait (100);
 2953              		.loc 1 1135 0
 2954 189c 0510A0E1 		mov	r1, r5
 2955 18a0 8300A0E3 		mov	r0, #131
1118:../uvc.c      **** 
 2956              		.loc 1 1118 0
 2957 18a4 C4C084E5 		str	ip, [r4, #196]
 2958              	.LBE96:
 2959              	.LBE95:
1347:../uvc.c      ****                     esUVCUvcApplnStop ();
 2960              		.loc 1 1347 0
 2961 18a8 CC5084E5 		str	r5, [r4, #204]
 2962              	.LBB99:
 2963              	.LBB97:
1135:../uvc.c      ****     CyU3PBusyWait (100);
 2964              		.loc 1 1135 0
 2965 18ac FEFFFFEB 		bl	CyU3PUsbSetEpNak
1136:../uvc.c      **** 
 2966              		.loc 1 1136 0
 2967 18b0 6400A0E3 		mov	r0, #100
 2968 18b4 FEFFFFEB 		bl	CyFx3BusyWait
1140:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 2969              		.loc 1 1140 0
 2970 18b8 9C009FE5 		ldr	r0, .L230+4
 2971 18bc FEFFFFEB 		bl	CyU3PDmaMultiChannelReset
1141:../uvc.c      ****     {
 2972              		.loc 1 1141 0
 2973 18c0 002050E2 		subs	r2, r0, #0
 2974 18c4 1B00001A 		bne	.L229
 2975              	.L189:
1145:../uvc.c      **** 
 2976              		.loc 1 1145 0
 2977 18c8 1900A0E3 		mov	r0, #25
 2978 18cc FEFFFFEB 		bl	_tx_thread_sleep
1148:../uvc.c      ****     /* Clear the stall condition and sequence numbers if ClearFeature. */
 2979              		.loc 1 1148 0
 2980 18d0 8300A0E3 		mov	r0, #131
 2981 18d4 FEFFFFEB 		bl	CyU3PUsbFlushEp
1150:../uvc.c      ****     {
 2982              		.loc 1 1150 0
 2983 18d8 CC3094E5 		ldr	r3, [r4, #204]
 2984 18dc 74509FE5 		ldr	r5, .L230
 2985 18e0 000053E3 		cmp	r3, #0
 2986 18e4 0500000A 		beq	.L190
1152:../uvc.c      ****         glIsClearFeature = CyFalse;
 2987              		.loc 1 1152 0
 2988 18e8 8300A0E3 		mov	r0, #131
 2989 18ec 0010A0E3 		mov	r1, #0
 2990 18f0 0120A0E3 		mov	r2, #1
 2991 18f4 FEFFFFEB 		bl	CyU3PUsbStall
1153:../uvc.c      ****     }
 2992              		.loc 1 1153 0
 2993 18f8 0030A0E3 		mov	r3, #0
 2994 18fc CC3085E5 		str	r3, [r5, #204]
 2995              	.L190:
1155:../uvc.c      **** 	CyU3PBusyWait (200);
 2996              		.loc 1 1155 0
 2997 1900 0010A0E3 		mov	r1, #0
 2998 1904 8300A0E3 		mov	r0, #131
 2999 1908 FEFFFFEB 		bl	CyU3PUsbSetEpNak
1156:../uvc.c      **** 
 3000              		.loc 1 1156 0
 3001 190c C800A0E3 		mov	r0, #200
 3002 1910 FEFFFFEB 		bl	CyFx3BusyWait
1158:../uvc.c      ****     glDmaDone = 0;
 3003              		.loc 1 1158 0
 3004 1914 0030A0E3 		mov	r3, #0
 3005 1918 743084E5 		str	r3, [r4, #116]
1159:../uvc.c      **** 
 3006              		.loc 1 1159 0
 3007 191c 783084E5 		str	r3, [r4, #120]
1162:../uvc.c      **** }
 3008              		.loc 1 1162 0
 3009 1920 FEFFFFEB 		bl	CyU3PUsbLPMEnable
 3010 1924 79FFFFEA 		b	.L188
 3011              	.L227:
 3012              	.LBE97:
 3013              	.LBE99:
 3014              	.LBE103:
 3015              	.LBE113:
 3016              	.LBB114:
 3017              	.LBB110:
1143:../uvc.c      ****     }
 3018              		.loc 1 1143 0
 3019 1928 30109FE5 		ldr	r1, .L230+8
 3020 192c 0400A0E3 		mov	r0, #4
 3021 1930 FEFFFFEB 		bl	CyU3PDebugPrint
 3022 1934 8DFFFFEA 		b	.L193
 3023              	.L229:
 3024              	.LBE110:
 3025              	.LBE114:
 3026              	.LBB115:
 3027              	.LBB104:
 3028              	.LBB100:
 3029              	.LBB98:
 3030 1938 20109FE5 		ldr	r1, .L230+8
 3031 193c 0400A0E3 		mov	r0, #4
 3032 1940 FEFFFFEB 		bl	CyU3PDebugPrint
 3033 1944 DFFFFFEA 		b	.L189
 3034              	.L228:
 3035              	.LBE98:
 3036              	.LBE100:
 3037              	.LBB101:
 3038              	.LBB92:
 3039 1948 10109FE5 		ldr	r1, .L230+8
 3040 194c 0400A0E3 		mov	r0, #4
 3041 1950 FEFFFFEB 		bl	CyU3PDebugPrint
 3042 1954 B7FFFFEA 		b	.L191
 3043              	.L231:
 3044              		.align	2
 3045              	.L230:
 3046 1958 00000000 		.word	.LANCHOR0
 3047 195c 00000000 		.word	glChHandleUVCStream
 3048 1960 9C020000 		.word	.LC16
 3049              	.LBE92:
 3050              	.LBE101:
 3051              	.LBE104:
 3052              	.LBE115:
 3053              		.cfi_endproc
 3054              	.LFE8:
 3056              		.align	2
 3057              		.global	esUVCUvcApplnStop
 3059              	esUVCUvcApplnStop:
 3060              	.LFB5:
1114:../uvc.c      ****     CyU3PReturnStatus_t status = CY_U3P_SUCCESS;
 3061              		.loc 1 1114 0
 3062              		.cfi_startproc
 3063              		@ args = 0, pretend = 0, frame = 0
 3064              		@ frame_needed = 0, uses_anonymous_args = 0
 3065              	.LVL302:
 3066 1964 38402DE9 		stmfd	sp!, {r3, r4, r5, lr}
 3067              	.LCFI14:
 3068              		.cfi_def_cfa_offset 16
 3069              		.cfi_offset 3, -16
 3070              		.cfi_offset 4, -12
 3071              		.cfi_offset 5, -8
 3072              		.cfi_offset 14, -4
1118:../uvc.c      **** 
 3073              		.loc 1 1118 0
 3074 1968 98409FE5 		ldr	r4, .L242
 3075 196c 0030A0E3 		mov	r3, #0
1135:../uvc.c      ****     CyU3PBusyWait (100);
 3076              		.loc 1 1135 0
 3077 1970 0110A0E3 		mov	r1, #1
 3078 1974 8300A0E3 		mov	r0, #131
1118:../uvc.c      **** 
 3079              		.loc 1 1118 0
 3080 1978 C43084E5 		str	r3, [r4, #196]
1135:../uvc.c      ****     CyU3PBusyWait (100);
 3081              		.loc 1 1135 0
 3082 197c FEFFFFEB 		bl	CyU3PUsbSetEpNak
 3083              	.LVL303:
1136:../uvc.c      **** 
 3084              		.loc 1 1136 0
 3085 1980 6400A0E3 		mov	r0, #100
 3086 1984 FEFFFFEB 		bl	CyFx3BusyWait
 3087              	.LVL304:
1140:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 3088              		.loc 1 1140 0
 3089 1988 7C009FE5 		ldr	r0, .L242+4
 3090 198c FEFFFFEB 		bl	CyU3PDmaMultiChannelReset
 3091              	.LVL305:
1141:../uvc.c      ****     {
 3092              		.loc 1 1141 0
 3093 1990 002050E2 		subs	r2, r0, #0
 3094 1994 1700001A 		bne	.L241
 3095              	.LVL306:
 3096              	.L233:
1145:../uvc.c      **** 
 3097              		.loc 1 1145 0
 3098 1998 1900A0E3 		mov	r0, #25
 3099 199c FEFFFFEB 		bl	_tx_thread_sleep
 3100              	.LVL307:
1148:../uvc.c      ****     /* Clear the stall condition and sequence numbers if ClearFeature. */
 3101              		.loc 1 1148 0
 3102 19a0 8300A0E3 		mov	r0, #131
 3103 19a4 FEFFFFEB 		bl	CyU3PUsbFlushEp
 3104              	.LVL308:
1150:../uvc.c      ****     {
 3105              		.loc 1 1150 0
 3106 19a8 CC3094E5 		ldr	r3, [r4, #204]
 3107 19ac 54509FE5 		ldr	r5, .L242
 3108 19b0 000053E3 		cmp	r3, #0
 3109 19b4 0500000A 		beq	.L234
1152:../uvc.c      ****         glIsClearFeature = CyFalse;
 3110              		.loc 1 1152 0
 3111 19b8 8300A0E3 		mov	r0, #131
 3112 19bc 0010A0E3 		mov	r1, #0
 3113 19c0 0120A0E3 		mov	r2, #1
 3114 19c4 FEFFFFEB 		bl	CyU3PUsbStall
 3115              	.LVL309:
1153:../uvc.c      ****     }
 3116              		.loc 1 1153 0
 3117 19c8 0030A0E3 		mov	r3, #0
 3118 19cc CC3085E5 		str	r3, [r5, #204]
 3119              	.L234:
1155:../uvc.c      **** 	CyU3PBusyWait (200);
 3120              		.loc 1 1155 0
 3121 19d0 0010A0E3 		mov	r1, #0
 3122 19d4 8300A0E3 		mov	r0, #131
 3123 19d8 FEFFFFEB 		bl	CyU3PUsbSetEpNak
 3124              	.LVL310:
1156:../uvc.c      **** 
 3125              		.loc 1 1156 0
 3126 19dc C800A0E3 		mov	r0, #200
 3127 19e0 FEFFFFEB 		bl	CyFx3BusyWait
 3128              	.LVL311:
1158:../uvc.c      ****     glDmaDone = 0;
 3129              		.loc 1 1158 0
 3130 19e4 0030A0E3 		mov	r3, #0
 3131 19e8 743084E5 		str	r3, [r4, #116]
1159:../uvc.c      **** 
 3132              		.loc 1 1159 0
 3133 19ec 783084E5 		str	r3, [r4, #120]
1163:../uvc.c      **** 
 3134              		.loc 1 1163 0
 3135 19f0 3840BDE8 		ldmfd	sp!, {r3, r4, r5, lr}
1162:../uvc.c      **** }
 3136              		.loc 1 1162 0
 3137 19f4 FEFFFFEA 		b	CyU3PUsbLPMEnable
 3138              	.LVL312:
 3139              	.L241:
1143:../uvc.c      ****     }
 3140              		.loc 1 1143 0
 3141 19f8 10109FE5 		ldr	r1, .L242+8
 3142 19fc 0400A0E3 		mov	r0, #4
 3143              	.LVL313:
 3144 1a00 FEFFFFEB 		bl	CyU3PDebugPrint
 3145              	.LVL314:
 3146 1a04 E3FFFFEA 		b	.L233
 3147              	.L243:
 3148              		.align	2
 3149              	.L242:
 3150 1a08 00000000 		.word	.LANCHOR0
 3151 1a0c 00000000 		.word	glChHandleUVCStream
 3152 1a10 9C020000 		.word	.LC16
 3153              		.cfi_endproc
 3154              	.LFE5:
 3156              		.align	2
 3158              	esUVCUvcApplnUSBSetupCB:
 3159              	.LFB11:
1478:../uvc.c      ****     uint8_t  bRequest, bType,bRType, bTarget;
 3160              		.loc 1 1478 0
 3161              		.cfi_startproc
 3162              		@ args = 0, pretend = 0, frame = 16
 3163              		@ frame_needed = 0, uses_anonymous_args = 0
 3164              	.LVL315:
1493:../uvc.c      ****     wValue   = ((setupdat0 & CY_U3P_USB_VALUE_MASK)   >> CY_U3P_USB_VALUE_POS);
 3165              		.loc 1 1493 0
 3166 1a14 FF3C00E2 		and	r3, r0, #65280
 3167 1a18 2334A0E1 		mov	r3, r3, lsr #8
1478:../uvc.c      ****     uint8_t  bRequest, bType,bRType, bTarget;
 3168              		.loc 1 1478 0
 3169 1a1c F0472DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
 3170              	.LCFI15:
 3171              		.cfi_def_cfa_offset 32
 3172              		.cfi_offset 4, -32
 3173              		.cfi_offset 5, -28
 3174              		.cfi_offset 6, -24
 3175              		.cfi_offset 7, -20
 3176              		.cfi_offset 8, -16
 3177              		.cfi_offset 9, -12
 3178              		.cfi_offset 10, -8
 3179              		.cfi_offset 14, -4
1493:../uvc.c      ****     wValue   = ((setupdat0 & CY_U3P_USB_VALUE_MASK)   >> CY_U3P_USB_VALUE_POS);
 3180              		.loc 1 1493 0
 3181 1a20 FF4003E2 		and	r4, r3, #255
1495:../uvc.c      ****     wLength  = ((setupdat1 & CY_U3P_USB_LENGTH_MASK)  >> CY_U3P_USB_LENGTH_POS);
 3182              		.loc 1 1495 0
 3183 1a24 0158A0E1 		mov	r5, r1, asl #16
1478:../uvc.c      ****     uint8_t  bRequest, bType,bRType, bTarget;
 3184              		.loc 1 1478 0
 3185 1a28 20D04DE2 		sub	sp, sp, #32
 3186              	.LCFI16:
 3187              		.cfi_def_cfa_offset 64
1503:../uvc.c      ****             && (wIndex == CY_FX_EP_BULK_VIDEO) && (wValue == CY_U3P_USBX_FS_EP_HALT))
 3188              		.loc 1 1503 0
 3189 1a2c 01C054E2 		subs	ip, r4, #1
1494:../uvc.c      ****     wIndex   = ((setupdat1 & CY_U3P_USB_INDEX_MASK)   >> CY_U3P_USB_INDEX_POS);
 3190              		.loc 1 1494 0
 3191 1a30 2088A0E1 		mov	r8, r0, lsr #16
1496:../uvc.c      **** 
 3192              		.loc 1 1496 0
 3193 1a34 2118A0E1 		mov	r1, r1, lsr #16
 3194              	.LVL316:
1490:../uvc.c      ****     bType    = (bRType & CY_U3P_USB_TYPE_MASK);
 3195              		.loc 1 1490 0
 3196 1a38 FF6000E2 		and	r6, r0, #255
1495:../uvc.c      ****     wLength  = ((setupdat1 & CY_U3P_USB_LENGTH_MASK)  >> CY_U3P_USB_LENGTH_POS);
 3197              		.loc 1 1495 0
 3198 1a3c 2558A0E1 		mov	r5, r5, lsr #16
1503:../uvc.c      ****             && (wIndex == CY_FX_EP_BULK_VIDEO) && (wValue == CY_U3P_USBX_FS_EP_HALT))
 3199              		.loc 1 1503 0
 3200 1a40 00A07CE2 		rsbs	r10, ip, #0
1499:../uvc.c      **** #endif
 3201              		.loc 1 1499 0
 3202 1a44 08108DE5 		str	r1, [sp, #8]
1492:../uvc.c      ****     bRequest = ((setupdat0 & CY_U3P_USB_REQUEST_MASK) >> CY_U3P_USB_REQUEST_POS);
 3203              		.loc 1 1492 0
 3204 1a48 037000E2 		and	r7, r0, #3
1499:../uvc.c      **** #endif
 3205              		.loc 1 1499 0
 3206 1a4c 00808DE5 		str	r8, [sp]
 3207 1a50 04508DE5 		str	r5, [sp, #4]
 3208 1a54 0620A0E1 		mov	r2, r6
1481:../uvc.c      ****     uint8_t  ep0Buf[2];
 3209              		.loc 1 1481 0
 3210 1a58 0090A0E3 		mov	r9, #0
1499:../uvc.c      **** #endif
 3211              		.loc 1 1499 0
 3212 1a5c 0400A0E3 		mov	r0, #4
 3213              	.LVL317:
 3214 1a60 D0149FE5 		ldr	r1, .L343
1503:../uvc.c      ****             && (wIndex == CY_FX_EP_BULK_VIDEO) && (wValue == CY_U3P_USBX_FS_EP_HALT))
 3215              		.loc 1 1503 0
 3216 1a64 0CA0BAE0 		adcs	r10, r10, ip
1481:../uvc.c      ****     uint8_t  ep0Buf[2];
 3217              		.loc 1 1481 0
 3218 1a68 B091CDE1 		strh	r9, [sp, #16]	@ movhi
 3219              	.LVL318:
1499:../uvc.c      **** #endif
 3220              		.loc 1 1499 0
 3221 1a6c FEFFFFEB 		bl	CyU3PDebugPrint
 3222              	.LVL319:
1503:../uvc.c      ****             && (wIndex == CY_FX_EP_BULK_VIDEO) && (wValue == CY_U3P_USBX_FS_EP_HALT))
 3223              		.loc 1 1503 0
 3224 1a70 020057E3 		cmp	r7, #2
 3225 1a74 01005403 		cmpeq	r4, #1
 3226 1a78 0200001A 		bne	.L245
1504:../uvc.c      ****     {
 3227              		.loc 1 1504 0
 3228 1a7c 830055E3 		cmp	r5, #131
 3229 1a80 09005801 		cmpeq	r8, r9
 3230 1a84 0900000A 		beq	.L325
 3231              	.L245:
1516:../uvc.c      ****     {
 3232              		.loc 1 1516 0
 3233 1a88 800056E3 		cmp	r6, #128
 3234 1a8c 6400000A 		beq	.L326
 3235              	.L252:
1523:../uvc.c      ****                 || (bRequest == CY_U3P_USB_SC_CLEAR_FEATURE)) && (wValue == 0))
 3236              		.loc 1 1523 0
 3237 1a90 010057E3 		cmp	r7, #1
 3238 1a94 3300000A 		beq	.L327
 3239              	.L254:
1491:../uvc.c      ****     bTarget  = (bRType & CY_U3P_USB_TARGET_MASK);
 3240              		.loc 1 1491 0
 3241 1a98 600006E2 		and	r0, r6, #96
1553:../uvc.c      ****     {
 3242              		.loc 1 1553 0
 3243 1a9c 200050E3 		cmp	r0, #32
 3244 1aa0 4800000A 		beq	.L328
 3245              	.LVL320:
 3246              	.L248:
1513:../uvc.c      ****     }
 3247              		.loc 1 1513 0
 3248 1aa4 0000A0E3 		mov	r0, #0
 3249              	.LVL321:
 3250              	.L247:
1764:../uvc.c      **** 
 3251              		.loc 1 1764 0
 3252 1aa8 20D08DE2 		add	sp, sp, #32
 3253              		@ sp needed
 3254 1aac F087BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
 3255              	.LVL322:
 3256              	.L325:
1506:../uvc.c      ****         {
 3257              		.loc 1 1506 0
 3258 1ab0 84449FE5 		ldr	r4, .L343+4
 3259              	.LVL323:
 3260 1ab4 C43094E5 		ldr	r3, [r4, #196]
 3261 1ab8 090053E1 		cmp	r3, r9
 3262 1abc F8FFFF0A 		beq	.L248
1506:../uvc.c      ****         {
 3263              		.loc 1 1506 0 is_stmt 0 discriminator 1
 3264 1ac0 803094E5 		ldr	r3, [r4, #128]
 3265 1ac4 000053E3 		cmp	r3, #0
 3266 1ac8 F5FFFF0A 		beq	.L248
1509:../uvc.c      ****             esUVCUvcApplnStop();
 3267              		.loc 1 1509 0 is_stmt 1
 3268 1acc 0130A0E3 		mov	r3, #1
 3269              	.LBB118:
 3270              	.LBB119:
1135:../uvc.c      ****     CyU3PBusyWait (100);
 3271              		.loc 1 1135 0
 3272 1ad0 0310A0E1 		mov	r1, r3
 3273 1ad4 8300A0E3 		mov	r0, #131
 3274              	.LBE119:
 3275              	.LBE118:
1509:../uvc.c      ****             esUVCUvcApplnStop();
 3276              		.loc 1 1509 0
 3277 1ad8 CC3084E5 		str	r3, [r4, #204]
 3278              	.LVL324:
1508:../uvc.c      ****             glIsClearFeature = CyTrue;
 3279              		.loc 1 1508 0
 3280 1adc D09084E5 		str	r9, [r4, #208]
 3281              	.LBB122:
 3282              	.LBB120:
1118:../uvc.c      **** 
 3283              		.loc 1 1118 0
 3284 1ae0 C49084E5 		str	r9, [r4, #196]
1135:../uvc.c      ****     CyU3PBusyWait (100);
 3285              		.loc 1 1135 0
 3286 1ae4 FEFFFFEB 		bl	CyU3PUsbSetEpNak
 3287              	.LVL325:
1136:../uvc.c      **** 
 3288              		.loc 1 1136 0
 3289 1ae8 6400A0E3 		mov	r0, #100
 3290 1aec FEFFFFEB 		bl	CyFx3BusyWait
 3291              	.LVL326:
1140:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 3292              		.loc 1 1140 0
 3293 1af0 48049FE5 		ldr	r0, .L343+8
 3294 1af4 FEFFFFEB 		bl	CyU3PDmaMultiChannelReset
 3295              	.LVL327:
1141:../uvc.c      ****     {
 3296              		.loc 1 1141 0
 3297 1af8 002050E2 		subs	r2, r0, #0
 3298 1afc 7700001A 		bne	.L329
 3299              	.LVL328:
 3300              	.L249:
1145:../uvc.c      **** 
 3301              		.loc 1 1145 0
 3302 1b00 1900A0E3 		mov	r0, #25
 3303 1b04 FEFFFFEB 		bl	_tx_thread_sleep
 3304              	.LVL329:
1148:../uvc.c      ****     /* Clear the stall condition and sequence numbers if ClearFeature. */
 3305              		.loc 1 1148 0
 3306 1b08 8300A0E3 		mov	r0, #131
 3307 1b0c FEFFFFEB 		bl	CyU3PUsbFlushEp
 3308              	.LVL330:
1150:../uvc.c      ****     {
 3309              		.loc 1 1150 0
 3310 1b10 CC3094E5 		ldr	r3, [r4, #204]
 3311 1b14 20549FE5 		ldr	r5, .L343+4
 3312              	.LVL331:
 3313 1b18 000053E3 		cmp	r3, #0
 3314 1b1c 0500000A 		beq	.L250
1152:../uvc.c      ****         glIsClearFeature = CyFalse;
 3315              		.loc 1 1152 0
 3316 1b20 8300A0E3 		mov	r0, #131
 3317 1b24 0010A0E3 		mov	r1, #0
 3318 1b28 0120A0E3 		mov	r2, #1
 3319 1b2c FEFFFFEB 		bl	CyU3PUsbStall
 3320              	.LVL332:
1153:../uvc.c      ****     }
 3321              		.loc 1 1153 0
 3322 1b30 0030A0E3 		mov	r3, #0
 3323 1b34 CC3085E5 		str	r3, [r5, #204]
 3324              	.L250:
1155:../uvc.c      **** 	CyU3PBusyWait (200);
 3325              		.loc 1 1155 0
 3326 1b38 0010A0E3 		mov	r1, #0
 3327 1b3c 8300A0E3 		mov	r0, #131
1158:../uvc.c      ****     glDmaDone = 0;
 3328              		.loc 1 1158 0
 3329 1b40 0070A0E3 		mov	r7, #0
 3330              	.LVL333:
1155:../uvc.c      **** 	CyU3PBusyWait (200);
 3331              		.loc 1 1155 0
 3332 1b44 FEFFFFEB 		bl	CyU3PUsbSetEpNak
 3333              	.LVL334:
1156:../uvc.c      **** 
 3334              		.loc 1 1156 0
 3335 1b48 C800A0E3 		mov	r0, #200
 3336 1b4c FEFFFFEB 		bl	CyFx3BusyWait
 3337              	.LVL335:
1158:../uvc.c      ****     glDmaDone = 0;
 3338              		.loc 1 1158 0
 3339 1b50 747084E5 		str	r7, [r4, #116]
1159:../uvc.c      **** 
 3340              		.loc 1 1159 0
 3341 1b54 787084E5 		str	r7, [r4, #120]
1162:../uvc.c      **** }
 3342              		.loc 1 1162 0
 3343 1b58 FEFFFFEB 		bl	CyU3PUsbLPMEnable
 3344              	.LVL336:
 3345              	.LBE120:
 3346              	.LBE122:
1511:../uvc.c      ****         }
 3347              		.loc 1 1511 0
 3348 1b5c D470C4E5 		strb	r7, [r4, #212]
1513:../uvc.c      ****     }
 3349              		.loc 1 1513 0
 3350 1b60 0700A0E1 		mov	r0, r7
 3351 1b64 CFFFFFEA 		b	.L247
 3352              	.LVL337:
 3353              	.L327:
1523:../uvc.c      ****                 || (bRequest == CY_U3P_USB_SC_CLEAR_FEATURE)) && (wValue == 0))
 3354              		.loc 1 1523 0 discriminator 1
 3355 1b68 FD3004E2 		and	r3, r4, #253
 3356 1b6c 010053E3 		cmp	r3, #1
 3357 1b70 0B00000A 		beq	.L330
 3358              	.L255:
1537:../uvc.c      ****             (bTarget == CY_U3P_USB_TARGET_INTF))
 3359              		.loc 1 1537 0
 3360 1b74 000054E3 		cmp	r4, #0
 3361 1b78 C6FFFF1A 		bne	.L254
1541:../uvc.c      ****         {
 3362              		.loc 1 1541 0
 3363 1b7c 000055E3 		cmp	r5, #0
 3364 1b80 2000001A 		bne	.L256
1545:../uvc.c      ****         }
 3365              		.loc 1 1545 0
 3366 1b84 18108DE2 		add	r1, sp, #24
 3367 1b88 0200A0E3 		mov	r0, #2
1543:../uvc.c      ****             ep0Buf[1] = 0;
 3368              		.loc 1 1543 0
 3369 1b8c 1850CDE5 		strb	r5, [sp, #24]
1544:../uvc.c      ****             CyU3PUsbSendEP0Data (0x02, ep0Buf);
 3370              		.loc 1 1544 0
 3371 1b90 1950CDE5 		strb	r5, [sp, #25]
1545:../uvc.c      ****         }
 3372              		.loc 1 1545 0
 3373 1b94 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 3374              	.LVL338:
1549:../uvc.c      ****     }
 3375              		.loc 1 1549 0
 3376 1b98 0100A0E3 		mov	r0, #1
1764:../uvc.c      **** 
 3377              		.loc 1 1764 0
 3378 1b9c 20D08DE2 		add	sp, sp, #32
 3379              		@ sp needed
 3380 1ba0 F087BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
 3381              	.LVL339:
 3382              	.L330:
1524:../uvc.c      ****     {
 3383              		.loc 1 1524 0
 3384 1ba4 000058E3 		cmp	r8, #0
 3385 1ba8 F1FFFF1A 		bne	.L255
1526:../uvc.c      ****         {
 3386              		.loc 1 1526 0
 3387 1bac 88339FE5 		ldr	r3, .L343+4
 3388 1bb0 D83093E5 		ldr	r3, [r3, #216]
 3389 1bb4 000053E3 		cmp	r3, #0
 3390 1bb8 1200000A 		beq	.L256
1528:../uvc.c      ****         }
 3391              		.loc 1 1528 0
 3392 1bbc FEFFFFEB 		bl	CyU3PUsbAckSetup
 3393              	.LVL340:
1534:../uvc.c      ****     }
 3394              		.loc 1 1534 0
 3395 1bc0 0700A0E1 		mov	r0, r7
 3396 1bc4 B7FFFFEA 		b	.L247
 3397              	.L328:
1558:../uvc.c      **** 		{
 3398              		.loc 1 1558 0
 3399 1bc8 FF5005E2 		and	r5, r5, #255
 3400              	.LVL341:
 3401 1bcc 010055E3 		cmp	r5, #1
 3402 1bd0 B3FFFF1A 		bne	.L248
1574:../uvc.c      **** 	            {
 3403              		.loc 1 1574 0
 3404 1bd4 7F3084E2 		add	r3, r4, #127
 3405 1bd8 FF3003E2 		and	r3, r3, #255
 3406 1bdc 870054E3 		cmp	r4, #135
 3407 1be0 02005313 		cmpne	r3, #2
 3408 1be4 1400008A 		bhi	.L257
 3409              	.LVL342:
1577:../uvc.c      **** 	                {
 3410              		.loc 1 1577 0
 3411 1be8 010C58E3 		cmp	r8, #256
 3412 1bec 020C5813 		cmpne	r8, #512
 3413 1bf0 3E00000A 		beq	.L331
1621:../uvc.c      **** 	                {
 3414              		.loc 1 1621 0
 3415 1bf4 030C58E3 		cmp	r8, #768
 3416 1bf8 010B5813 		cmpne	r8, #1024
 3417 1bfc 5200000A 		beq	.L332
 3418              	.LVL343:
 3419              	.L324:
1636:../uvc.c      **** 	                if((wValue == CY_FX_UVC_PROBE_CTRL) || (wValue == CY_FX_UVC_COMMIT_CTRL))
 3420              		.loc 1 1636 0
 3421 1c00 0100A0E3 		mov	r0, #1
 3422 1c04 A7FFFFEA 		b	.L247
 3423              	.LVL344:
 3424              	.L256:
1532:../uvc.c      ****         }
 3425              		.loc 1 1532 0
 3426 1c08 0000A0E3 		mov	r0, #0
 3427 1c0c 0020A0E1 		mov	r2, r0
 3428 1c10 0110A0E3 		mov	r1, #1
 3429 1c14 FEFFFFEB 		bl	CyU3PUsbStall
 3430              	.LVL345:
1534:../uvc.c      ****     }
 3431              		.loc 1 1534 0
 3432 1c18 0100A0E3 		mov	r0, #1
1764:../uvc.c      **** 
 3433              		.loc 1 1764 0
 3434 1c1c 20D08DE2 		add	sp, sp, #32
 3435              		@ sp needed
 3436 1c20 F087BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
 3437              	.LVL346:
 3438              	.L326:
1519:../uvc.c      ****             CyU3PUsbSetLinkPowerState (CyU3PUsbLPM_U0);
 3439              		.loc 1 1519 0
 3440 1c24 FEFFFFEB 		bl	CyU3PUsbGetSpeed
 3441              	.LVL347:
 3442 1c28 030050E3 		cmp	r0, #3
 3443 1c2c 97FFFF1A 		bne	.L252
1520:../uvc.c      ****     }
 3444              		.loc 1 1520 0
 3445 1c30 0000A0E3 		mov	r0, #0
 3446 1c34 FEFFFFEB 		bl	CyU3PUsbSetLinkPowerState
 3447              	.LVL348:
 3448 1c38 94FFFFEA 		b	.L252
 3449              	.LVL349:
 3450              	.L257:
1634:../uvc.c      **** 	            {
 3451              		.loc 1 1634 0
 3452 1c3c 00005AE3 		cmp	r10, #0
 3453 1c40 97FFFF0A 		beq	.L248
 3454              	.LVL350:
1637:../uvc.c      **** 	                {
 3455              		.loc 1 1637 0
 3456 1c44 01CC58E2 		subs	ip, r8, #256
 3457 1c48 00507CE2 		rsbs	r5, ip, #0
 3458 1c4c 0C50B5E0 		adcs	r5, r5, ip
 3459 1c50 026C58E2 		subs	r6, r8, #512
 3460              	.LVL351:
 3461 1c54 004076E2 		rsbs	r4, r6, #0
 3462              	.LVL352:
 3463 1c58 0640B4E0 		adcs	r4, r4, r6
 3464 1c5c 053094E1 		orrs	r3, r4, r5
 3465 1c60 4900001A 		bne	.L333
1688:../uvc.c      **** 	                {
 3466              		.loc 1 1688 0
 3467 1c64 031C58E2 		subs	r1, r8, #768
 3468 1c68 005071E2 		rsbs	r5, r1, #0
 3469 1c6c 0150B5E0 		adcs	r5, r5, r1
 3470 1c70 010B58E2 		subs	r0, r8, #1024
 3471 1c74 004070E2 		rsbs	r4, r0, #0
 3472 1c78 0040B4E0 		adcs	r4, r4, r0
 3473 1c7c 053094E1 		orrs	r3, r4, r5
 3474 1c80 6700001A 		bne	.L334
1716:../uvc.c      **** 	                {
 3475              		.loc 1 1716 0
 3476 1c84 050C58E3 		cmp	r8, #1280
 3477 1c88 DCFFFF1A 		bne	.L324
1718:../uvc.c      **** 						if (status != CY_U3P_SUCCESS)
 3478              		.loc 1 1718 0
 3479 1c8c 1000A0E3 		mov	r0, #16
 3480 1c90 00208DE0 		add	r2, sp, r0
 3481 1c94 A8129FE5 		ldr	r1, .L343+12
 3482 1c98 FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 3483              	.LVL353:
1719:../uvc.c      **** 						{
 3484              		.loc 1 1719 0
 3485 1c9c 002050E2 		subs	r2, r0, #0
 3486 1ca0 0200000A 		beq	.L278
1721:../uvc.c      **** 						}
 3487              		.loc 1 1721 0
 3488 1ca4 0400A0E3 		mov	r0, #4
 3489              	.LVL354:
 3490 1ca8 98129FE5 		ldr	r1, .L343+16
 3491 1cac FEFFFFEB 		bl	CyU3PDebugPrint
 3492              	.LVL355:
 3493              	.L278:
1724:../uvc.c      **** 						{
 3494              		.loc 1 1724 0
 3495 1cb0 B031DDE1 		ldrh	r3, [sp, #16]
 3496 1cb4 010053E3 		cmp	r3, #1
 3497 1cb8 7100008A 		bhi	.L275
1730:../uvc.c      **** 							{
 3498              		.loc 1 1730 0
 3499 1cbc 78329FE5 		ldr	r3, .L343+4
 3500 1cc0 DC20D3E5 		ldrb	r2, [r3, #220]	@ zero_extendqisi2
 3501 1cc4 010052E3 		cmp	r2, #1
 3502 1cc8 CCFFFF1A 		bne	.L324
1732:../uvc.c      **** 								glStillCaptureStart = CyTrue;
 3503              		.loc 1 1732 0
 3504 1ccc 0310A0E3 		mov	r1, #3
1636:../uvc.c      **** 	                if((wValue == CY_FX_UVC_PROBE_CTRL) || (wValue == CY_FX_UVC_COMMIT_CTRL))
 3505              		.loc 1 1636 0
 3506 1cd0 0200A0E1 		mov	r0, r2
1733:../uvc.c      **** 							}
 3507              		.loc 1 1733 0
 3508 1cd4 8C2083E5 		str	r2, [r3, #140]
1732:../uvc.c      **** 								glStillCaptureStart = CyTrue;
 3509              		.loc 1 1732 0
 3510 1cd8 9010C3E5 		strb	r1, [r3, #144]
 3511 1cdc 71FFFFEA 		b	.L247
 3512              	.LVL356:
 3513              	.L329:
 3514              	.LBB123:
 3515              	.LBB121:
1143:../uvc.c      ****     }
 3516              		.loc 1 1143 0
 3517 1ce0 64129FE5 		ldr	r1, .L343+20
 3518 1ce4 0400A0E3 		mov	r0, #4
 3519              	.LVL357:
 3520 1ce8 FEFFFFEB 		bl	CyU3PDebugPrint
 3521              	.LVL358:
 3522 1cec 83FFFFEA 		b	.L249
 3523              	.LVL359:
 3524              	.L331:
 3525              	.LBE121:
 3526              	.LBE123:
1582:../uvc.c      **** 						{
 3527              		.loc 1 1582 0
 3528 1cf0 FEFFFFEB 		bl	CyU3PUsbGetSpeed
 3529              	.LVL360:
 3530 1cf4 030050E3 		cmp	r0, #3
 3531 1cf8 1C00001A 		bne	.L259
1584:../uvc.c      **** 							{
 3532              		.loc 1 1584 0
 3533 1cfc 4C329FE5 		ldr	r3, .L343+24
 3534 1d00 9034D3E5 		ldrb	r3, [r3, #1168]	@ zero_extendqisi2
 3535 1d04 040053E3 		cmp	r3, #4
 3536 1d08 6500000A 		beq	.L335
1589:../uvc.c      **** 							{
 3537              		.loc 1 1589 0
 3538 1d0c 030053E3 		cmp	r3, #3
 3539 1d10 6D00000A 		beq	.L336
1594:../uvc.c      **** 							{
 3540              		.loc 1 1594 0
 3541 1d14 020053E3 		cmp	r3, #2
 3542 1d18 6600000A 		beq	.L337
1599:../uvc.c      **** 							{
 3543              		.loc 1 1599 0
 3544 1d1c 010053E3 		cmp	r3, #1
 3545 1d20 7200000A 		beq	.L338
 3546              	.L261:
1615:../uvc.c      **** 						if (status != CY_U3P_SUCCESS)
 3547              		.loc 1 1615 0
 3548 1d24 1A00A0E3 		mov	r0, #26
 3549 1d28 24129FE5 		ldr	r1, .L343+28
 3550 1d2c FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 3551              	.LVL361:
1616:../uvc.c      **** 						{
 3552              		.loc 1 1616 0
 3553 1d30 002050E2 		subs	r2, r0, #0
 3554 1d34 B1FFFF0A 		beq	.L324
 3555              	.L265:
1618:../uvc.c      **** 						}
 3556              		.loc 1 1618 0
 3557 1d38 0400A0E3 		mov	r0, #4
 3558              	.LVL362:
 3559 1d3c 14129FE5 		ldr	r1, .L343+32
 3560 1d40 FEFFFFEB 		bl	CyU3PDebugPrint
 3561              	.LVL363:
1576:../uvc.c      **** 	                if((wValue == CY_FX_UVC_PROBE_CTRL) || (wValue == CY_FX_UVC_COMMIT_CTRL))
 3562              		.loc 1 1576 0
 3563 1d44 0100A0E3 		mov	r0, #1
 3564 1d48 56FFFFEA 		b	.L247
 3565              	.LVL364:
 3566              	.L332:
1623:../uvc.c      **** 	                	{
 3567              		.loc 1 1623 0
 3568 1d4c FEFFFFEB 		bl	CyU3PUsbGetSpeed
 3569              	.LVL365:
 3570 1d50 030050E3 		cmp	r0, #3
 3571 1d54 A9FFFF1A 		bne	.L324
1625:../uvc.c      **** 							if (status != CY_U3P_SUCCESS)
 3572              		.loc 1 1625 0
 3573 1d58 0B00A0E3 		mov	r0, #11
 3574 1d5c F8119FE5 		ldr	r1, .L343+36
 3575 1d60 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 3576              	.LVL366:
1626:../uvc.c      **** 							{
 3577              		.loc 1 1626 0
 3578 1d64 002050E2 		subs	r2, r0, #0
 3579 1d68 A4FFFF0A 		beq	.L324
 3580 1d6c F1FFFFEA 		b	.L265
 3581              	.LVL367:
 3582              	.L259:
1605:../uvc.c      **** 						{
 3583              		.loc 1 1605 0
 3584 1d70 FEFFFFEB 		bl	CyU3PUsbGetSpeed
 3585              	.LVL368:
 3586 1d74 020050E3 		cmp	r0, #2
 3587 1d78 3C00000A 		beq	.L339
1612:../uvc.c      **** 						}
 3588              		.loc 1 1612 0
 3589 1d7c DC119FE5 		ldr	r1, .L343+40
 3590 1d80 0400A0E3 		mov	r0, #4
 3591 1d84 FEFFFFEB 		bl	CyU3PDebugPrint
 3592              	.LVL369:
 3593 1d88 E5FFFFEA 		b	.L261
 3594              	.LVL370:
 3595              	.L333:
1640:../uvc.c      **** 								glCommitCtrl, &readCount);
 3596              		.loc 1 1640 0
 3597 1d8c 10208DE2 		add	r2, sp, #16
 3598 1d90 CC119FE5 		ldr	r1, .L343+44
 3599 1d94 FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 3600              	.LVL371:
1642:../uvc.c      **** 						{
 3601              		.loc 1 1642 0
 3602 1d98 002050E2 		subs	r2, r0, #0
 3603 1d9c 3C00001A 		bne	.L340
 3604              	.LVL372:
 3605              	.L268:
1647:../uvc.c      **** 						{
 3606              		.loc 1 1647 0
 3607 1da0 B031DDE1 		ldrh	r3, [sp, #16]
 3608 1da4 1A0053E3 		cmp	r3, #26
 3609 1da8 3500008A 		bhi	.L275
1654:../uvc.c      **** 							{
 3610              		.loc 1 1654 0
 3611 1dac 000055E3 		cmp	r5, #0
 3612 1db0 5300001A 		bne	.L341
1659:../uvc.c      **** 							{
 3613              		.loc 1 1659 0
 3614 1db4 000054E3 		cmp	r4, #0
 3615 1db8 90FFFF0A 		beq	.L324
1662:../uvc.c      **** 								{
 3616              		.loc 1 1662 0
 3617 1dbc 78419FE5 		ldr	r4, .L343+4
 3618 1dc0 D410D4E5 		ldrb	r1, [r4, #212]	@ zero_extendqisi2
 3619 1dc4 000051E3 		cmp	r1, #0
 3620 1dc8 5300001A 		bne	.L323
 3621 1dcc 7C319FE5 		ldr	r3, .L343+24
 3622 1dd0 8C219FE5 		ldr	r2, .L343+44
 3623              	.L271:
1674:../uvc.c      **** 								{
 3624              		.loc 1 1674 0
 3625 1dd4 C40094E5 		ldr	r0, [r4, #196]
1665:../uvc.c      **** 								glCurrentFrameIndex = glCommitCtrl[3];
 3626              		.loc 1 1665 0
 3627 1dd8 0320D2E5 		ldrb	r2, [r2, #3]	@ zero_extendqisi2
1664:../uvc.c      **** 									glcheckframe=glCommitCtrl[3];
 3628              		.loc 1 1664 0
 3629 1ddc 011081E2 		add	r1, r1, #1
 3630 1de0 FF1001E2 		and	r1, r1, #255
1674:../uvc.c      **** 								{
 3631              		.loc 1 1674 0
 3632 1de4 000050E3 		cmp	r0, #0
1668:../uvc.c      **** 
 3633              		.loc 1 1668 0
 3634 1de8 0100A0E3 		mov	r0, #1
1665:../uvc.c      **** 								glCurrentFrameIndex = glCommitCtrl[3];
 3635              		.loc 1 1665 0
 3636 1dec 1826C3E5 		strb	r2, [r3, #1560]
1666:../uvc.c      **** 								glFrameIndexToSet = glCurrentFrameIndex;
 3637              		.loc 1 1666 0
 3638 1df0 9024C3E5 		strb	r2, [r3, #1168]
1664:../uvc.c      **** 									glcheckframe=glCommitCtrl[3];
 3639              		.loc 1 1664 0
 3640 1df4 D410C4E5 		strb	r1, [r4, #212]
1667:../uvc.c      **** 								glPreviewStarted = CyTrue;
 3641              		.loc 1 1667 0
 3642 1df8 8820C4E5 		strb	r2, [r4, #136]
1668:../uvc.c      **** 
 3643              		.loc 1 1668 0
 3644 1dfc D00084E5 		str	r0, [r4, #208]
1664:../uvc.c      **** 									glcheckframe=glCommitCtrl[3];
 3645              		.loc 1 1664 0
 3646 1e00 34319FE5 		ldr	r3, .L343+4
1674:../uvc.c      **** 								{
 3647              		.loc 1 1674 0
 3648 1e04 0300000A 		beq	.L272
1676:../uvc.c      **** 										glIsClearFeature = CyFalse;
 3649              		.loc 1 1676 0
 3650 1e08 011071E2 		rsbs	r1, r1, #1
 3651 1e0c 0010A033 		movcc	r1, #0
 3652 1e10 CC1083E5 		str	r1, [r3, #204]
1681:../uvc.c      **** 								}
 3653              		.loc 1 1681 0
 3654 1e14 FEFFFFEB 		bl	esUVCUvcApplnStop
 3655              	.LVL373:
 3656              	.L272:
1683:../uvc.c      **** 								}
 3657              		.loc 1 1683 0
 3658 1e18 FEFFFFEB 		bl	esUVCUvcApplnStart
 3659              	.LVL374:
1636:../uvc.c      **** 	                if((wValue == CY_FX_UVC_PROBE_CTRL) || (wValue == CY_FX_UVC_COMMIT_CTRL))
 3660              		.loc 1 1636 0
 3661 1e1c 0100A0E3 		mov	r0, #1
 3662 1e20 20FFFFEA 		b	.L247
 3663              	.LVL375:
 3664              	.L334:
1691:../uvc.c      **** 						if (status != CY_U3P_SUCCESS)
 3665              		.loc 1 1691 0
 3666 1e24 1000A0E3 		mov	r0, #16
 3667 1e28 00208DE0 		add	r2, sp, r0
 3668 1e2c 34119FE5 		ldr	r1, .L343+48
 3669 1e30 FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 3670              	.LVL376:
1692:../uvc.c      **** 						{
 3671              		.loc 1 1692 0
 3672 1e34 002050E2 		subs	r2, r0, #0
 3673 1e38 2800001A 		bne	.L342
 3674              	.LVL377:
 3675              	.L274:
1697:../uvc.c      **** 						{
 3676              		.loc 1 1697 0
 3677 1e3c B031DDE1 		ldrh	r3, [sp, #16]
 3678 1e40 0B0053E3 		cmp	r3, #11
 3679 1e44 0E00008A 		bhi	.L275
1704:../uvc.c      **** 							{
 3680              		.loc 1 1704 0
 3681 1e48 000055E3 		cmp	r5, #0
 3682 1e4c 0100001A 		bne	.L277
1709:../uvc.c      **** 							{
 3683              		.loc 1 1709 0
 3684 1e50 000054E3 		cmp	r4, #0
 3685 1e54 69FFFF0A 		beq	.L324
 3686              	.L277:
1706:../uvc.c      **** 							}
 3687              		.loc 1 1706 0
 3688 1e58 08219FE5 		ldr	r2, .L343+48
 3689 1e5c EC309FE5 		ldr	r3, .L343+24
 3690 1e60 0120D2E5 		ldrb	r2, [r2, #1]	@ zero_extendqisi2
1636:../uvc.c      **** 	                if((wValue == CY_FX_UVC_PROBE_CTRL) || (wValue == CY_FX_UVC_COMMIT_CTRL))
 3691              		.loc 1 1636 0
 3692 1e64 0100A0E3 		mov	r0, #1
1706:../uvc.c      **** 							}
 3693              		.loc 1 1706 0
 3694 1e68 1926C3E5 		strb	r2, [r3, #1561]
 3695 1e6c 0DFFFFEA 		b	.L247
 3696              	.LVL378:
 3697              	.L339:
1608:../uvc.c      **** 						}
 3698              		.loc 1 1608 0
 3699 1e70 DC009FE5 		ldr	r0, .L343+28
 3700 1e74 F0109FE5 		ldr	r1, .L343+52
 3701 1e78 1A20A0E3 		mov	r2, #26
 3702 1e7c FEFFFFEB 		bl	CyU3PMemCopy
 3703              	.LVL379:
 3704 1e80 A7FFFFEA 		b	.L261
 3705              	.LVL380:
 3706              	.L275:
1649:../uvc.c      **** 						}
 3707              		.loc 1 1649 0
 3708 1e84 E4109FE5 		ldr	r1, .L343+56
 3709 1e88 0400A0E3 		mov	r0, #4
 3710 1e8c FEFFFFEB 		bl	CyU3PDebugPrint
 3711              	.LVL381:
 3712 1e90 5AFFFFEA 		b	.L324
 3713              	.LVL382:
 3714              	.L340:
1644:../uvc.c      **** 						}
 3715              		.loc 1 1644 0
 3716 1e94 AC109FE5 		ldr	r1, .L343+16
 3717 1e98 0400A0E3 		mov	r0, #4
 3718              	.LVL383:
 3719 1e9c FEFFFFEB 		bl	CyU3PDebugPrint
 3720              	.LVL384:
 3721 1ea0 BEFFFFEA 		b	.L268
 3722              	.LVL385:
 3723              	.L335:
1586:../uvc.c      **** 							}
 3724              		.loc 1 1586 0
 3725 1ea4 A8009FE5 		ldr	r0, .L343+28
 3726 1ea8 C4109FE5 		ldr	r1, .L343+60
 3727 1eac 1A20A0E3 		mov	r2, #26
 3728 1eb0 FEFFFFEB 		bl	CyU3PMemCopy
 3729              	.LVL386:
 3730 1eb4 9AFFFFEA 		b	.L261
 3731              	.L337:
1596:../uvc.c      **** 							}
 3732              		.loc 1 1596 0
 3733 1eb8 94009FE5 		ldr	r0, .L343+28
 3734 1ebc B4109FE5 		ldr	r1, .L343+64
 3735 1ec0 1A20A0E3 		mov	r2, #26
 3736 1ec4 FEFFFFEB 		bl	CyU3PMemCopy
 3737              	.LVL387:
 3738 1ec8 95FFFFEA 		b	.L261
 3739              	.L336:
1591:../uvc.c      **** 							}
 3740              		.loc 1 1591 0
 3741 1ecc 80009FE5 		ldr	r0, .L343+28
 3742 1ed0 A4109FE5 		ldr	r1, .L343+68
 3743 1ed4 1A20A0E3 		mov	r2, #26
 3744 1ed8 FEFFFFEB 		bl	CyU3PMemCopy
 3745              	.LVL388:
 3746 1edc 90FFFFEA 		b	.L261
 3747              	.LVL389:
 3748              	.L342:
1694:../uvc.c      **** 						}
 3749              		.loc 1 1694 0
 3750 1ee0 60109FE5 		ldr	r1, .L343+16
 3751 1ee4 0400A0E3 		mov	r0, #4
 3752              	.LVL390:
 3753 1ee8 FEFFFFEB 		bl	CyU3PDebugPrint
 3754              	.LVL391:
 3755 1eec D2FFFFEA 		b	.L274
 3756              	.LVL392:
 3757              	.L338:
1601:../uvc.c      **** 							}
 3758              		.loc 1 1601 0
 3759 1ef0 5C009FE5 		ldr	r0, .L343+28
 3760 1ef4 84109FE5 		ldr	r1, .L343+72
 3761 1ef8 1A20A0E3 		mov	r2, #26
 3762 1efc FEFFFFEB 		bl	CyU3PMemCopy
 3763              	.LVL393:
 3764 1f00 87FFFFEA 		b	.L261
 3765              	.LVL394:
 3766              	.L341:
1656:../uvc.c      **** 							}
 3767              		.loc 1 1656 0
 3768 1f04 58209FE5 		ldr	r2, .L343+44
 3769 1f08 40309FE5 		ldr	r3, .L343+24
 3770 1f0c 0320D2E5 		ldrb	r2, [r2, #3]	@ zero_extendqisi2
1636:../uvc.c      **** 	                if((wValue == CY_FX_UVC_PROBE_CTRL) || (wValue == CY_FX_UVC_COMMIT_CTRL))
 3771              		.loc 1 1636 0
 3772 1f10 0100A0E3 		mov	r0, #1
1656:../uvc.c      **** 							}
 3773              		.loc 1 1656 0
 3774 1f14 9024C3E5 		strb	r2, [r3, #1168]
 3775 1f18 E2FEFFEA 		b	.L247
 3776              	.L323:
1662:../uvc.c      **** 								{
 3777              		.loc 1 1662 0 discriminator 1
 3778 1f1c 40209FE5 		ldr	r2, .L343+44
 3779 1f20 28309FE5 		ldr	r3, .L343+24
 3780 1f24 03C0D2E5 		ldrb	ip, [r2, #3]	@ zero_extendqisi2
 3781 1f28 1806D3E5 		ldrb	r0, [r3, #1560]	@ zero_extendqisi2
 3782 1f2c 00005CE1 		cmp	ip, r0
 3783 1f30 A7FFFF1A 		bne	.L271
 3784 1f34 31FFFFEA 		b	.L324
 3785              	.L344:
 3786              		.align	2
 3787              	.L343:
 3788 1f38 C0020000 		.word	.LC17
 3789 1f3c 00000000 		.word	.LANCHOR0
 3790 1f40 00000000 		.word	glChHandleUVCStream
 3791 1f44 DC000000 		.word	.LANCHOR0+220
 3792 1f48 58030000 		.word	.LC20
 3793 1f4c 9C020000 		.word	.LC16
 3794 1f50 00000000 		.word	.LANCHOR1
 3795 1f54 00000000 		.word	glProbeCtrl
 3796 1f58 2C030000 		.word	.LC19
 3797 1f5c 00000000 		.word	glStillProbeCtrl
 3798 1f60 10030000 		.word	.LC18
 3799 1f64 00000000 		.word	glCommitCtrl
 3800 1f68 00000000 		.word	glStillCommitCtrl
 3801 1f6c 00000000 		.word	glVga30ProbeCtrl
 3802 1f70 84030000 		.word	.LC21
 3803 1f74 00000000 		.word	gl5MpProbeCtrl
 3804 1f78 00000000 		.word	glVga60ProbeCtrl
 3805 1f7c 00000000 		.word	gl720pProbeCtrl
 3806 1f80 00000000 		.word	gl1080pProbeCtrl
 3807              		.cfi_endproc
 3808              	.LFE11:
 3810              		.align	2
 3811              		.global	esSetCameraResolution
 3813              	esSetCameraResolution:
 3814              	.LFB10:
1401:../uvc.c      **** 	CyU3PReturnStatus_t status = CY_U3P_SUCCESS;
 3815              		.loc 1 1401 0
 3816              		.cfi_startproc
 3817              		@ args = 0, pretend = 0, frame = 0
 3818              		@ frame_needed = 0, uses_anonymous_args = 0
 3819 1f84 08402DE9 		stmfd	sp!, {r3, lr}
 3820              	.LCFI17:
 3821              		.cfi_def_cfa_offset 8
 3822              		.cfi_offset 3, -8
 3823              		.cfi_offset 14, -4
1403:../uvc.c      **** 	/* Super Speed USB Streams*/
 3824              		.loc 1 1403 0
 3825 1f88 18109FE5 		ldr	r1, .L347
 3826 1f8c 0400A0E3 		mov	r0, #4
 3827 1f90 FEFFFFEB 		bl	CyU3PDebugPrint
1405:../uvc.c      **** 	{
 3828              		.loc 1 1405 0
 3829 1f94 FEFFFFEB 		bl	CyU3PUsbGetSpeed
 3830 1f98 030050E3 		cmp	r0, #3
 3831 1f9c 0880BD08 		ldmeqfd	sp!, {r3, pc}
1470:../uvc.c      **** 
 3832              		.loc 1 1470 0
 3833 1fa0 0840BDE8 		ldmfd	sp!, {r3, lr}
1448:../uvc.c      **** 	{
 3834              		.loc 1 1448 0
 3835 1fa4 FEFFFFEA 		b	CyU3PUsbGetSpeed
 3836              	.L348:
 3837              		.align	2
 3838              	.L347:
 3839 1fa8 A8030000 		.word	.LC22
 3840              		.cfi_endproc
 3841              	.LFE10:
 3843              		.align	2
 3844              		.global	esUVCUvcApplnInit
 3846              	esUVCUvcApplnInit:
 3847              	.LFB12:
1772:../uvc.c      ****     CyU3PEpConfig_t endPointConfig;
 3848              		.loc 1 1772 0
 3849              		.cfi_startproc
 3850              		@ args = 0, pretend = 0, frame = 56
 3851              		@ frame_needed = 0, uses_anonymous_args = 0
 3852              	.LVL395:
 3853 1fac F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3854              	.LCFI18:
 3855              		.cfi_def_cfa_offset 36
 3856              		.cfi_offset 4, -36
 3857              		.cfi_offset 5, -32
 3858              		.cfi_offset 6, -28
 3859              		.cfi_offset 7, -24
 3860              		.cfi_offset 8, -20
 3861              		.cfi_offset 9, -16
 3862              		.cfi_offset 10, -12
 3863              		.cfi_offset 11, -8
 3864              		.cfi_offset 14, -4
 3865 1fb0 44D04DE2 		sub	sp, sp, #68
 3866              	.LCFI19:
 3867              		.cfi_def_cfa_offset 104
1802:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 3868              		.loc 1 1802 0
 3869 1fb4 FEFFFFEB 		bl	CyU3PUsbStart
 3870              	.LVL396:
1803:../uvc.c      ****     {
 3871              		.loc 1 1803 0
 3872 1fb8 004050E2 		subs	r4, r0, #0
 3873 1fbc 0600000A 		beq	.L350
1805:../uvc.c      ****         CyFxAppErrorHandler(status);
 3874              		.loc 1 1805 0
 3875 1fc0 0420A0E1 		mov	r2, r4
 3876 1fc4 0400A0E3 		mov	r0, #4
 3877              	.LVL397:
 3878 1fc8 B4149FE5 		ldr	r1, .L396
 3879 1fcc FEFFFFEB 		bl	CyU3PDebugPrint
 3880              	.LVL398:
 3881              	.L351:
 3882              	.LBB124:
 3883              	.LBB125:
 974:../uvc.c      ****     }
 3884              		.loc 1 974 0
 3885 1fd0 6400A0E3 		mov	r0, #100
 3886 1fd4 FEFFFFEB 		bl	_tx_thread_sleep
 3887              	.LVL399:
 3888 1fd8 FCFFFFEA 		b	.L351
 3889              	.LVL400:
 3890              	.L350:
 3891              	.LBE125:
 3892              	.LBE124:
1811:../uvc.c      **** 
 3893              		.loc 1 1811 0
 3894 1fdc 0110A0E3 		mov	r1, #1
 3895 1fe0 A0049FE5 		ldr	r0, .L396+4
 3896              	.LVL401:
 3897 1fe4 FEFFFFEB 		bl	CyU3PUsbRegisterSetupCallback
 3898              	.LVL402:
1814:../uvc.c      **** 
 3899              		.loc 1 1814 0
 3900 1fe8 9C049FE5 		ldr	r0, .L396+8
 3901 1fec FEFFFFEB 		bl	CyU3PUsbRegisterEventCallback
 3902              	.LVL403:
1817:../uvc.c      **** 
 3903              		.loc 1 1817 0
 3904 1ff0 98049FE5 		ldr	r0, .L396+12
 3905 1ff4 FEFFFFEB 		bl	CyU3PUsbRegisterLPMRequestCallback
 3906              	.LVL404:
1822:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 3907              		.loc 1 1822 0
 3908 1ff8 94249FE5 		ldr	r2, .L396+16
 3909 1ffc 0400A0E1 		mov	r0, r4
 3910 2000 0410A0E1 		mov	r1, r4
 3911 2004 FEFFFFEB 		bl	CyU3PUsbSetDesc
 3912              	.LVL405:
1823:../uvc.c      ****     {
 3913              		.loc 1 1823 0
 3914 2008 002050E2 		subs	r2, r0, #0
 3915 200c 0500000A 		beq	.L352
1825:../uvc.c      ****         CyFxAppErrorHandler(status);
 3916              		.loc 1 1825 0
 3917 2010 0400A0E3 		mov	r0, #4
 3918              	.LVL406:
 3919 2014 7C149FE5 		ldr	r1, .L396+20
 3920 2018 FEFFFFEB 		bl	CyU3PDebugPrint
 3921              	.LVL407:
 3922              	.L353:
 3923              	.LBB126:
 3924              	.LBB127:
 974:../uvc.c      ****     }
 3925              		.loc 1 974 0
 3926 201c 6400A0E3 		mov	r0, #100
 3927 2020 FEFFFFEB 		bl	_tx_thread_sleep
 3928              	.LVL408:
 3929 2024 FCFFFFEA 		b	.L353
 3930              	.LVL409:
 3931              	.L352:
 3932              	.LBE127:
 3933              	.LBE126:
1830:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 3934              		.loc 1 1830 0
 3935 2028 0210A0E1 		mov	r1, r2
 3936 202c 0100A0E3 		mov	r0, #1
 3937              	.LVL410:
 3938 2030 64249FE5 		ldr	r2, .L396+24
 3939              	.LVL411:
 3940 2034 FEFFFFEB 		bl	CyU3PUsbSetDesc
 3941              	.LVL412:
1831:../uvc.c      ****     {
 3942              		.loc 1 1831 0
 3943 2038 002050E2 		subs	r2, r0, #0
 3944 203c 0500000A 		beq	.L354
1833:../uvc.c      ****         CyFxAppErrorHandler(status);
 3945              		.loc 1 1833 0
 3946 2040 0400A0E3 		mov	r0, #4
 3947              	.LVL413:
 3948 2044 54149FE5 		ldr	r1, .L396+28
 3949 2048 FEFFFFEB 		bl	CyU3PDebugPrint
 3950              	.LVL414:
 3951              	.L355:
 3952              	.LBB128:
 3953              	.LBB129:
 974:../uvc.c      ****     }
 3954              		.loc 1 974 0
 3955 204c 6400A0E3 		mov	r0, #100
 3956 2050 FEFFFFEB 		bl	_tx_thread_sleep
 3957              	.LVL415:
 3958 2054 FCFFFFEA 		b	.L355
 3959              	.LVL416:
 3960              	.L354:
 3961              	.LBE129:
 3962              	.LBE128:
1838:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 3963              		.loc 1 1838 0
 3964 2058 0210A0E1 		mov	r1, r2
 3965 205c 0700A0E3 		mov	r0, #7
 3966              	.LVL417:
 3967 2060 3C249FE5 		ldr	r2, .L396+32
 3968              	.LVL418:
 3969 2064 FEFFFFEB 		bl	CyU3PUsbSetDesc
 3970              	.LVL419:
1839:../uvc.c      ****     {
 3971              		.loc 1 1839 0
 3972 2068 002050E2 		subs	r2, r0, #0
 3973 206c 0500000A 		beq	.L356
1841:../uvc.c      ****         CyFxAppErrorHandler(status);
 3974              		.loc 1 1841 0
 3975 2070 0400A0E3 		mov	r0, #4
 3976              	.LVL420:
 3977 2074 2C149FE5 		ldr	r1, .L396+36
 3978 2078 FEFFFFEB 		bl	CyU3PDebugPrint
 3979              	.LVL421:
 3980              	.L357:
 3981              	.LBB130:
 3982              	.LBB131:
 974:../uvc.c      ****     }
 3983              		.loc 1 974 0
 3984 207c 6400A0E3 		mov	r0, #100
 3985 2080 FEFFFFEB 		bl	_tx_thread_sleep
 3986              	.LVL422:
 3987 2084 FCFFFFEA 		b	.L357
 3988              	.LVL423:
 3989              	.L356:
 3990              	.LBE131:
 3991              	.LBE130:
1846:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 3992              		.loc 1 1846 0
 3993 2088 0210A0E1 		mov	r1, r2
 3994 208c 0200A0E3 		mov	r0, #2
 3995              	.LVL424:
 3996 2090 14249FE5 		ldr	r2, .L396+40
 3997              	.LVL425:
 3998 2094 FEFFFFEB 		bl	CyU3PUsbSetDesc
 3999              	.LVL426:
1847:../uvc.c      ****     {
 4000              		.loc 1 1847 0
 4001 2098 002050E2 		subs	r2, r0, #0
 4002 209c 0500000A 		beq	.L358
1849:../uvc.c      ****         CyFxAppErrorHandler(status);
 4003              		.loc 1 1849 0
 4004 20a0 0400A0E3 		mov	r0, #4
 4005              	.LVL427:
 4006 20a4 04149FE5 		ldr	r1, .L396+44
 4007 20a8 FEFFFFEB 		bl	CyU3PDebugPrint
 4008              	.LVL428:
 4009              	.L359:
 4010              	.LBB132:
 4011              	.LBB133:
 974:../uvc.c      ****     }
 4012              		.loc 1 974 0
 4013 20ac 6400A0E3 		mov	r0, #100
 4014 20b0 FEFFFFEB 		bl	_tx_thread_sleep
 4015              	.LVL429:
 4016 20b4 FCFFFFEA 		b	.L359
 4017              	.LVL430:
 4018              	.L358:
 4019              	.LBE133:
 4020              	.LBE132:
1854:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4021              		.loc 1 1854 0
 4022 20b8 0210A0E1 		mov	r1, r2
 4023 20bc 0600A0E3 		mov	r0, #6
 4024              	.LVL431:
 4025 20c0 EC239FE5 		ldr	r2, .L396+48
 4026              	.LVL432:
 4027 20c4 FEFFFFEB 		bl	CyU3PUsbSetDesc
 4028              	.LVL433:
1855:../uvc.c      ****     {
 4029              		.loc 1 1855 0
 4030 20c8 002050E2 		subs	r2, r0, #0
 4031 20cc 0500000A 		beq	.L360
1857:../uvc.c      ****         CyFxAppErrorHandler(status);
 4032              		.loc 1 1857 0
 4033 20d0 0400A0E3 		mov	r0, #4
 4034              	.LVL434:
 4035 20d4 DC139FE5 		ldr	r1, .L396+52
 4036 20d8 FEFFFFEB 		bl	CyU3PDebugPrint
 4037              	.LVL435:
 4038              	.L361:
 4039              	.LBB134:
 4040              	.LBB135:
 974:../uvc.c      ****     }
 4041              		.loc 1 974 0
 4042 20dc 6400A0E3 		mov	r0, #100
 4043 20e0 FEFFFFEB 		bl	_tx_thread_sleep
 4044              	.LVL436:
 4045 20e4 FCFFFFEA 		b	.L361
 4046              	.LVL437:
 4047              	.L360:
 4048              	.LBE135:
 4049              	.LBE134:
1862:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4050              		.loc 1 1862 0
 4051 20e8 0210A0E1 		mov	r1, r2
 4052 20ec 0400A0E3 		mov	r0, #4
 4053              	.LVL438:
 4054 20f0 C4239FE5 		ldr	r2, .L396+56
 4055              	.LVL439:
 4056 20f4 FEFFFFEB 		bl	CyU3PUsbSetDesc
 4057              	.LVL440:
1863:../uvc.c      ****     {
 4058              		.loc 1 1863 0
 4059 20f8 002050E2 		subs	r2, r0, #0
 4060 20fc 0500000A 		beq	.L362
1865:../uvc.c      ****         CyFxAppErrorHandler(status);
 4061              		.loc 1 1865 0
 4062 2100 0400A0E3 		mov	r0, #4
 4063              	.LVL441:
 4064 2104 B4139FE5 		ldr	r1, .L396+60
 4065 2108 FEFFFFEB 		bl	CyU3PDebugPrint
 4066              	.LVL442:
 4067              	.L363:
 4068              	.LBB136:
 4069              	.LBB137:
 974:../uvc.c      ****     }
 4070              		.loc 1 974 0
 4071 210c 6400A0E3 		mov	r0, #100
 4072 2110 FEFFFFEB 		bl	_tx_thread_sleep
 4073              	.LVL443:
 4074 2114 FCFFFFEA 		b	.L363
 4075              	.LVL444:
 4076              	.L362:
 4077              	.LBE137:
 4078              	.LBE136:
1870:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4079              		.loc 1 1870 0
 4080 2118 0210A0E1 		mov	r1, r2
 4081 211c 0300A0E3 		mov	r0, #3
 4082              	.LVL445:
 4083 2120 9C239FE5 		ldr	r2, .L396+64
 4084              	.LVL446:
 4085 2124 FEFFFFEB 		bl	CyU3PUsbSetDesc
 4086              	.LVL447:
1871:../uvc.c      ****     {
 4087              		.loc 1 1871 0
 4088 2128 002050E2 		subs	r2, r0, #0
 4089 212c 0500000A 		beq	.L364
1873:../uvc.c      ****         CyFxAppErrorHandler(status);
 4090              		.loc 1 1873 0
 4091 2130 0400A0E3 		mov	r0, #4
 4092              	.LVL448:
 4093 2134 8C139FE5 		ldr	r1, .L396+68
 4094 2138 FEFFFFEB 		bl	CyU3PDebugPrint
 4095              	.LVL449:
 4096              	.L365:
 4097              	.LBB138:
 4098              	.LBB139:
 974:../uvc.c      ****     }
 4099              		.loc 1 974 0
 4100 213c 6400A0E3 		mov	r0, #100
 4101 2140 FEFFFFEB 		bl	_tx_thread_sleep
 4102              	.LVL450:
 4103 2144 FCFFFFEA 		b	.L365
 4104              	.LVL451:
 4105              	.L364:
 4106              	.LBE139:
 4107              	.LBE138:
1878:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4108              		.loc 1 1878 0
 4109 2148 0210A0E1 		mov	r1, r2
 4110 214c 0500A0E3 		mov	r0, #5
 4111              	.LVL452:
 4112 2150 74239FE5 		ldr	r2, .L396+72
 4113              	.LVL453:
 4114 2154 FEFFFFEB 		bl	CyU3PUsbSetDesc
 4115              	.LVL454:
1879:../uvc.c      ****     {
 4116              		.loc 1 1879 0
 4117 2158 002050E2 		subs	r2, r0, #0
 4118 215c 0500000A 		beq	.L366
1881:../uvc.c      ****         CyFxAppErrorHandler(status);
 4119              		.loc 1 1881 0
 4120 2160 0400A0E3 		mov	r0, #4
 4121              	.LVL455:
 4122 2164 64139FE5 		ldr	r1, .L396+76
 4123 2168 FEFFFFEB 		bl	CyU3PDebugPrint
 4124              	.LVL456:
 4125              	.L367:
 4126              	.LBB140:
 4127              	.LBB141:
 974:../uvc.c      ****     }
 4128              		.loc 1 974 0
 4129 216c 6400A0E3 		mov	r0, #100
 4130 2170 FEFFFFEB 		bl	_tx_thread_sleep
 4131              	.LVL457:
 4132 2174 FCFFFFEA 		b	.L367
 4133              	.LVL458:
 4134              	.L366:
 4135              	.LBE141:
 4136              	.LBE140:
1886:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4137              		.loc 1 1886 0
 4138 2178 54239FE5 		ldr	r2, .L396+80
 4139 217c 0500A0E3 		mov	r0, #5
 4140              	.LVL459:
 4141 2180 0110A0E3 		mov	r1, #1
 4142 2184 FEFFFFEB 		bl	CyU3PUsbSetDesc
 4143              	.LVL460:
1887:../uvc.c      ****     {
 4144              		.loc 1 1887 0
 4145 2188 002050E2 		subs	r2, r0, #0
 4146 218c 0500000A 		beq	.L368
1889:../uvc.c      ****         CyFxAppErrorHandler(status);
 4147              		.loc 1 1889 0
 4148 2190 0400A0E3 		mov	r0, #4
 4149              	.LVL461:
 4150 2194 3C139FE5 		ldr	r1, .L396+84
 4151 2198 FEFFFFEB 		bl	CyU3PDebugPrint
 4152              	.LVL462:
 4153              	.L369:
 4154              	.LBB142:
 4155              	.LBB143:
 974:../uvc.c      ****     }
 4156              		.loc 1 974 0
 4157 219c 6400A0E3 		mov	r0, #100
 4158 21a0 FEFFFFEB 		bl	_tx_thread_sleep
 4159              	.LVL463:
 4160 21a4 FCFFFFEA 		b	.L369
 4161              	.LVL464:
 4162              	.L368:
 4163              	.LBE143:
 4164              	.LBE142:
1894:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4165              		.loc 1 1894 0
 4166 21a8 2C239FE5 		ldr	r2, .L396+88
 4167 21ac 0500A0E3 		mov	r0, #5
 4168              	.LVL465:
 4169 21b0 0210A0E3 		mov	r1, #2
 4170 21b4 FEFFFFEB 		bl	CyU3PUsbSetDesc
 4171              	.LVL466:
1895:../uvc.c      ****     {
 4172              		.loc 1 1895 0
 4173 21b8 002050E2 		subs	r2, r0, #0
 4174 21bc 0500000A 		beq	.L370
1897:../uvc.c      ****         CyFxAppErrorHandler(status);
 4175              		.loc 1 1897 0
 4176 21c0 0400A0E3 		mov	r0, #4
 4177              	.LVL467:
 4178 21c4 14139FE5 		ldr	r1, .L396+92
 4179 21c8 FEFFFFEB 		bl	CyU3PDebugPrint
 4180              	.LVL468:
 4181              	.L371:
 4182              	.LBB144:
 4183              	.LBB145:
 974:../uvc.c      ****     }
 4184              		.loc 1 974 0
 4185 21cc 6400A0E3 		mov	r0, #100
 4186 21d0 FEFFFFEB 		bl	_tx_thread_sleep
 4187              	.LVL469:
 4188 21d4 FCFFFFEA 		b	.L371
 4189              	.LVL470:
 4190              	.L370:
 4191              	.LBE145:
 4192              	.LBE144:
1936:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4193              		.loc 1 1936 0
 4194 21d8 0100A0E3 		mov	r0, #1
 4195              	.LVL471:
 4196 21dc 0010A0E1 		mov	r1, r0
 4197 21e0 FEFFFFEB 		bl	CyU3PConnectState
 4198              	.LVL472:
1937:../uvc.c      ****     {
 4199              		.loc 1 1937 0
 4200 21e4 002050E2 		subs	r2, r0, #0
 4201 21e8 0500000A 		beq	.L372
1939:../uvc.c      ****         CyFxAppErrorHandler(status);
 4202              		.loc 1 1939 0
 4203 21ec 0400A0E3 		mov	r0, #4
 4204              	.LVL473:
 4205 21f0 EC129FE5 		ldr	r1, .L396+96
 4206 21f4 FEFFFFEB 		bl	CyU3PDebugPrint
 4207              	.LVL474:
 4208              	.L373:
 4209              	.LBB146:
 4210              	.LBB147:
 974:../uvc.c      ****     }
 4211              		.loc 1 974 0
 4212 21f8 6400A0E3 		mov	r0, #100
 4213 21fc FEFFFFEB 		bl	_tx_thread_sleep
 4214              	.LVL475:
 4215 2200 FCFFFFEA 		b	.L373
 4216              	.LVL476:
 4217              	.L372:
 4218              	.LBE147:
 4219              	.LBE146:
1946:../uvc.c      ****     endPointConfig.epType = CY_U3P_USB_EP_INTR;
 4220              		.loc 1 1946 0
 4221 2204 0150A0E3 		mov	r5, #1
1947:../uvc.c      ****     endPointConfig.pcktSize = 64;
 4222              		.loc 1 1947 0
 4223 2208 0330A0E3 		mov	r3, #3
1952:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4224              		.loc 1 1952 0
 4225 220c 08108DE2 		add	r1, sp, #8
1948:../uvc.c      ****     endPointConfig.isoPkts  = 1;
 4226              		.loc 1 1948 0
 4227 2210 4060A0E3 		mov	r6, #64
1952:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4228              		.loc 1 1952 0
 4229 2214 8200A0E3 		mov	r0, #130
 4230              	.LVL477:
1946:../uvc.c      ****     endPointConfig.epType = CY_U3P_USB_EP_INTR;
 4231              		.loc 1 1946 0
 4232 2218 08508DE5 		str	r5, [sp, #8]
1949:../uvc.c      ****     endPointConfig.burstLen = 1;
 4233              		.loc 1 1949 0
 4234 221c 1350CDE5 		strb	r5, [sp, #19]
1950:../uvc.c      **** 
 4235              		.loc 1 1950 0
 4236 2220 1250CDE5 		strb	r5, [sp, #18]
1947:../uvc.c      ****     endPointConfig.pcktSize = 64;
 4237              		.loc 1 1947 0
 4238 2224 0C30CDE5 		strb	r3, [sp, #12]
1948:../uvc.c      ****     endPointConfig.isoPkts  = 1;
 4239              		.loc 1 1948 0
 4240 2228 B061CDE1 		strh	r6, [sp, #16]	@ movhi
1952:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4241              		.loc 1 1952 0
 4242 222c FEFFFFEB 		bl	CyU3PSetEpConfig
 4243              	.LVL478:
1953:../uvc.c      ****     {
 4244              		.loc 1 1953 0
 4245 2230 004050E2 		subs	r4, r0, #0
 4246 2234 0600000A 		beq	.L374
1955:../uvc.c      ****         CyFxAppErrorHandler(status);
 4247              		.loc 1 1955 0
 4248 2238 0420A0E1 		mov	r2, r4
 4249 223c 0400A0E3 		mov	r0, #4
 4250              	.LVL479:
 4251 2240 A0129FE5 		ldr	r1, .L396+100
 4252 2244 FEFFFFEB 		bl	CyU3PDebugPrint
 4253              	.LVL480:
 4254              	.L375:
 4255              	.LBB148:
 4256              	.LBB149:
 974:../uvc.c      ****     }
 4257              		.loc 1 974 0
 4258 2248 6400A0E3 		mov	r0, #100
 4259 224c FEFFFFEB 		bl	_tx_thread_sleep
 4260              	.LVL481:
 4261 2250 FCFFFFEA 		b	.L375
 4262              	.LVL482:
 4263              	.L374:
 4264              	.LBE149:
 4265              	.LBE148:
1959:../uvc.c      **** 
 4266              		.loc 1 1959 0
 4267 2254 8200A0E3 		mov	r0, #130
 4268              	.LVL483:
 4269 2258 FEFFFFEB 		bl	CyU3PUsbFlushEp
 4270              	.LVL484:
1963:../uvc.c      **** 
 4271              		.loc 1 1963 0
 4272 225c 0230A0E3 		mov	r3, #2
1968:../uvc.c      **** 
 4273              		.loc 1 1968 0
 4274 2260 FA0FA0E3 		mov	r0, #1000
1963:../uvc.c      **** 
 4275              		.loc 1 1963 0
 4276 2264 0C30CDE5 		strb	r3, [sp, #12]
1962:../uvc.c      ****     endPointConfig.epType = CY_U3P_USB_EP_BULK;
 4277              		.loc 1 1962 0
 4278 2268 08508DE5 		str	r5, [sp, #8]
1965:../uvc.c      ****     endPointConfig.streams = 0;
 4279              		.loc 1 1965 0
 4280 226c 1340CDE5 		strb	r4, [sp, #19]
1966:../uvc.c      **** 
 4281              		.loc 1 1966 0
 4282 2270 BE40CDE1 		strh	r4, [sp, #14]	@ movhi
1968:../uvc.c      **** 
 4283              		.loc 1 1968 0
 4284 2274 FEFFFFEB 		bl	_tx_thread_sleep
 4285              	.LVL485:
1970:../uvc.c      ****     {
 4286              		.loc 1 1970 0
 4287 2278 FEFFFFEB 		bl	CyU3PUsbGetSpeed
 4288              	.LVL486:
 4289 227c 010050E3 		cmp	r0, #1
 4290 2280 1700000A 		beq	.L377
 4291 2284 020050E3 		cmp	r0, #2
1975:../uvc.c      ****             ES_UVC_DATA_BUF_SIZE 	= CY_FX_UVC_BUF_FULL_SIZE;
 4292              		.loc 1 1975 0
 4293 2288 5C429FE5 		ldr	r4, .L396+104
 4294              	.LVL487:
1970:../uvc.c      ****     {
 4295              		.loc 1 1970 0
 4296 228c 5600001A 		bne	.L391
1976:../uvc.c      ****             ES_UVC_STREAM_BUF_COUNT	= CY_FX_UVC_STREAM_BUF_COUNT;
 4297              		.loc 1 1976 0
 4298 2290 58129FE5 		ldr	r1, .L396+108
1975:../uvc.c      ****             ES_UVC_DATA_BUF_SIZE 	= CY_FX_UVC_BUF_FULL_SIZE;
 4299              		.loc 1 1975 0
 4300 2294 0109A0E3 		mov	r0, #16384
1977:../uvc.c      ****             break;
 4301              		.loc 1 1977 0
 4302 2298 0420A0E3 		mov	r2, #4
1973:../uvc.c      ****             endPointConfig.burstLen = 1;
 4303              		.loc 1 1973 0
 4304 229c 023CA0E3 		mov	r3, #512
1974:../uvc.c      ****             ES_UVC_STREAM_BUF_SIZE 	= CY_FX_UVC_STREAM_BUF_SIZE;
 4305              		.loc 1 1974 0
 4306 22a0 1250CDE5 		strb	r5, [sp, #18]
1975:../uvc.c      ****             ES_UVC_DATA_BUF_SIZE 	= CY_FX_UVC_BUF_FULL_SIZE;
 4307              		.loc 1 1975 0
 4308 22a4 BE0DC4E1 		strh	r0, [r4, #222]	@ movhi
1976:../uvc.c      ****             ES_UVC_STREAM_BUF_COUNT	= CY_FX_UVC_STREAM_BUF_COUNT;
 4309              		.loc 1 1976 0
 4310 22a8 BC16C4E1 		strh	r1, [r4, #108]	@ movhi
1977:../uvc.c      ****             break;
 4311              		.loc 1 1977 0
 4312 22ac E020C4E5 		strb	r2, [r4, #224]
1973:../uvc.c      ****             endPointConfig.burstLen = 1;
 4313              		.loc 1 1973 0
 4314 22b0 B031CDE1 		strh	r3, [sp, #16]	@ movhi
 4315              	.L379:
1995:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4316              		.loc 1 1995 0
 4317 22b4 08108DE2 		add	r1, sp, #8
 4318 22b8 8300A0E3 		mov	r0, #131
 4319 22bc FEFFFFEB 		bl	CyU3PSetEpConfig
 4320              	.LVL488:
1996:../uvc.c      ****     {
 4321              		.loc 1 1996 0
 4322 22c0 005050E2 		subs	r5, r0, #0
 4323 22c4 0A00000A 		beq	.L380
1998:../uvc.c      ****         CyFxAppErrorHandler(status);
 4324              		.loc 1 1998 0
 4325 22c8 0520A0E1 		mov	r2, r5
 4326 22cc 0400A0E3 		mov	r0, #4
 4327              	.LVL489:
 4328 22d0 1C129FE5 		ldr	r1, .L396+112
 4329 22d4 FEFFFFEB 		bl	CyU3PDebugPrint
 4330              	.LVL490:
 4331              	.L381:
 4332              	.LBB150:
 4333              	.LBB151:
 974:../uvc.c      ****     }
 4334              		.loc 1 974 0
 4335 22d8 6400A0E3 		mov	r0, #100
 4336 22dc FEFFFFEB 		bl	_tx_thread_sleep
 4337              	.LVL491:
 4338 22e0 FCFFFFEA 		b	.L381
 4339              	.LVL492:
 4340              	.L377:
 4341              	.LBE151:
 4342              	.LBE150:
1981:../uvc.c      ****             endPointConfig.burstLen = 1;
 4343              		.loc 1 1981 0
 4344 22e4 B061CDE1 		strh	r6, [sp, #16]	@ movhi
1982:../uvc.c      ****             break;
 4345              		.loc 1 1982 0
 4346 22e8 1200CDE5 		strb	r0, [sp, #18]
 4347 22ec F8419FE5 		ldr	r4, .L396+104
 4348              	.LVL493:
1983:../uvc.c      **** 
 4349              		.loc 1 1983 0
 4350 22f0 EFFFFFEA 		b	.L379
 4351              	.LVL494:
 4352              	.L380:
2002:../uvc.c      **** 
 4353              		.loc 1 2002 0
 4354 22f4 0110A0E3 		mov	r1, #1
 4355 22f8 8300A0E3 		mov	r0, #131
 4356              	.LVL495:
 4357 22fc FEFFFFEB 		bl	CyU3PUsbEPSetBurstMode
 4358              	.LVL496:
2005:../uvc.c      **** 
 4359              		.loc 1 2005 0
 4360 2300 8300A0E3 		mov	r0, #131
 4361 2304 FEFFFFEB 		bl	CyU3PUsbFlushEp
 4362              	.LVL497:
2014:../uvc.c      **** 
 4363              		.loc 1 2014 0
 4364 2308 E8919FE5 		ldr	r9, .L396+116
2009:../uvc.c      ****     dmaCfg.count                = ES_UVC_STREAM_BUF_COUNT;
 4365              		.loc 1 2009 0
 4366 230c BEADD4E1 		ldrh	r10, [r4, #222]
2010:../uvc.c      ****     dmaCfg.validSckCount        = 2;
 4367              		.loc 1 2010 0
 4368 2310 E0B0D4E5 		ldrb	fp, [r4, #224]	@ zero_extendqisi2
2016:../uvc.c      ****     dmaCfg.dmaMode              = CY_U3P_DMA_MODE_BYTE;
 4369              		.loc 1 2016 0
 4370 2314 E0819FE5 		ldr	r8, .L396+120
2019:../uvc.c      ****     dmaCfg.prodHeader           = CY_FX_UVC_PROD_HEADER;
 4371              		.loc 1 2019 0
 4372 2318 E0719FE5 		ldr	r7, .L396+124
2018:../uvc.c      ****     dmaCfg.cb                   = esUVCUvcAppDmaCallback;
 4373              		.loc 1 2018 0
 4374 231c 18C0A0E3 		mov	ip, #24
2013:../uvc.c      ****     dmaCfg.prodSckId[1]         = (CyU3PDmaSocketId_t)CY_U3P_PIB_SOCKET_1;//ES_UVC_PRODUCER_PPORT_S
 4375              		.loc 1 2013 0
 4376 2320 01ECA0E3 		mov	lr, #256
2020:../uvc.c      ****     dmaCfg.prodFooter           = CY_FX_UVC_PROD_FOOTER;
 4377              		.loc 1 2020 0
 4378 2324 0C30A0E3 		mov	r3, #12
2025:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4379              		.loc 1 2025 0
 4380 2328 0C208DE0 		add	r2, sp, ip
2011:../uvc.c      **** 
 4381              		.loc 1 2011 0
 4382 232c 0260A0E3 		mov	r6, #2
2021:../uvc.c      ****     dmaCfg.consHeader           = 0;
 4383              		.loc 1 2021 0
 4384 2330 0440A0E3 		mov	r4, #4
2025:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4385              		.loc 1 2025 0
 4386 2334 C8019FE5 		ldr	r0, .L396+128
 4387 2338 0710A0E3 		mov	r1, #7
2017:../uvc.c      ****     dmaCfg.notification         = CY_U3P_DMA_CB_PROD_EVENT | CY_U3P_DMA_CB_CONS_EVENT;
 4388              		.loc 1 2017 0
 4389 233c 3650CDE5 		strb	r5, [sp, #54]
2022:../uvc.c      ****     dmaCfg.prodAvailCount       = 0;
 4390              		.loc 1 2022 0
 4391 2340 B453CDE1 		strh	r5, [sp, #52]	@ movhi
2023:../uvc.c      **** 
 4392              		.loc 1 2023 0
 4393 2344 BE52CDE1 		strh	r5, [sp, #46]	@ movhi
2009:../uvc.c      ****     dmaCfg.count                = ES_UVC_STREAM_BUF_COUNT;
 4394              		.loc 1 2009 0
 4395 2348 B8A1CDE1 		strh	r10, [sp, #24]	@ movhi
2010:../uvc.c      ****     dmaCfg.validSckCount        = 2;
 4396              		.loc 1 2010 0
 4397 234c BAB1CDE1 		strh	fp, [sp, #26]	@ movhi
2014:../uvc.c      **** 
 4398              		.loc 1 2014 0
 4399 2350 B092CDE1 		strh	r9, [sp, #32]	@ movhi
2016:../uvc.c      ****     dmaCfg.dmaMode              = CY_U3P_DMA_MODE_BYTE;
 4400              		.loc 1 2016 0
 4401 2354 B682CDE1 		strh	r8, [sp, #38]	@ movhi
2019:../uvc.c      ****     dmaCfg.prodHeader           = CY_FX_UVC_PROD_HEADER;
 4402              		.loc 1 2019 0
 4403 2358 3C708DE5 		str	r7, [sp, #60]
2011:../uvc.c      **** 
 4404              		.loc 1 2011 0
 4405 235c BC61CDE1 		strh	r6, [sp, #28]	@ movhi
2013:../uvc.c      ****     dmaCfg.prodSckId[1]         = (CyU3PDmaSocketId_t)CY_U3P_PIB_SOCKET_1;//ES_UVC_PRODUCER_PPORT_S
 4406              		.loc 1 2013 0
 4407 2360 BEE1CDE1 		strh	lr, [sp, #30]	@ movhi
2018:../uvc.c      ****     dmaCfg.cb                   = esUVCUvcAppDmaCallback;
 4408              		.loc 1 2018 0
 4409 2364 38C08DE5 		str	ip, [sp, #56]
2020:../uvc.c      ****     dmaCfg.prodFooter           = CY_FX_UVC_PROD_FOOTER;
 4410              		.loc 1 2020 0
 4411 2368 B033CDE1 		strh	r3, [sp, #48]	@ movhi
2021:../uvc.c      ****     dmaCfg.consHeader           = 0;
 4412              		.loc 1 2021 0
 4413 236c B243CDE1 		strh	r4, [sp, #50]	@ movhi
2025:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4414              		.loc 1 2025 0
 4415 2370 FEFFFFEB 		bl	CyU3PDmaMultiChannelCreate
 4416              	.LVL498:
2026:../uvc.c      ****     {
 4417              		.loc 1 2026 0
 4418 2374 002050E2 		subs	r2, r0, #0
 4419 2378 0200000A 		beq	.L382
2028:../uvc.c      ****     }
 4420              		.loc 1 2028 0
 4421 237c 0400A0E1 		mov	r0, r4
 4422              	.LVL499:
 4423 2380 80119FE5 		ldr	r1, .L396+132
 4424 2384 FEFFFFEB 		bl	CyU3PDebugPrint
 4425              	.LVL500:
 4426              	.L382:
2030:../uvc.c      **** 
 4427              		.loc 1 2030 0
 4428 2388 6400A0E3 		mov	r0, #100
 4429 238c FEFFFFEB 		bl	_tx_thread_sleep
 4430              	.LVL501:
2034:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4431              		.loc 1 2034 0
 4432 2390 6C019FE5 		ldr	r0, .L396+128
 4433 2394 FEFFFFEB 		bl	CyU3PDmaMultiChannelReset
 4434              	.LVL502:
2035:../uvc.c      ****     {
 4435              		.loc 1 2035 0
 4436 2398 004050E2 		subs	r4, r0, #0
 4437 239c 2B00001A 		bne	.L394
2045:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4438              		.loc 1 2045 0
 4439 23a0 64019FE5 		ldr	r0, .L396+136
 4440              	.LVL503:
 4441 23a4 FEFFFFEB 		bl	CyU3PGpifLoad
 4442              	.LVL504:
2051:../uvc.c      **** 
 4443              		.loc 1 2051 0
 4444 23a8 3200A0E3 		mov	r0, #50
 4445 23ac FEFFFFEB 		bl	_tx_thread_sleep
 4446              	.LVL505:
2053:../uvc.c      ****     CyU3PThreadSleep(50);
 4447              		.loc 1 2053 0
 4448 23b0 58019FE5 		ldr	r0, .L396+140
 4449 23b4 FEFFFFEB 		bl	CyU3PGpifRegisterCallback
 4450              	.LVL506:
2054:../uvc.c      **** 
 4451              		.loc 1 2054 0
 4452 23b8 3200A0E3 		mov	r0, #50
 4453 23bc FEFFFFEB 		bl	_tx_thread_sleep
 4454              	.LVL507:
2057:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4455              		.loc 1 2057 0
 4456 23c0 0400A0E1 		mov	r0, r4
 4457 23c4 0410A0E1 		mov	r1, r4
 4458 23c8 FEFFFFEB 		bl	CyU3PGpifSMStart
 4459              	.LVL508:
2058:../uvc.c      ****     {
 4460              		.loc 1 2058 0
 4461 23cc 002050E2 		subs	r2, r0, #0
 4462 23d0 1000000A 		beq	.L395
2060:../uvc.c      ****         CyFxAppErrorHandler(status);
 4463              		.loc 1 2060 0
 4464 23d4 0400A0E3 		mov	r0, #4
 4465              	.LVL509:
 4466 23d8 34119FE5 		ldr	r1, .L396+144
 4467 23dc FEFFFFEB 		bl	CyU3PDebugPrint
 4468              	.LVL510:
 4469              	.L385:
 4470              	.LBB152:
 4471              	.LBB153:
 974:../uvc.c      ****     }
 4472              		.loc 1 974 0
 4473 23e0 6400A0E3 		mov	r0, #100
 4474 23e4 FEFFFFEB 		bl	_tx_thread_sleep
 4475              	.LVL511:
 4476 23e8 FCFFFFEA 		b	.L385
 4477              	.L391:
 4478              	.LBE153:
 4479              	.LBE152:
1990:../uvc.c      ****             ES_UVC_STREAM_BUF_COUNT	= CY_FX_UVC_STREAM_BUF_COUNT;
 4480              		.loc 1 1990 0
 4481 23ec FC009FE5 		ldr	r0, .L396+108
1989:../uvc.c      ****             ES_UVC_DATA_BUF_SIZE 	= CY_FX_UVC_BUF_FULL_SIZE;
 4482              		.loc 1 1989 0
 4483 23f0 01C9A0E3 		mov	ip, #16384
1991:../uvc.c      ****             break;
 4484              		.loc 1 1991 0
 4485 23f4 0410A0E3 		mov	r1, #4
1987:../uvc.c      ****             endPointConfig.burstLen = 16;
 4486              		.loc 1 1987 0
 4487 23f8 012BA0E3 		mov	r2, #1024
1988:../uvc.c      ****             ES_UVC_STREAM_BUF_SIZE 	= CY_FX_UVC_STREAM_BUF_SIZE;
 4488              		.loc 1 1988 0
 4489 23fc 1030A0E3 		mov	r3, #16
1989:../uvc.c      ****             ES_UVC_DATA_BUF_SIZE 	= CY_FX_UVC_BUF_FULL_SIZE;
 4490              		.loc 1 1989 0
 4491 2400 BECDC4E1 		strh	ip, [r4, #222]	@ movhi
1990:../uvc.c      ****             ES_UVC_STREAM_BUF_COUNT	= CY_FX_UVC_STREAM_BUF_COUNT;
 4492              		.loc 1 1990 0
 4493 2404 BC06C4E1 		strh	r0, [r4, #108]	@ movhi
1991:../uvc.c      ****             break;
 4494              		.loc 1 1991 0
 4495 2408 E010C4E5 		strb	r1, [r4, #224]
1987:../uvc.c      ****             endPointConfig.burstLen = 16;
 4496              		.loc 1 1987 0
 4497 240c B021CDE1 		strh	r2, [sp, #16]	@ movhi
1988:../uvc.c      ****             ES_UVC_STREAM_BUF_SIZE 	= CY_FX_UVC_STREAM_BUF_SIZE;
 4498              		.loc 1 1988 0
 4499 2410 1230CDE5 		strb	r3, [sp, #18]
1992:../uvc.c      ****     }
 4500              		.loc 1 1992 0
 4501 2414 A6FFFFEA 		b	.L379
 4502              	.LVL512:
 4503              	.L395:
2063:../uvc.c      **** 
 4504              		.loc 1 2063 0
 4505 2418 3200A0E3 		mov	r0, #50
 4506              	.LVL513:
 4507 241c FEFFFFEB 		bl	_tx_thread_sleep
 4508              	.LVL514:
2066:../uvc.c      **** #if 0
 4509              		.loc 1 2066 0
 4510 2420 0100A0E3 		mov	r0, #1
 4511 2424 FEFFFFEB 		bl	CyU3PGpifSMControl
 4512              	.LVL515:
2087:../uvc.c      **** }
 4513              		.loc 1 2087 0
 4514 2428 E8309FE5 		ldr	r3, .L396+148
 4515 242c 8520A0E3 		mov	r2, #133
 4516 2430 0C008DE8 		stmia	sp, {r2, r3}
 4517 2434 E0109FE5 		ldr	r1, .L396+152
 4518 2438 0120A0E3 		mov	r2, #1
 4519 243c 0330A0E3 		mov	r3, #3
 4520 2440 0400A0E3 		mov	r0, #4
 4521 2444 FEFFFFEB 		bl	CyU3PDebugPrint
 4522              	.LVL516:
2088:../uvc.c      **** 
 4523              		.loc 1 2088 0
 4524 2448 44D08DE2 		add	sp, sp, #68
 4525              		@ sp needed
 4526 244c F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4527              	.LVL517:
 4528              	.L394:
2037:../uvc.c      ****     }
 4529              		.loc 1 2037 0
 4530 2450 C8109FE5 		ldr	r1, .L396+156
 4531 2454 0420A0E1 		mov	r2, r4
 4532 2458 0400A0E3 		mov	r0, #4
 4533              	.LVL518:
 4534 245c FEFFFFEB 		bl	CyU3PDebugPrint
 4535              	.LVL519:
2045:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4536              		.loc 1 2045 0
 4537 2460 A4009FE5 		ldr	r0, .L396+136
 4538 2464 FEFFFFEB 		bl	CyU3PGpifLoad
 4539              	.LVL520:
2048:../uvc.c      ****         CyFxAppErrorHandler(status);
 4540              		.loc 1 2048 0
 4541 2468 0420A0E1 		mov	r2, r4
 4542 246c 0400A0E3 		mov	r0, #4
 4543 2470 AC109FE5 		ldr	r1, .L396+160
 4544 2474 FEFFFFEB 		bl	CyU3PDebugPrint
 4545              	.LVL521:
 4546              	.L384:
 4547              	.LBB154:
 4548              	.LBB155:
 974:../uvc.c      ****     }
 4549              		.loc 1 974 0
 4550 2478 6400A0E3 		mov	r0, #100
 4551 247c FEFFFFEB 		bl	_tx_thread_sleep
 4552              	.LVL522:
 4553 2480 FCFFFFEA 		b	.L384
 4554              	.L397:
 4555              		.align	2
 4556              	.L396:
 4557 2484 C0030000 		.word	.LC23
 4558 2488 00000000 		.word	esUVCUvcApplnUSBSetupCB
 4559 248c 00000000 		.word	esUVCUvcApplnUSBEventCB
 4560 2490 00000000 		.word	esUVCApplnLPMRqtCB
 4561 2494 00000000 		.word	CyFxUSBDeviceDscrSS
 4562 2498 E0030000 		.word	.LC24
 4563 249c 00000000 		.word	CyFxUSBDeviceDscr
 4564 24a0 08040000 		.word	.LC25
 4565 24a4 00000000 		.word	CyFxUSBBOSDscr
 4566 24a8 30040000 		.word	.LC26
 4567 24ac 00000000 		.word	CyFxUSBDeviceQualDscr
 4568 24b0 54040000 		.word	.LC27
 4569 24b4 00000000 		.word	CyFxUSBSSConfigDscr
 4570 24b8 7C040000 		.word	.LC28
 4571 24bc 00000000 		.word	CyFxUSBHSConfigDscr
 4572 24c0 A4040000 		.word	.LC29
 4573 24c4 00000000 		.word	CyFxUSBFSConfigDscr
 4574 24c8 CC040000 		.word	.LC30
 4575 24cc 00000000 		.word	CyFxUSBStringLangIDDscr
 4576 24d0 F4040000 		.word	.LC31
 4577 24d4 00000000 		.word	CyFxUSBManufactureDscr
 4578 24d8 1C050000 		.word	.LC32
 4579 24dc 00000000 		.word	CyFxUSBProductDscr
 4580 24e0 44050000 		.word	.LC33
 4581 24e4 6C050000 		.word	.LC34
 4582 24e8 90050000 		.word	.LC35
 4583 24ec 00000000 		.word	.LANCHOR0
 4584 24f0 F03F0000 		.word	16368
 4585 24f4 C0050000 		.word	.LC36
 4586 24f8 01010000 		.word	257
 4587 24fc 03030000 		.word	771
 4588 2500 00000000 		.word	esUVCUvcAppDmaCallback
 4589 2504 00000000 		.word	glChHandleUVCStream
 4590 2508 F0050000 		.word	.LC37
 4591 250c 10000000 		.word	.LANCHOR2+16
 4592 2510 00000000 		.word	esUVCGpifCB
 4593 2514 6C060000 		.word	.LC40
 4594 2518 35010000 		.word	309
 4595 251c 90060000 		.word	.LC41
 4596 2520 1C060000 		.word	.LC38
 4597 2524 44060000 		.word	.LC39
 4598              	.LBE155:
 4599              	.LBE154:
 4600              		.cfi_endproc
 4601              	.LFE12:
 4603              		.align	2
 4604              		.global	esUVCUvcApplnDebugInit
 4606              	esUVCUvcApplnDebugInit:
 4607              	.LFB13:
2093:../uvc.c      ****     CyU3PUartConfig_t uartConfig;
 4608              		.loc 1 2093 0
 4609              		.cfi_startproc
 4610              		@ args = 0, pretend = 0, frame = 24
 4611              		@ frame_needed = 0, uses_anonymous_args = 0
 4612              	.LVL523:
 4613 2528 04E02DE5 		str	lr, [sp, #-4]!
 4614              	.LCFI20:
 4615              		.cfi_def_cfa_offset 4
 4616              		.cfi_offset 14, -4
 4617 252c 1CD04DE2 		sub	sp, sp, #28
 4618              	.LCFI21:
 4619              		.cfi_def_cfa_offset 32
2098:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4620              		.loc 1 2098 0
 4621 2530 FEFFFFEB 		bl	CyU3PUartInit
 4622              	.LVL524:
2099:../uvc.c      ****     {
 4623              		.loc 1 2099 0
 4624 2534 002050E2 		subs	r2, r0, #0
 4625 2538 2600001A 		bne	.L415
 4626              	.LVL525:
 4627              	.L399:
2105:../uvc.c      ****     uartConfig.stopBit = CY_U3P_UART_ONE_STOP_BIT;
 4628              		.loc 1 2105 0
 4629 253c A4C09FE5 		ldr	ip, .L418
2107:../uvc.c      ****     uartConfig.txEnable = CyTrue;
 4630              		.loc 1 2107 0
 4631 2540 0030A0E3 		mov	r3, #0
2106:../uvc.c      ****     uartConfig.parity = CY_U3P_UART_NO_PARITY;
 4632              		.loc 1 2106 0
 4633 2544 0120A0E3 		mov	r2, #1
2114:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4634              		.loc 1 2114 0
 4635 2548 0310A0E1 		mov	r1, r3
 4636 254c 0D00A0E1 		mov	r0, sp
2106:../uvc.c      ****     uartConfig.parity = CY_U3P_UART_NO_PARITY;
 4637              		.loc 1 2106 0
 4638 2550 1420CDE5 		strb	r2, [sp, #20]
2108:../uvc.c      ****     uartConfig.rxEnable = CyFalse;
 4639              		.loc 1 2108 0
 4640 2554 00208DE5 		str	r2, [sp]
2111:../uvc.c      **** 
 4641              		.loc 1 2111 0
 4642 2558 0C208DE5 		str	r2, [sp, #12]
2105:../uvc.c      ****     uartConfig.stopBit = CY_U3P_UART_ONE_STOP_BIT;
 4643              		.loc 1 2105 0
 4644 255c 10C08DE5 		str	ip, [sp, #16]
2107:../uvc.c      ****     uartConfig.txEnable = CyTrue;
 4645              		.loc 1 2107 0
 4646 2560 1530CDE5 		strb	r3, [sp, #21]
2109:../uvc.c      ****     uartConfig.flowCtrl = CyFalse;
 4647              		.loc 1 2109 0
 4648 2564 04308DE5 		str	r3, [sp, #4]
2110:../uvc.c      ****     uartConfig.isDma = CyTrue;
 4649              		.loc 1 2110 0
 4650 2568 08308DE5 		str	r3, [sp, #8]
2114:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4651              		.loc 1 2114 0
 4652 256c FEFFFFEB 		bl	CyU3PUartSetConfig
 4653              	.LVL526:
2115:../uvc.c      ****     {
 4654              		.loc 1 2115 0
 4655 2570 002050E2 		subs	r2, r0, #0
 4656 2574 1300001A 		bne	.L416
 4657              	.LVL527:
 4658              	.L400:
2121:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4659              		.loc 1 2121 0
 4660 2578 0000E0E3 		mvn	r0, #0
 4661 257c FEFFFFEB 		bl	CyU3PUartTxSetBlockXfer
 4662              	.LVL528:
2122:../uvc.c      ****     {
 4663              		.loc 1 2122 0
 4664 2580 002050E2 		subs	r2, r0, #0
 4665 2584 0B00001A 		bne	.L417
 4666              	.LVL529:
 4667              	.L401:
2128:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4668              		.loc 1 2128 0
 4669 2588 0300A0E3 		mov	r0, #3
 4670 258c 0410A0E3 		mov	r1, #4
 4671 2590 FEFFFFEB 		bl	CyU3PDebugInit
 4672              	.LVL530:
2129:../uvc.c      ****     {
 4673              		.loc 1 2129 0
 4674 2594 002050E2 		subs	r2, r0, #0
 4675 2598 0200000A 		beq	.L402
2131:../uvc.c      ****     }
 4676              		.loc 1 2131 0
 4677 259c 0400A0E3 		mov	r0, #4
 4678              	.LVL531:
 4679 25a0 44109FE5 		ldr	r1, .L418+4
 4680 25a4 FEFFFFEB 		bl	CyU3PDebugPrint
 4681              	.LVL532:
 4682              	.L402:
2133:../uvc.c      **** 
 4683              		.loc 1 2133 0
 4684 25a8 0000A0E3 		mov	r0, #0
 4685 25ac FEFFFFEB 		bl	CyU3PDebugPreamble
 4686              	.LVL533:
2135:../uvc.c      **** 
 4687              		.loc 1 2135 0
 4688 25b0 1CD08DE2 		add	sp, sp, #28
 4689              		@ sp needed
 4690 25b4 04F09DE4 		ldr	pc, [sp], #4
 4691              	.LVL534:
 4692              	.L417:
2124:../uvc.c      ****     }
 4693              		.loc 1 2124 0
 4694 25b8 30109FE5 		ldr	r1, .L418+8
 4695 25bc 0400A0E3 		mov	r0, #4
 4696              	.LVL535:
 4697 25c0 FEFFFFEB 		bl	CyU3PDebugPrint
 4698              	.LVL536:
 4699 25c4 EFFFFFEA 		b	.L401
 4700              	.LVL537:
 4701              	.L416:
2117:../uvc.c      ****     }
 4702              		.loc 1 2117 0
 4703 25c8 24109FE5 		ldr	r1, .L418+12
 4704 25cc 0400A0E3 		mov	r0, #4
 4705              	.LVL538:
 4706 25d0 FEFFFFEB 		bl	CyU3PDebugPrint
 4707              	.LVL539:
 4708 25d4 E7FFFFEA 		b	.L400
 4709              	.LVL540:
 4710              	.L415:
2101:../uvc.c      ****     }
 4711              		.loc 1 2101 0
 4712 25d8 18109FE5 		ldr	r1, .L418+16
 4713 25dc 0400A0E3 		mov	r0, #4
 4714              	.LVL541:
 4715 25e0 FEFFFFEB 		bl	CyU3PDebugPrint
 4716              	.LVL542:
 4717 25e4 D4FFFFEA 		b	.L399
 4718              	.L419:
 4719              		.align	2
 4720              	.L418:
 4721 25e8 00C20100 		.word	115200
 4722 25ec 74070000 		.word	.LC45
 4723 25f0 2C070000 		.word	.LC44
 4724 25f4 EC060000 		.word	.LC43
 4725 25f8 B0060000 		.word	.LC42
 4726              		.cfi_endproc
 4727              	.LFE13:
 4729              		.align	2
 4730              		.global	CyFxUVCApplnI2CInit
 4732              	CyFxUVCApplnI2CInit:
 4733              	.LFB14:
2141:../uvc.c      **** 			CyU3PI2cConfig_t i2cConfig;;
 4734              		.loc 1 2141 0
 4735              		.cfi_startproc
 4736              		@ args = 0, pretend = 0, frame = 16
 4737              		@ frame_needed = 0, uses_anonymous_args = 0
 4738 25fc 04E02DE5 		str	lr, [sp, #-4]!
 4739              	.LCFI22:
 4740              		.cfi_def_cfa_offset 4
 4741              		.cfi_offset 14, -4
 4742 2600 14D04DE2 		sub	sp, sp, #20
 4743              	.LCFI23:
 4744              		.cfi_def_cfa_offset 24
2145:../uvc.c      **** 			if (status != CY_U3P_SUCCESS)
 4745              		.loc 1 2145 0
 4746 2604 FEFFFFEB 		bl	CyU3PI2cInit
 4747              	.LVL543:
2146:../uvc.c      **** 			{
 4748              		.loc 1 2146 0
 4749 2608 002050E2 		subs	r2, r0, #0
 4750 260c 0500000A 		beq	.L421
2148:../uvc.c      **** 				CyFxAppErrorHandler(status);
 4751              		.loc 1 2148 0
 4752 2610 0400A0E3 		mov	r0, #4
 4753              	.LVL544:
 4754 2614 58109FE5 		ldr	r1, .L426
 4755 2618 FEFFFFEB 		bl	CyU3PDebugPrint
 4756              	.LVL545:
 4757              	.L422:
 4758              	.LBB156:
 4759              	.LBB157:
 974:../uvc.c      ****     }
 4760              		.loc 1 974 0
 4761 261c 6400A0E3 		mov	r0, #100
 4762 2620 FEFFFFEB 		bl	_tx_thread_sleep
 4763              	.LVL546:
 4764 2624 FCFFFFEA 		b	.L422
 4765              	.LVL547:
 4766              	.L421:
 4767              	.LBE157:
 4768              	.LBE156:
2153:../uvc.c      **** 			i2cConfig.isDma = CyFalse;
 4769              		.loc 1 2153 0
 4770 2628 48C09FE5 		ldr	ip, .L426+4
2155:../uvc.c      **** 			i2cConfig.dmaTimeout = 0xffff;
 4771              		.loc 1 2155 0
 4772 262c 0030E0E3 		mvn	r3, #0
2158:../uvc.c      **** 			if (CY_U3P_SUCCESS != status)
 4773              		.loc 1 2158 0
 4774 2630 0210A0E1 		mov	r1, r2
 4775 2634 0D00A0E1 		mov	r0, sp
 4776              	.LVL548:
2154:../uvc.c      **** 			i2cConfig.busTimeout = 0xffffffffU;
 4777              		.loc 1 2154 0
 4778 2638 04208DE5 		str	r2, [sp, #4]
2153:../uvc.c      **** 			i2cConfig.isDma = CyFalse;
 4779              		.loc 1 2153 0
 4780 263c 00C08DE5 		str	ip, [sp]
2155:../uvc.c      **** 			i2cConfig.dmaTimeout = 0xffff;
 4781              		.loc 1 2155 0
 4782 2640 08308DE5 		str	r3, [sp, #8]
2156:../uvc.c      **** 
 4783              		.loc 1 2156 0
 4784 2644 BC30CDE1 		strh	r3, [sp, #12]	@ movhi
2158:../uvc.c      **** 			if (CY_U3P_SUCCESS != status)
 4785              		.loc 1 2158 0
 4786 2648 FEFFFFEB 		bl	CyU3PI2cSetConfig
 4787              	.LVL549:
2159:../uvc.c      **** 			{
 4788              		.loc 1 2159 0
 4789 264c 000050E3 		cmp	r0, #0
 4790 2650 0100001A 		bne	.L425
2164:../uvc.c      **** 
 4791              		.loc 1 2164 0
 4792 2654 14D08DE2 		add	sp, sp, #20
 4793              		@ sp needed
 4794 2658 04F09DE4 		ldr	pc, [sp], #4
 4795              	.L425:
2161:../uvc.c      **** 				CyFxAppErrorHandler(status);
 4796              		.loc 1 2161 0
 4797 265c 0400A0E3 		mov	r0, #4
 4798              	.LVL550:
 4799 2660 14109FE5 		ldr	r1, .L426+8
 4800 2664 FEFFFFEB 		bl	CyU3PDebugPrint
 4801              	.LVL551:
 4802              	.L424:
 4803              	.LBB158:
 4804              	.LBB159:
 974:../uvc.c      ****     }
 4805              		.loc 1 974 0
 4806 2668 6400A0E3 		mov	r0, #100
 4807 266c FEFFFFEB 		bl	_tx_thread_sleep
 4808              	.LVL552:
 4809 2670 FCFFFFEA 		b	.L424
 4810              	.L427:
 4811              		.align	2
 4812              	.L426:
 4813 2674 B0070000 		.word	.LC46
 4814 2678 A0860100 		.word	100000
 4815 267c CC070000 		.word	.LC47
 4816              	.LBE159:
 4817              	.LBE158:
 4818              		.cfi_endproc
 4819              	.LFE14:
 4821              		.align	2
 4822              		.global	UVCAppThread_Entry
 4824              	UVCAppThread_Entry:
 4825              	.LFB15:
2171:../uvc.c      ****     uint16_t wakeReason;
 4826              		.loc 1 2171 0
 4827              		.cfi_startproc
 4828              		@ args = 0, pretend = 0, frame = 8
 4829              		@ frame_needed = 0, uses_anonymous_args = 0
 4830              	.LVL553:
 4831 2680 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 4832              	.LCFI24:
 4833              		.cfi_def_cfa_offset 16
 4834              		.cfi_offset 4, -16
 4835              		.cfi_offset 5, -12
 4836              		.cfi_offset 6, -8
 4837              		.cfi_offset 14, -4
 4838 2684 2C519FE5 		ldr	r5, .L450
 4839 2688 10D04DE2 		sub	sp, sp, #16
 4840              	.LCFI25:
 4841              		.cfi_def_cfa_offset 32
2177:../uvc.c      ****     //CyU3PDebugPrint(4," the UART init \r\n");
 4842              		.loc 1 2177 0
 4843 268c FEFFFFEB 		bl	esUVCUvcApplnDebugInit
 4844              	.LVL554:
2185:../uvc.c      **** 
 4845              		.loc 1 2185 0
 4846 2690 FEFFFFEB 		bl	CyFxUVCApplnI2CInit
 4847              	.LVL555:
2188:../uvc.c      **** 
 4848              		.loc 1 2188 0
 4849 2694 FEFFFFEB 		bl	esUVCUvcApplnInit
 4850              	.LVL556:
2192:../uvc.c      **** 	}
 4851              		.loc 1 2192 0
 4852 2698 0400A0E3 		mov	r0, #4
 4853 269c 18119FE5 		ldr	r1, .L450+4
 4854 26a0 FEFFFFEB 		bl	CyU3PDebugPrint
 4855              	.LVL557:
2196:../uvc.c      **** 
 4856              		.loc 1 2196 0
 4857 26a4 0560A0E1 		mov	r6, r5
 4858 26a8 0040E0E3 		mvn	r4, #0
 4859 26ac 050000EA 		b	.L435
 4860              	.L430:
2206:../uvc.c      ****             {
 4861              		.loc 1 2206 0
 4862 26b0 D03095E5 		ldr	r3, [r5, #208]
 4863 26b4 010053E3 		cmp	r3, #1
 4864 26b8 3300000A 		beq	.L433
 4865              	.L447:
 4866 26bc 0C309DE5 		ldr	r3, [sp, #12]
 4867              	.L429:
2217:../uvc.c      ****         {
 4868              		.loc 1 2217 0
 4869 26c0 200013E3 		tst	r3, #32
 4870 26c4 3200001A 		bne	.L448
 4871              	.L435:
2196:../uvc.c      **** 
 4872              		.loc 1 2196 0
 4873 26c8 0C308DE2 		add	r3, sp, #12
 4874 26cc 00408DE5 		str	r4, [sp]
 4875 26d0 E0009FE5 		ldr	r0, .L450
 4876 26d4 3010A0E3 		mov	r1, #48
 4877 26d8 0120A0E3 		mov	r2, #1
 4878 26dc FEFFFFEB 		bl	_txe_event_flags_get
 4879              	.LVL558:
2199:../uvc.c      ****         {
 4880              		.loc 1 2199 0
 4881 26e0 0C309DE5 		ldr	r3, [sp, #12]
 4882 26e4 100013E3 		tst	r3, #16
 4883 26e8 F4FFFF0A 		beq	.L429
2201:../uvc.c      ****             {
 4884              		.loc 1 2201 0
 4885 26ec C43096E5 		ldr	r3, [r6, #196]
 4886 26f0 000053E3 		cmp	r3, #0
 4887 26f4 EDFFFF0A 		beq	.L430
2203:../uvc.c      ****                 esUVCUvcApplnStop();
 4888              		.loc 1 2203 0
 4889 26f8 0030A0E3 		mov	r3, #0
 4890              	.LBB162:
 4891              	.LBB163:
1135:../uvc.c      ****     CyU3PBusyWait (100);
 4892              		.loc 1 1135 0
 4893 26fc 0110A0E3 		mov	r1, #1
 4894 2700 8300A0E3 		mov	r0, #131
 4895              	.LBE163:
 4896              	.LBE162:
2203:../uvc.c      ****                 esUVCUvcApplnStop();
 4897              		.loc 1 2203 0
 4898 2704 CC3086E5 		str	r3, [r6, #204]
 4899              	.LVL559:
 4900              	.LBB166:
 4901              	.LBB164:
1118:../uvc.c      **** 
 4902              		.loc 1 1118 0
 4903 2708 C43086E5 		str	r3, [r6, #196]
1135:../uvc.c      ****     CyU3PBusyWait (100);
 4904              		.loc 1 1135 0
 4905 270c FEFFFFEB 		bl	CyU3PUsbSetEpNak
 4906              	.LVL560:
1136:../uvc.c      **** 
 4907              		.loc 1 1136 0
 4908 2710 6400A0E3 		mov	r0, #100
 4909 2714 FEFFFFEB 		bl	CyFx3BusyWait
 4910              	.LVL561:
1140:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 4911              		.loc 1 1140 0
 4912 2718 A0009FE5 		ldr	r0, .L450+8
 4913 271c FEFFFFEB 		bl	CyU3PDmaMultiChannelReset
 4914              	.LVL562:
1141:../uvc.c      ****     {
 4915              		.loc 1 1141 0
 4916 2720 002050E2 		subs	r2, r0, #0
 4917 2724 1F00001A 		bne	.L449
 4918              	.LVL563:
 4919              	.L431:
1145:../uvc.c      **** 
 4920              		.loc 1 1145 0
 4921 2728 1900A0E3 		mov	r0, #25
 4922 272c FEFFFFEB 		bl	_tx_thread_sleep
 4923              	.LVL564:
1148:../uvc.c      ****     /* Clear the stall condition and sequence numbers if ClearFeature. */
 4924              		.loc 1 1148 0
 4925 2730 8300A0E3 		mov	r0, #131
 4926 2734 FEFFFFEB 		bl	CyU3PUsbFlushEp
 4927              	.LVL565:
1150:../uvc.c      ****     {
 4928              		.loc 1 1150 0
 4929 2738 CC3095E5 		ldr	r3, [r5, #204]
 4930 273c 000053E3 		cmp	r3, #0
 4931 2740 0500000A 		beq	.L432
1152:../uvc.c      ****         glIsClearFeature = CyFalse;
 4932              		.loc 1 1152 0
 4933 2744 8300A0E3 		mov	r0, #131
 4934 2748 0010A0E3 		mov	r1, #0
 4935 274c 0120A0E3 		mov	r2, #1
 4936 2750 FEFFFFEB 		bl	CyU3PUsbStall
 4937              	.LVL566:
1153:../uvc.c      ****     }
 4938              		.loc 1 1153 0
 4939 2754 0030A0E3 		mov	r3, #0
 4940 2758 CC3086E5 		str	r3, [r6, #204]
 4941              	.L432:
1155:../uvc.c      **** 	CyU3PBusyWait (200);
 4942              		.loc 1 1155 0
 4943 275c 0010A0E3 		mov	r1, #0
 4944 2760 8300A0E3 		mov	r0, #131
 4945 2764 FEFFFFEB 		bl	CyU3PUsbSetEpNak
 4946              	.LVL567:
1156:../uvc.c      **** 
 4947              		.loc 1 1156 0
 4948 2768 C800A0E3 		mov	r0, #200
 4949 276c FEFFFFEB 		bl	CyFx3BusyWait
 4950              	.LVL568:
1158:../uvc.c      ****     glDmaDone = 0;
 4951              		.loc 1 1158 0
 4952 2770 0030A0E3 		mov	r3, #0
 4953 2774 743085E5 		str	r3, [r5, #116]
1159:../uvc.c      **** 
 4954              		.loc 1 1159 0
 4955 2778 783085E5 		str	r3, [r5, #120]
1162:../uvc.c      **** }
 4956              		.loc 1 1162 0
 4957 277c FEFFFFEB 		bl	CyU3PUsbLPMEnable
 4958              	.LVL569:
 4959              	.LBE164:
 4960              	.LBE166:
2206:../uvc.c      ****             {
 4961              		.loc 1 2206 0
 4962 2780 D03095E5 		ldr	r3, [r5, #208]
 4963 2784 010053E3 		cmp	r3, #1
 4964 2788 CBFFFF1A 		bne	.L447
 4965              	.L433:
2210:../uvc.c      ****             }
 4966              		.loc 1 2210 0
 4967 278c FEFFFFEB 		bl	esUVCUvcApplnStart
 4968              	.LVL570:
 4969 2790 C9FFFFEA 		b	.L447
 4970              	.L448:
2224:../uvc.c      **** #if 0
 4971              		.loc 1 2224 0
 4972 2794 0010A0E3 		mov	r1, #0
 4973 2798 0A208DE2 		add	r2, sp, #10
 4974 279c 0800A0E3 		mov	r0, #8
 4975 27a0 FEFFFFEB 		bl	CyU3PSysEnterSuspendMode
 4976              	.LVL571:
2233:../uvc.c      ****         }
 4977              		.loc 1 2233 0
 4978 27a4 C7FFFFEA 		b	.L435
 4979              	.LVL572:
 4980              	.L449:
 4981              	.LBB167:
 4982              	.LBB165:
1143:../uvc.c      ****     }
 4983              		.loc 1 1143 0
 4984 27a8 14109FE5 		ldr	r1, .L450+12
 4985 27ac 0400A0E3 		mov	r0, #4
 4986              	.LVL573:
 4987 27b0 FEFFFFEB 		bl	CyU3PDebugPrint
 4988              	.LVL574:
 4989 27b4 DBFFFFEA 		b	.L431
 4990              	.L451:
 4991              		.align	2
 4992              	.L450:
 4993 27b8 00000000 		.word	.LANCHOR0
 4994 27bc E8070000 		.word	.LC48
 4995 27c0 00000000 		.word	glChHandleUVCStream
 4996 27c4 9C020000 		.word	.LC16
 4997              	.LBE165:
 4998              	.LBE167:
 4999              		.cfi_endproc
 5000              	.LFE15:
 5002              		.align	2
 5003              		.global	UVCAppEP0Thread_Entry
 5005              	UVCAppEP0Thread_Entry:
 5006              	.LFB20:
3017:../uvc.c      ****     uint32_t eventMask = (CY_FX_UVC_VIDEO_CONTROL_REQUEST_EVENT | CY_FX_UVC_VIDEO_STREAM_REQUEST_EV
 5007              		.loc 1 3017 0
 5008              		.cfi_startproc
 5009              		@ args = 0, pretend = 0, frame = 48
 5010              		@ frame_needed = 0, uses_anonymous_args = 0
 5011              	.LVL575:
 5012 27c8 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 5013              	.LCFI26:
 5014              		.cfi_def_cfa_offset 36
 5015              		.cfi_offset 4, -36
 5016              		.cfi_offset 5, -32
 5017              		.cfi_offset 6, -28
 5018              		.cfi_offset 7, -24
 5019              		.cfi_offset 8, -20
 5020              		.cfi_offset 9, -16
 5021              		.cfi_offset 10, -12
 5022              		.cfi_offset 11, -8
 5023              		.cfi_offset 14, -4
 5024 27cc 184F9FE5 		ldr	r4, .L927
 5025 27d0 18BF9FE5 		ldr	fp, .L927+4
 5026 27d4 44D04DE2 		sub	sp, sp, #68
 5027              	.LCFI27:
 5028              		.cfi_def_cfa_offset 104
 5029              	.LVL576:
3039:../uvc.c      ****                     CYU3P_WAIT_FOREVER) == CY_U3P_SUCCESS)
 5030              		.loc 1 3039 0
 5031 27d8 0450A0E1 		mov	r5, r4
3138:../uvc.c      **** 					//CyU3PDebugPrint (4, "The interrupt event %d %d\r\n", testSnap, snapButFlag);
 5032              		.loc 1 3138 0
 5033 27dc 0B90A0E1 		mov	r9, fp
 5034              	.LVL577:
 5035              	.L736:
3039:../uvc.c      ****                     CYU3P_WAIT_FOREVER) == CY_U3P_SUCCESS)
 5036              		.loc 1 3039 0
 5037 27e0 0030E0E3 		mvn	r3, #0
 5038 27e4 00308DE5 		str	r3, [sp]
 5039 27e8 FC0E9FE5 		ldr	r0, .L927
 5040 27ec 4C10A0E3 		mov	r1, #76
 5041 27f0 0120A0E3 		mov	r2, #1
 5042 27f4 28308DE2 		add	r3, sp, #40
 5043 27f8 FEFFFFEB 		bl	_txe_event_flags_get
 5044              	.LVL578:
 5045 27fc 000050E3 		cmp	r0, #0
 5046 2800 5100001A 		bne	.L454
3043:../uvc.c      ****             {
 5047              		.loc 1 3043 0
 5048 2804 E43095E5 		ldr	r3, [r5, #228]
 5049 2808 000053E3 		cmp	r3, #0
 5050 280c 8E00000A 		beq	.L891
 5051              	.L456:
3061:../uvc.c      ****             {
 5052              		.loc 1 3061 0
 5053 2810 28309DE5 		ldr	r3, [sp, #40]
 5054 2814 040013E3 		tst	r3, #4
 5055 2818 1800000A 		beq	.L458
3063:../uvc.c      ****                 {
 5056              		.loc 1 3063 0
 5057 281c D00E9FE5 		ldr	r0, .L927+8
 5058 2820 B020D0E1 		ldrh	r2, [r0]
 5059 2824 2224A0E1 		mov	r2, r2, lsr #8
 5060 2828 030052E3 		cmp	r2, #3
 5061 282c 02F19F97 		ldrls	pc, [pc, r2, asl #2]
 5062 2830 550000EA 		b	.L459
 5063              	.L461:
 5064 2834 8C290000 		.word	.L459
 5065 2838 80280000 		.word	.L458
 5066 283c 44280000 		.word	.L462
 5067 2840 A4290000 		.word	.L463
 5068              	.L462:
 5069              	.LBB210:
 5070              	.LBB211:
2250:../uvc.c      **** 		{
 5071              		.loc 1 2250 0
 5072 2844 AC1E9FE5 		ldr	r1, .L927+12
 5073 2848 B020D1E1 		ldrh	r2, [r1]
 5074 284c 060C52E3 		cmp	r2, #1536
 5075 2850 6E01000A 		beq	.L465
 5076 2854 3E00008A 		bhi	.L466
 5077 2858 030C52E3 		cmp	r2, #768
 5078 285c 9301000A 		beq	.L467
 5079 2860 3201008A 		bhi	.L468
 5080 2864 010C52E3 		cmp	r2, #256
 5081 2868 6401000A 		beq	.L469
 5082 286c 020C52E3 		cmp	r2, #512
 5083 2870 4000001A 		bne	.L464
 5084              	.LVL579:
2258:../uvc.c      **** 			break;
 5085              		.loc 1 2258 0
 5086 2874 1A00A0E3 		mov	r0, #26
 5087 2878 FEFFFFEB 		bl	ControlHandle
 5088              	.LVL580:
 5089 287c 28309DE5 		ldr	r3, [sp, #40]
 5090              	.L458:
 5091              	.LBE211:
 5092              	.LBE210:
3089:../uvc.c      ****             {
 5093              		.loc 1 3089 0
 5094 2880 080013E3 		tst	r3, #8
 5095 2884 0800000A 		beq	.L698
3093:../uvc.c      ****                 {
 5096              		.loc 1 3093 0
 5097 2888 64CE9FE5 		ldr	ip, .L927+8
 5098 288c B020DCE1 		ldrh	r2, [ip]
 5099 2890 010052E3 		cmp	r2, #1
 5100 2894 9200000A 		beq	.L699
3095:../uvc.c      ****                 }
 5101              		.loc 1 3095 0
 5102 2898 0000A0E3 		mov	r0, #0
 5103 289c 0020A0E1 		mov	r2, r0
 5104 28a0 0110A0E3 		mov	r1, #1
 5105 28a4 FEFFFFEB 		bl	CyU3PUsbStall
 5106              	.LVL581:
 5107 28a8 28309DE5 		ldr	r3, [sp, #40]
 5108              	.L698:
3104:../uvc.c      ****             {
 5109              		.loc 1 3104 0
 5110 28ac 400013E3 		tst	r3, #64
 5111 28b0 2500000A 		beq	.L454
3109:../uvc.c      **** 
 5112              		.loc 1 3109 0
 5113 28b4 1800A0E3 		mov	r0, #24
 5114 28b8 30108DE2 		add	r1, sp, #48
 5115              	.LVL582:
 5116 28bc FEFFFFEB 		bl	CyU3PGpioSimpleGetValue
 5117              	.LVL583:
3114:../uvc.c      **** 					//CyU3PDebugPrint (4, "The interrupt event %d %d\r\n", testSnap, snapButFlag);
 5118              		.loc 1 3114 0
 5119 28c0 30309DE5 		ldr	r3, [sp, #48]
 5120 28c4 000053E3 		cmp	r3, #0
 5121 28c8 6500001A 		bne	.L892
3138:../uvc.c      **** 					//CyU3PDebugPrint (4, "The interrupt event %d %d\r\n", testSnap, snapButFlag);
 5122              		.loc 1 3138 0
 5123 28cc 1A26DBE5 		ldrb	r2, [fp, #1562]	@ zero_extendqisi2
 5124 28d0 000052E3 		cmp	r2, #0
 5125 28d4 1C00000A 		beq	.L454
3140:../uvc.c      **** 					glInterStaBuffer[1] = 0x01;  //number of VS interface
 5126              		.loc 1 3140 0
 5127 28d8 1C0E9FE5 		ldr	r0, .L927+16
 5128 28dc 0210A0E3 		mov	r1, #2
 5129 28e0 002090E5 		ldr	r2, [r0]
3146:../uvc.c      **** 					interStabuf.status = 0;
 5130              		.loc 1 3146 0
 5131 28e4 01CBA0E3 		mov	ip, #1024
3140:../uvc.c      **** 					glInterStaBuffer[1] = 0x01;  //number of VS interface
 5132              		.loc 1 3140 0
 5133 28e8 0010C2E5 		strb	r1, [r2]
3141:../uvc.c      **** 					glInterStaBuffer[2] = 0x00;
 5134              		.loc 1 3141 0
 5135 28ec 001090E5 		ldr	r1, [r0]
 5136 28f0 0120A0E3 		mov	r2, #1
 5137 28f4 0120C1E5 		strb	r2, [r1, #1]
3142:../uvc.c      **** 					glInterStaBuffer[3] = 0x01; //button release
 5138              		.loc 1 3142 0
 5139 28f8 001090E5 		ldr	r1, [r0]
3149:../uvc.c      **** 
 5140              		.loc 1 3149 0
 5141 28fc 0460A0E3 		mov	r6, #4
3142:../uvc.c      **** 					glInterStaBuffer[3] = 0x01; //button release
 5142              		.loc 1 3142 0
 5143 2900 0230C1E5 		strb	r3, [r1, #2]
3143:../uvc.c      **** 
 5144              		.loc 1 3143 0
 5145 2904 001090E5 		ldr	r1, [r0]
 5146 2908 0320C1E5 		strb	r2, [r1, #3]
3145:../uvc.c      **** 					interStabuf.size   = 1024;
 5147              		.loc 1 3145 0
 5148 290c 002090E5 		ldr	r2, [r0]
3152:../uvc.c      **** 
 5149              		.loc 1 3152 0
 5150 2910 0010E0E3 		mvn	r1, #0
 5151 2914 E40D9FE5 		ldr	r0, .L927+20
3147:../uvc.c      **** 
 5152              		.loc 1 3147 0
 5153 2918 BC33CDE1 		strh	r3, [sp, #60]	@ movhi
3145:../uvc.c      **** 					interStabuf.size   = 1024;
 5154              		.loc 1 3145 0
 5155 291c 34208DE5 		str	r2, [sp, #52]
3146:../uvc.c      **** 					interStabuf.status = 0;
 5156              		.loc 1 3146 0
 5157 2920 BAC3CDE1 		strh	ip, [sp, #58]	@ movhi
3149:../uvc.c      **** 
 5158              		.loc 1 3149 0
 5159 2924 B863CDE1 		strh	r6, [sp, #56]	@ movhi
3152:../uvc.c      **** 
 5160              		.loc 1 3152 0
 5161 2928 FEFFFFEB 		bl	CyU3PDmaChannelWaitForCompletion
 5162              	.LVL584:
3155:../uvc.c      **** 					if (apiRetStatus != CY_U3P_SUCCESS)
 5163              		.loc 1 3155 0
 5164 292c CC0D9FE5 		ldr	r0, .L927+20
 5165 2930 34108DE2 		add	r1, sp, #52
 5166 2934 FEFFFFEB 		bl	CyU3PDmaChannelSetupSendBuffer
 5167              	.LVL585:
3156:../uvc.c      **** 					{
 5168              		.loc 1 3156 0
 5169 2938 000050E3 		cmp	r0, #0
 5170 293c CD03001A 		bne	.L893
3163:../uvc.c      **** 				}
 5171              		.loc 1 3163 0
 5172 2940 FF30A0E3 		mov	r3, #255
3162:../uvc.c      **** 					stiflag = 0xFF;
 5173              		.loc 1 3162 0
 5174 2944 1A06C9E5 		strb	r0, [r9, #1562]
3163:../uvc.c      **** 				}
 5175              		.loc 1 3163 0
 5176 2948 EC3084E5 		str	r3, [r4, #236]
 5177              	.LVL586:
 5178              	.L454:
3317:../uvc.c      ****     }
 5179              		.loc 1 3317 0
 5180 294c FEFFFFEB 		bl	_txe_thread_relinquish
 5181              	.LVL587:
3318:../uvc.c      **** }
 5182              		.loc 1 3318 0
 5183 2950 A2FFFFEA 		b	.L736
 5184              	.L466:
 5185              	.LBB238:
 5186              	.LBB228:
2250:../uvc.c      **** 		{
 5187              		.loc 1 2250 0
 5188 2954 0A0C52E3 		cmp	r2, #2560
 5189 2958 2401000A 		beq	.L472
 5190 295c B500009A 		bls	.L894
 5191 2960 0D0C52E3 		cmp	r2, #3328
 5192 2964 2101000A 		beq	.L472
 5193 2968 0E0C52E3 		cmp	r2, #3584
 5194 296c 1B01000A 		beq	.L476
 5195 2970 030B52E3 		cmp	r2, #3072
 5196 2974 1501000A 		beq	.L895
 5197              	.L464:
2303:../uvc.c      **** 			CyU3PUsbStall(0, CyTrue, CyFalse);
 5198              		.loc 1 2303 0
 5199 2978 84CD9FE5 		ldr	ip, .L927+24
 5200 297c 0400A0E3 		mov	r0, #4
 5201 2980 801D9FE5 		ldr	r1, .L927+28
 5202 2984 0030DCE5 		ldrb	r3, [ip]	@ zero_extendqisi2
 5203 2988 FEFFFFEB 		bl	CyU3PDebugPrint
 5204              	.LVL588:
 5205              	.L459:
 5206              	.LBE228:
 5207              	.LBE238:
3084:../uvc.c      ****                         break;
 5208              		.loc 1 3084 0
 5209 298c 0000A0E3 		mov	r0, #0
 5210 2990 0020A0E1 		mov	r2, r0
 5211 2994 0110A0E3 		mov	r1, #1
 5212 2998 FEFFFFEB 		bl	CyU3PUsbStall
 5213              	.LVL589:
 5214 299c 28309DE5 		ldr	r3, [sp, #40]
3085:../uvc.c      ****                 }
 5215              		.loc 1 3085 0
 5216 29a0 B6FFFFEA 		b	.L458
 5217              	.L463:
 5218              	.LBB239:
 5219              	.LBB240:
2420:../uvc.c      **** 		{
 5220              		.loc 1 2420 0
 5221 29a4 4C1D9FE5 		ldr	r1, .L927+12
 5222 29a8 B030D1E1 		ldrh	r3, [r1]
 5223 29ac 090C53E3 		cmp	r3, #2304
 5224 29b0 2C02000A 		beq	.L508
 5225 29b4 7A00008A 		bhi	.L509
 5226 29b8 010B53E3 		cmp	r3, #1024
 5227 29bc D101000A 		beq	.L510
 5228 29c0 BA00009A 		bls	.L896
 5229 29c4 060C53E3 		cmp	r3, #1536
 5230 29c8 6102000A 		beq	.L515
 5231 29cc 5A02009A 		bls	.L897
 5232 29d0 070C53E3 		cmp	r3, #1792
 5233 29d4 F901000A 		beq	.L518
 5234 29d8 020B53E3 		cmp	r3, #2048
 5235 29dc EAFFFF1A 		bne	.L459
 5236              	.LVL590:
 5237              	.LBB241:
 5238              	.LBB242:
 415:../uvc.c      ****     /*
 5239              		.loc 1 415 0
 5240 29e0 1C3D9FE5 		ldr	r3, .L927+24
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 5241              		.loc 1 406 0
 5242 29e4 A8C3DBE5 		ldrb	ip, [fp, #936]	@ zero_extendqisi2
 415:../uvc.c      ****     /*
 5243              		.loc 1 415 0
 5244 29e8 0070D3E5 		ldrb	r7, [r3]	@ zero_extendqisi2
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 5245              		.loc 1 406 0
 5246 29ec 18C08DE5 		str	ip, [sp, #24]
 5247              	.LVL591:
 423:../uvc.c      **** 		 {
 5248              		.loc 1 423 0
 5249 29f0 830057E3 		cmp	r7, #131
 408:../uvc.c      **** 		Len = CtrlParArry[CtrlID][2];
 5250              		.loc 1 408 0
 5251 29f4 B783DBE5 		ldrb	r8, [fp, #951]	@ zero_extendqisi2
 5252              	.LVL592:
 409:../uvc.c      ****     }
 5253              		.loc 1 409 0
 5254 29f8 AA63DBE5 		ldrb	r6, [fp, #938]	@ zero_extendqisi2
 5255              	.LVL593:
 423:../uvc.c      **** 		 {
 5256              		.loc 1 423 0
 5257 29fc D904000A 		beq	.L602
 5258 2a00 1803009A 		bls	.L898
 5259 2a04 850057E3 		cmp	r7, #133
 5260 2a08 9C07000A 		beq	.L648
 5261 2a0c 9807003A 		bcc	.L608
 5262 2a10 860057E3 		cmp	r7, #134
 5263 2a14 9407000A 		beq	.L609
 5264 2a18 870057E3 		cmp	r7, #135
 654:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][12];
 5265              		.loc 1 654 0
 5266 2a1c B323DB05 		ldreqb	r2, [fp, #947]	@ zero_extendqisi2
 655:../uvc.c      **** 			 }
 5267              		.loc 1 655 0
 5268 2a20 B433DB05 		ldreqb	r3, [fp, #948]	@ zero_extendqisi2
 423:../uvc.c      **** 		 {
 5269              		.loc 1 423 0
 5270 2a24 B900001A 		bne	.L642
 5271              	.LVL594:
 5272              	.L875:
 5273              	.LBE242:
 5274              	.LBE241:
 5275              	.LBB247:
 5276              	.LBB248:
 594:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 5277              		.loc 1 594 0
 5278 2a28 281D9FE5 		ldr	r1, .L927+108
 5279 2a2c 0600A0E1 		mov	r0, r6
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 5280              		.loc 1 591 0
 5281 2a30 A020C4E5 		strb	r2, [r4, #160]
 5282              	.L874:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 5283              		.loc 1 411 0
 5284 2a34 FF60A0E3 		mov	r6, #255
 592:../uvc.c      **** 			 }
 5285              		.loc 1 592 0
 5286 2a38 A130C4E5 		strb	r3, [r4, #161]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 5287              		.loc 1 411 0
 5288 2a3c 06A0A0E1 		mov	r10, r6
 594:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 5289              		.loc 1 594 0
 5290 2a40 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 5291              	.LVL595:
 595:../uvc.c      **** 			  break;
 5292              		.loc 1 595 0
 5293 2a44 A080D4E5 		ldrb	r8, [r4, #160]	@ zero_extendqisi2
 5294              	.LVL596:
 5295 2a48 AD0400EA 		b	.L652
 5296              	.LVL597:
 5297              	.L891:
 5298              	.LBE248:
 5299              	.LBE247:
 5300              	.LBE240:
 5301              	.LBE239:
3045:../uvc.c      ****                 if (usbSpeed != CY_U3P_NOT_CONNECTED)
 5302              		.loc 1 3045 0
 5303 2a4c FEFFFFEB 		bl	CyU3PUsbGetSpeed
 5304              	.LVL598:
3046:../uvc.c      ****                 {
 5305              		.loc 1 3046 0
 5306 2a50 000050E3 		cmp	r0, #0
3048:../uvc.c      ****                 }
 5307              		.loc 1 3048 0
 5308 2a54 0130A013 		movne	r3, #1
3045:../uvc.c      ****                 if (usbSpeed != CY_U3P_NOT_CONNECTED)
 5309              		.loc 1 3045 0
 5310 2a58 E800C5E5 		strb	r0, [r5, #232]
3048:../uvc.c      ****                 }
 5311              		.loc 1 3048 0
 5312 2a5c E4308515 		strne	r3, [r5, #228]
 5313 2a60 6AFFFFEA 		b	.L456
 5314              	.L892:
3114:../uvc.c      **** 					//CyU3PDebugPrint (4, "The interrupt event %d %d\r\n", testSnap, snapButFlag);
 5315              		.loc 1 3114 0 discriminator 1
 5316 2a64 1A36DBE5 		ldrb	r3, [fp, #1562]	@ zero_extendqisi2
 5317 2a68 000053E3 		cmp	r3, #0
 5318 2a6c B6FFFF1A 		bne	.L454
3116:../uvc.c      **** 					glInterStaBuffer[1] = 0x01;  //number of VS interface
 5319              		.loc 1 3116 0
 5320 2a70 84CC9FE5 		ldr	ip, .L927+16
 5321 2a74 0210A0E3 		mov	r1, #2
 5322 2a78 00209CE5 		ldr	r2, [ip]
3117:../uvc.c      **** 					glInterStaBuffer[2] = 0x00;
 5323              		.loc 1 3117 0
 5324 2a7c 0160A0E3 		mov	r6, #1
3116:../uvc.c      **** 					glInterStaBuffer[1] = 0x01;  //number of VS interface
 5325              		.loc 1 3116 0
 5326 2a80 0010C2E5 		strb	r1, [r2]
3117:../uvc.c      **** 					glInterStaBuffer[2] = 0x00;
 5327              		.loc 1 3117 0
 5328 2a84 00209CE5 		ldr	r2, [ip]
3125:../uvc.c      **** 
 5329              		.loc 1 3125 0
 5330 2a88 0470A0E3 		mov	r7, #4
3117:../uvc.c      **** 					glInterStaBuffer[2] = 0x00;
 5331              		.loc 1 3117 0
 5332 2a8c 0160C2E5 		strb	r6, [r2, #1]
3118:../uvc.c      **** 					glInterStaBuffer[3] = 0x00; //button release
 5333              		.loc 1 3118 0
 5334 2a90 00109CE5 		ldr	r1, [ip]
3122:../uvc.c      **** 					interStabuf.status = 0;
 5335              		.loc 1 3122 0
 5336 2a94 012BA0E3 		mov	r2, #1024
3118:../uvc.c      **** 					glInterStaBuffer[3] = 0x00; //button release
 5337              		.loc 1 3118 0
 5338 2a98 0230C1E5 		strb	r3, [r1, #2]
3119:../uvc.c      **** 
 5339              		.loc 1 3119 0
 5340 2a9c 00109CE5 		ldr	r1, [ip]
3128:../uvc.c      **** 
 5341              		.loc 1 3128 0
 5342 2aa0 580C9FE5 		ldr	r0, .L927+20
3119:../uvc.c      **** 
 5343              		.loc 1 3119 0
 5344 2aa4 0330C1E5 		strb	r3, [r1, #3]
3121:../uvc.c      **** 					interStabuf.size   = 1024;
 5345              		.loc 1 3121 0
 5346 2aa8 00109CE5 		ldr	r1, [ip]
3123:../uvc.c      **** 
 5347              		.loc 1 3123 0
 5348 2aac BC33CDE1 		strh	r3, [sp, #60]	@ movhi
3121:../uvc.c      **** 					interStabuf.size   = 1024;
 5349              		.loc 1 3121 0
 5350 2ab0 34108DE5 		str	r1, [sp, #52]
3128:../uvc.c      **** 
 5351              		.loc 1 3128 0
 5352 2ab4 0010E0E3 		mvn	r1, #0
3122:../uvc.c      **** 					interStabuf.status = 0;
 5353              		.loc 1 3122 0
 5354 2ab8 BA23CDE1 		strh	r2, [sp, #58]	@ movhi
3125:../uvc.c      **** 
 5355              		.loc 1 3125 0
 5356 2abc B873CDE1 		strh	r7, [sp, #56]	@ movhi
3128:../uvc.c      **** 
 5357              		.loc 1 3128 0
 5358 2ac0 FEFFFFEB 		bl	CyU3PDmaChannelWaitForCompletion
 5359              	.LVL599:
3131:../uvc.c      **** 					if (apiRetStatus != CY_U3P_SUCCESS)
 5360              		.loc 1 3131 0
 5361 2ac4 340C9FE5 		ldr	r0, .L927+20
 5362 2ac8 34108DE2 		add	r1, sp, #52
 5363 2acc FEFFFFEB 		bl	CyU3PDmaChannelSetupSendBuffer
 5364              	.LVL600:
3132:../uvc.c      **** 					{
 5365              		.loc 1 3132 0
 5366 2ad0 000050E3 		cmp	r0, #0
 5367 2ad4 6003001A 		bne	.L899
3137:../uvc.c      **** 				}else if(snapButFlag&&(!value)){
 5368              		.loc 1 3137 0
 5369 2ad8 1A66C9E5 		strb	r6, [r9, #1562]
3317:../uvc.c      ****     }
 5370              		.loc 1 3317 0
 5371 2adc FEFFFFEB 		bl	_txe_thread_relinquish
 5372              	.LVL601:
 5373 2ae0 3EFFFFEA 		b	.L736
 5374              	.L699:
 5375              	.LVL602:
 5376              	.LBB375:
 5377              	.LBB376:
2838:../uvc.c      **** 			{
 5378              		.loc 1 2838 0
 5379 2ae4 180C9FE5 		ldr	r0, .L927+24
 5380 2ae8 0020D0E5 		ldrb	r2, [r0]	@ zero_extendqisi2
 5381 2aec 7F1082E2 		add	r1, r2, #127
 5382 2af0 FF1001E2 		and	r1, r1, #255
 5383 2af4 870052E3 		cmp	r2, #135
 5384 2af8 02005113 		cmpne	r1, #2
 5385 2afc 0C00008A 		bhi	.L700
 5386              	.LVL603:
2841:../uvc.c      **** 				{
 5387              		.loc 1 2841 0
 5388 2b00 F01B9FE5 		ldr	r1, .L927+12
 5389 2b04 B020D1E1 		ldrh	r2, [r1]
 5390 2b08 010C52E3 		cmp	r2, #256
 5391 2b0c 020C5213 		cmpne	r2, #512
 5392 2b10 5000000A 		beq	.L900
2885:../uvc.c      **** 				{
 5393              		.loc 1 2885 0
 5394 2b14 030C52E3 		cmp	r2, #768
 5395 2b18 010B5213 		cmpne	r2, #1024
 5396 2b1c 62FFFF1A 		bne	.L698
2887:../uvc.c      **** 					{
 5397              		.loc 1 2887 0
 5398 2b20 FEFFFFEB 		bl	CyU3PUsbGetSpeed
 5399              	.LVL604:
 5400 2b24 030050E3 		cmp	r0, #3
 5401 2b28 1F04000A 		beq	.L710
 5402              	.LVL605:
 5403              	.L884:
 5404 2b2c 28309DE5 		ldr	r3, [sp, #40]
 5405 2b30 5DFFFFEA 		b	.L698
 5406              	.LVL606:
 5407              	.L700:
2898:../uvc.c      **** 			{
 5408              		.loc 1 2898 0
 5409 2b34 010052E3 		cmp	r2, #1
 5410 2b38 5BFFFF1A 		bne	.L698
 5411              	.LVL607:
2901:../uvc.c      **** 				{
 5412              		.loc 1 2901 0
 5413 2b3c B4CB9FE5 		ldr	ip, .L927+12
 5414 2b40 B020DCE1 		ldrh	r2, [ip]
 5415 2b44 010C52E3 		cmp	r2, #256
 5416 2b48 020C5213 		cmpne	r2, #512
 5417 2b4c 2001000A 		beq	.L901
2952:../uvc.c      **** 				{
 5418              		.loc 1 2952 0
 5419 2b50 030C52E3 		cmp	r2, #768
 5420 2b54 010B5213 		cmpne	r2, #1024
 5421 2b58 0901000A 		beq	.L902
2980:../uvc.c      **** 				{
 5422              		.loc 1 2980 0
 5423 2b5c 050C52E3 		cmp	r2, #1280
 5424 2b60 51FFFF1A 		bne	.L698
2982:../uvc.c      **** 					if (status != CY_U3P_SUCCESS)
 5425              		.loc 1 2982 0
 5426 2b64 20208DE2 		add	r2, sp, #32
 5427 2b68 1000A0E3 		mov	r0, #16
 5428 2b6c 981B9FE5 		ldr	r1, .L927+32
 5429 2b70 FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 5430              	.LVL608:
2983:../uvc.c      **** 					{
 5431              		.loc 1 2983 0
 5432 2b74 002050E2 		subs	r2, r0, #0
 5433 2b78 3707001A 		bne	.L903
 5434              	.LVL609:
 5435              	.L727:
2988:../uvc.c      **** 					{
 5436              		.loc 1 2988 0
 5437 2b7c B032DDE1 		ldrh	r3, [sp, #32]
 5438 2b80 010053E3 		cmp	r3, #1
 5439 2b84 3007008A 		bhi	.L885
2994:../uvc.c      **** 						{
 5440              		.loc 1 2994 0
 5441 2b88 DC20D4E5 		ldrb	r2, [r4, #220]	@ zero_extendqisi2
 5442 2b8c 28309DE5 		ldr	r3, [sp, #40]
 5443 2b90 010052E3 		cmp	r2, #1
2997:../uvc.c      **** 						}
 5444              		.loc 1 2997 0
 5445 2b94 8C208505 		streq	r2, [r5, #140]
2996:../uvc.c      **** 							glStillCaptureStart = CyTrue;
 5446              		.loc 1 2996 0
 5447 2b98 0320A003 		moveq	r2, #3
 5448 2b9c 9020C505 		streqb	r2, [r5, #144]
 5449 2ba0 41FFFFEA 		b	.L698
 5450              	.LVL610:
 5451              	.L509:
 5452              	.LBE376:
 5453              	.LBE375:
 5454              	.LBB390:
 5455              	.LBB359:
2420:../uvc.c      **** 		{
 5456              		.loc 1 2420 0
 5457 2ba4 0F0C53E3 		cmp	r3, #3840
 5458 2ba8 B201000A 		beq	.L520
 5459 2bac 7D00009A 		bls	.L904
 5460 2bb0 110C53E3 		cmp	r3, #4352
 5461 2bb4 C201000A 		beq	.L525
 5462 2bb8 6501009A 		bls	.L905
 5463 2bbc 120C53E3 		cmp	r3, #4608
 5464 2bc0 BE00000A 		beq	.L528
 5465 2bc4 130C53E3 		cmp	r3, #4864
 5466 2bc8 6FFFFF1A 		bne	.L459
 5467              	.LVL611:
 5468              	.LBB260:
 5469              	.LBB261:
 415:../uvc.c      ****     /*
 5470              		.loc 1 415 0
 5471 2bcc 303B9FE5 		ldr	r3, .L927+24
 401:../uvc.c      ****         RegAdd1 = ExUCtrlParArry[locCtrlID][1];
 5472              		.loc 1 401 0
 5473 2bd0 90A0DBE5 		ldrb	r10, [fp, #144]	@ zero_extendqisi2
 5474              	.LVL612:
 415:../uvc.c      ****     /*
 5475              		.loc 1 415 0
 5476 2bd4 0070D3E5 		ldrb	r7, [r3]	@ zero_extendqisi2
 403:../uvc.c      ****         Len = ExUCtrlParArry[locCtrlID][2];
 5477              		.loc 1 403 0
 5478 2bd8 9F80DBE5 		ldrb	r8, [fp, #159]	@ zero_extendqisi2
 5479              	.LVL613:
 423:../uvc.c      **** 		 {
 5480              		.loc 1 423 0
 5481 2bdc 830057E3 		cmp	r7, #131
 404:../uvc.c      ****     }else{
 5482              		.loc 1 404 0
 5483 2be0 9230DBE5 		ldrb	r3, [fp, #146]	@ zero_extendqisi2
 5484              	.LVL614:
 423:../uvc.c      **** 		 {
 5485              		.loc 1 423 0
 5486 2be4 1507000A 		beq	.L687
 5487 2be8 4B03009A 		bls	.L906
 5488 2bec 850057E3 		cmp	r7, #133
 5489 2bf0 0C07000A 		beq	.L692
 5490 2bf4 FC06003A 		bcc	.L693
 5491 2bf8 860057E3 		cmp	r7, #134
 5492 2bfc F006000A 		beq	.L694
 5493 2c00 870057E3 		cmp	r7, #135
 644:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][12];
 5494              		.loc 1 644 0
 5495 2c04 9BC0DB05 		ldreqb	ip, [fp, #155]	@ zero_extendqisi2
 645:../uvc.c      **** 		 	 }
 5496              		.loc 1 645 0
 5497 2c08 9C20DB05 		ldreqb	r2, [fp, #156]	@ zero_extendqisi2
 423:../uvc.c      **** 		 {
 5498              		.loc 1 423 0
 5499 2c0c E306001A 		bne	.L686
 5500              	.L881:
 657:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 5501              		.loc 1 657 0
 5502 2c10 401B9FE5 		ldr	r1, .L927+108
 5503 2c14 0300A0E1 		mov	r0, r3
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 5504              		.loc 1 411 0
 5505 2c18 FF80A0E3 		mov	r8, #255
 644:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][12];
 5506              		.loc 1 644 0
 5507 2c1c A0C0C4E5 		strb	ip, [r4, #160]
 5508              	.L880:
 645:../uvc.c      **** 		 	 }
 5509              		.loc 1 645 0
 5510 2c20 A120C4E5 		strb	r2, [r4, #161]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 5511              		.loc 1 411 0
 5512 2c24 0860A0E1 		mov	r6, r8
 657:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 5513              		.loc 1 657 0
 5514 2c28 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 5515              	.LVL615:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 5516              		.loc 1 411 0
 5517 2c2c 08C0A0E1 		mov	ip, r8
 658:../uvc.c      **** 			  break;
 5518              		.loc 1 658 0
 5519 2c30 A0A0D4E5 		ldrb	r10, [r4, #160]	@ zero_extendqisi2
 5520              	.LVL616:
 5521 2c34 CC0400EA 		b	.L696
 5522              	.LVL617:
 5523              	.L894:
 5524              	.LBE261:
 5525              	.LBE260:
 5526              	.LBE359:
 5527              	.LBE390:
 5528              	.LBB391:
 5529              	.LBB229:
2250:../uvc.c      **** 		{
 5530              		.loc 1 2250 0
 5531 2c38 070C52E3 		cmp	r2, #1792
 5532 2c3c 9000000A 		beq	.L474
 5533 2c40 020B52E3 		cmp	r2, #2048
 5534 2c44 4BFFFF1A 		bne	.L464
 5535              	.LVL618:
2281:../uvc.c      **** 			break;
 5536              		.loc 1 2281 0
 5537 2c48 0700A0E3 		mov	r0, #7
 5538 2c4c FEFFFFEB 		bl	ControlHandle
 5539              	.LVL619:
 5540 2c50 28309DE5 		ldr	r3, [sp, #40]
 5541 2c54 09FFFFEA 		b	.L458
 5542              	.LVL620:
 5543              	.L900:
 5544              	.LBE229:
 5545              	.LBE391:
 5546              	.LBB392:
 5547              	.LBB381:
2846:../uvc.c      **** 					{
 5548              		.loc 1 2846 0
 5549 2c58 FEFFFFEB 		bl	CyU3PUsbGetSpeed
 5550              	.LVL621:
 5551 2c5c 030050E3 		cmp	r0, #3
 5552 2c60 8B00001A 		bne	.L702
2848:../uvc.c      **** 						{
 5553              		.loc 1 2848 0
 5554 2c64 9034DBE5 		ldrb	r3, [fp, #1168]	@ zero_extendqisi2
 5555 2c68 040053E3 		cmp	r3, #4
 5556 2c6c C606000A 		beq	.L907
2853:../uvc.c      **** 						{
 5557              		.loc 1 2853 0
 5558 2c70 030053E3 		cmp	r3, #3
 5559 2c74 BF06000A 		beq	.L908
2858:../uvc.c      **** 						{
 5560              		.loc 1 2858 0
 5561 2c78 020053E3 		cmp	r3, #2
 5562 2c7c B806000A 		beq	.L909
2863:../uvc.c      **** 						{
 5563              		.loc 1 2863 0
 5564 2c80 010053E3 		cmp	r3, #1
 5565 2c84 B106000A 		beq	.L910
 5566              	.L704:
2879:../uvc.c      **** 					if (status != CY_U3P_SUCCESS)
 5567              		.loc 1 2879 0
 5568 2c88 1A00A0E3 		mov	r0, #26
 5569 2c8c 901A9FE5 		ldr	r1, .L927+56
 5570 2c90 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 5571              	.LVL622:
2880:../uvc.c      **** 					{
 5572              		.loc 1 2880 0
 5573 2c94 002050E2 		subs	r2, r0, #0
 5574 2c98 A3FFFF0A 		beq	.L884
 5575              	.L711:
2892:../uvc.c      **** 						}
 5576              		.loc 1 2892 0
 5577 2c9c 0400A0E3 		mov	r0, #4
 5578              	.LVL623:
 5579 2ca0 681A9FE5 		ldr	r1, .L927+36
 5580 2ca4 FEFFFFEB 		bl	CyU3PDebugPrint
 5581              	.LVL624:
 5582 2ca8 28309DE5 		ldr	r3, [sp, #40]
 5583 2cac FEFEFFEA 		b	.L698
 5584              	.LVL625:
 5585              	.L896:
 5586              	.LBE381:
 5587              	.LBE392:
 5588              	.LBB393:
 5589              	.LBB360:
2420:../uvc.c      **** 		{
 5590              		.loc 1 2420 0
 5591 2cb0 020C53E3 		cmp	r3, #512
 5592 2cb4 5801000A 		beq	.L512
 5593 2cb8 030C53E3 		cmp	r3, #768
 5594 2cbc 4301000A 		beq	.L513
 5595 2cc0 010C53E3 		cmp	r3, #256
 5596 2cc4 30FFFF1A 		bne	.L459
 5597              	.LVL626:
 5598              	.LBB265:
 5599              	.LBB266:
 415:../uvc.c      ****     /*
 5600              		.loc 1 415 0
 5601 2cc8 342A9FE5 		ldr	r2, .L927+24
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 5602              		.loc 1 406 0
 5603 2ccc 0033DBE5 		ldrb	r3, [fp, #768]	@ zero_extendqisi2
 415:../uvc.c      ****     /*
 5604              		.loc 1 415 0
 5605 2cd0 0070D2E5 		ldrb	r7, [r2]	@ zero_extendqisi2
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 5606              		.loc 1 406 0
 5607 2cd4 18308DE5 		str	r3, [sp, #24]
 5608              	.LVL627:
 423:../uvc.c      **** 		 {
 5609              		.loc 1 423 0
 5610 2cd8 830057E3 		cmp	r7, #131
 408:../uvc.c      **** 		Len = CtrlParArry[CtrlID][2];
 5611              		.loc 1 408 0
 5612 2cdc 0F83DBE5 		ldrb	r8, [fp, #783]	@ zero_extendqisi2
 5613              	.LVL628:
 409:../uvc.c      ****     }
 5614              		.loc 1 409 0
 5615 2ce0 0263DBE5 		ldrb	r6, [fp, #770]	@ zero_extendqisi2
 5616              	.LVL629:
 423:../uvc.c      **** 		 {
 5617              		.loc 1 423 0
 5618 2ce4 9606000A 		beq	.L531
 5619 2ce8 3003009A 		bls	.L911
 5620 2cec 850057E3 		cmp	r7, #133
 5621 2cf0 E206000A 		beq	.L648
 5622 2cf4 8F06003A 		bcc	.L537
 5623 2cf8 860057E3 		cmp	r7, #134
 5624 2cfc 8B06000A 		beq	.L538
 5625 2d00 870057E3 		cmp	r7, #135
 654:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][12];
 5626              		.loc 1 654 0
 5627 2d04 0B23DB05 		ldreqb	r2, [fp, #779]	@ zero_extendqisi2
 655:../uvc.c      **** 			 }
 5628              		.loc 1 655 0
 5629 2d08 0C33DB05 		ldreqb	r3, [fp, #780]	@ zero_extendqisi2
 423:../uvc.c      **** 		 {
 5630              		.loc 1 423 0
 5631 2d0c 45FFFF0A 		beq	.L875
 5632              	.LVL630:
 5633              	.L642:
 5634              	.LBE266:
 5635              	.LBE265:
 5636              	.LBB270:
 5637              	.LBB249:
 954:../uvc.c      **** 			  break;
 5638              		.loc 1 954 0
 5639 2d10 0000A0E3 		mov	r0, #0
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 5640              		.loc 1 411 0
 5641 2d14 FF80A0E3 		mov	r8, #255
 954:../uvc.c      **** 			  break;
 5642              		.loc 1 954 0
 5643 2d18 0020A0E1 		mov	r2, r0
 5644 2d1c 0110A0E3 		mov	r1, #1
 5645 2d20 FEFFFFEB 		bl	CyU3PUsbStall
 5646              	.LVL631:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 5647              		.loc 1 411 0
 5648 2d24 0860A0E1 		mov	r6, r8
 5649 2d28 08A0A0E1 		mov	r10, r8
 5650 2d2c F40300EA 		b	.L652
 5651              	.L468:
 5652              	.LBE249:
 5653              	.LBE270:
 5654              	.LBE360:
 5655              	.LBE393:
 5656              	.LBB394:
 5657              	.LBB230:
2250:../uvc.c      **** 		{
 5658              		.loc 1 2250 0
 5659 2d30 010B52E3 		cmp	r2, #1024
 5660 2d34 D1FEFF0A 		beq	.L458
 5661 2d38 050C52E3 		cmp	r2, #1280
 5662 2d3c 0DFFFF1A 		bne	.L464
 5663              	.LVL632:
 5664              	.LBB212:
 5665              	.LBB213:
 415:../uvc.c      ****     /*
 5666              		.loc 1 415 0
 5667 2d40 BC299FE5 		ldr	r2, .L927+24
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 5668              		.loc 1 406 0
 5669 2d44 E001DBE5 		ldrb	r0, [fp, #480]	@ zero_extendqisi2
 5670              	.LVL633:
 415:../uvc.c      ****     /*
 5671              		.loc 1 415 0
 5672 2d48 00A0D2E5 		ldrb	r10, [r2]	@ zero_extendqisi2
 408:../uvc.c      **** 		Len = CtrlParArry[CtrlID][2];
 5673              		.loc 1 408 0
 5674 2d4c EF11DBE5 		ldrb	r1, [fp, #495]	@ zero_extendqisi2
 5675              	.LVL634:
 423:../uvc.c      **** 		 {
 5676              		.loc 1 423 0
 5677 2d50 83005AE3 		cmp	r10, #131
 409:../uvc.c      ****     }
 5678              		.loc 1 409 0
 5679 2d54 E261DBE5 		ldrb	r6, [fp, #482]	@ zero_extendqisi2
 5680              	.LVL635:
 423:../uvc.c      **** 		 {
 5681              		.loc 1 423 0
 5682 2d58 7106000A 		beq	.L479
 5683 2d5c F401009A 		bls	.L912
 5684 2d60 85005AE3 		cmp	r10, #133
 5685 2d64 6906000A 		beq	.L484
 5686 2d68 5A06003A 		bcc	.L485
 5687 2d6c 86005AE3 		cmp	r10, #134
 5688 2d70 4F06000A 		beq	.L486
 5689 2d74 87005AE3 		cmp	r10, #135
 654:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][12];
 5690              		.loc 1 654 0
 5691 2d78 EB21DB05 		ldreqb	r2, [fp, #491]	@ zero_extendqisi2
 655:../uvc.c      **** 			 }
 5692              		.loc 1 655 0
 5693 2d7c EC31DB05 		ldreqb	r3, [fp, #492]	@ zero_extendqisi2
 423:../uvc.c      **** 		 {
 5694              		.loc 1 423 0
 5695 2d80 4306001A 		bne	.L478
 5696              	.L855:
 594:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 5697              		.loc 1 594 0
 5698 2d84 CC199FE5 		ldr	r1, .L927+108
 5699 2d88 0600A0E1 		mov	r0, r6
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 5700              		.loc 1 591 0
 5701 2d8c A020C4E5 		strb	r2, [r4, #160]
 5702              	.L854:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 5703              		.loc 1 411 0
 5704 2d90 FF60A0E3 		mov	r6, #255
 592:../uvc.c      **** 			 }
 5705              		.loc 1 592 0
 5706 2d94 A130C4E5 		strb	r3, [r4, #161]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 5707              		.loc 1 411 0
 5708 2d98 0680A0E1 		mov	r8, r6
 594:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 5709              		.loc 1 594 0
 5710 2d9c FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 5711              	.LVL636:
 595:../uvc.c      **** 			  break;
 5712              		.loc 1 595 0
 5713 2da0 A070D4E5 		ldrb	r7, [r4, #160]	@ zero_extendqisi2
 5714              	.LVL637:
 5715 2da4 1A0500EA 		b	.L488
 5716              	.LVL638:
 5717              	.L904:
 5718              	.LBE213:
 5719              	.LBE212:
 5720              	.LBE230:
 5721              	.LBE394:
 5722              	.LBB395:
 5723              	.LBB361:
2420:../uvc.c      **** 		{
 5724              		.loc 1 2420 0
 5725 2da8 0B0C53E3 		cmp	r3, #2816
 5726 2dac 5F00000A 		beq	.L522
 5727 2db0 0D0C53E3 		cmp	r3, #3328
 5728 2db4 4500000A 		beq	.L523
 5729 2db8 0A0C53E3 		cmp	r3, #2560
 5730 2dbc F2FEFF1A 		bne	.L459
 5731              	.LVL639:
2461:../uvc.c      **** 			}
 5732              		.loc 1 2461 0
 5733 2dc0 1900A0E3 		mov	r0, #25
 5734 2dc4 FEFFFFEB 		bl	ControlHandle
 5735              	.LVL640:
 5736 2dc8 28309DE5 		ldr	r3, [sp, #40]
 5737 2dcc ABFEFFEA 		b	.L458
 5738              	.L895:
 5739              	.LVL641:
 5740              	.LBE361:
 5741              	.LBE395:
 5742              	.LBB396:
 5743              	.LBB231:
2291:../uvc.c      **** 			break;
 5744              		.loc 1 2291 0
 5745 2dd0 0B00A0E3 		mov	r0, #11
 5746 2dd4 FEFFFFEB 		bl	ControlHandle
 5747              	.LVL642:
 5748 2dd8 28309DE5 		ldr	r3, [sp, #40]
 5749 2ddc A7FEFFEA 		b	.L458
 5750              	.L476:
 5751              	.LVL643:
2295:../uvc.c      **** 			break;
 5752              		.loc 1 2295 0
 5753 2de0 0E00A0E3 		mov	r0, #14
 5754 2de4 FEFFFFEB 		bl	ControlHandle
 5755              	.LVL644:
 5756 2de8 28309DE5 		ldr	r3, [sp, #40]
 5757 2dec A3FEFFEA 		b	.L458
 5758              	.L472:
 5759              	.LVL645:
2287:../uvc.c      **** 			break;
 5760              		.loc 1 2287 0
 5761 2df0 0900A0E3 		mov	r0, #9
 5762 2df4 FEFFFFEB 		bl	ControlHandle
 5763              	.LVL646:
 5764 2df8 28309DE5 		ldr	r3, [sp, #40]
 5765 2dfc 9FFEFFEA 		b	.L458
 5766              	.L469:
 5767              	.LVL647:
2254:../uvc.c      **** 			break;
 5768              		.loc 1 2254 0
 5769 2e00 0000A0E3 		mov	r0, #0
 5770 2e04 FEFFFFEB 		bl	ControlHandle
 5771              	.LVL648:
 5772 2e08 28309DE5 		ldr	r3, [sp, #40]
 5773 2e0c 9BFEFFEA 		b	.L458
 5774              	.L465:
 5775              	.LVL649:
 5776              	.LBB217:
 5777              	.LBB218:
 415:../uvc.c      ****     /*
 5778              		.loc 1 415 0
 5779 2e10 EC089FE5 		ldr	r0, .L927+24
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 5780              		.loc 1 406 0
 5781 2e14 F831DBE5 		ldrb	r3, [fp, #504]	@ zero_extendqisi2
 415:../uvc.c      ****     /*
 5782              		.loc 1 415 0
 5783 2e18 0070D0E5 		ldrb	r7, [r0]	@ zero_extendqisi2
 407:../uvc.c      **** 		devAdd = CtrlParArry[CtrlID][15];
 5784              		.loc 1 407 0
 5785 2e1c F9C1DBE5 		ldrb	ip, [fp, #505]	@ zero_extendqisi2
 423:../uvc.c      **** 		 {
 5786              		.loc 1 423 0
 5787 2e20 830057E3 		cmp	r7, #131
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 5788              		.loc 1 406 0
 5789 2e24 18308DE5 		str	r3, [sp, #24]
 5790              	.LVL650:
 407:../uvc.c      **** 		devAdd = CtrlParArry[CtrlID][15];
 5791              		.loc 1 407 0
 5792 2e28 1CC08DE5 		str	ip, [sp, #28]
 5793              	.LVL651:
 408:../uvc.c      **** 		Len = CtrlParArry[CtrlID][2];
 5794              		.loc 1 408 0
 5795 2e2c 0782DBE5 		ldrb	r8, [fp, #519]	@ zero_extendqisi2
 5796              	.LVL652:
 409:../uvc.c      ****     }
 5797              		.loc 1 409 0
 5798 2e30 FA31DBE5 		ldrb	r3, [fp, #506]	@ zero_extendqisi2
 5799              	.LVL653:
 423:../uvc.c      **** 		 {
 5800              		.loc 1 423 0
 5801 2e34 1306000A 		beq	.L493
 5802 2e38 6103009A 		bls	.L913
 5803 2e3c 850057E3 		cmp	r7, #133
 5804 2e40 0B06000A 		beq	.L498
 5805 2e44 0606003A 		bcc	.L499
 5806 2e48 860057E3 		cmp	r7, #134
 5807 2e4c 0206000A 		beq	.L500
 5808 2e50 870057E3 		cmp	r7, #135
 654:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][12];
 5809              		.loc 1 654 0
 5810 2e54 03C2D905 		ldreqb	ip, [r9, #515]	@ zero_extendqisi2
 655:../uvc.c      **** 			 }
 5811              		.loc 1 655 0
 5812 2e58 0422D905 		ldreqb	r2, [r9, #516]	@ zero_extendqisi2
 423:../uvc.c      **** 		 {
 5813              		.loc 1 423 0
 5814 2e5c ABFFFF1A 		bne	.L642
 5815              	.L857:
 594:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 5816              		.loc 1 594 0
 5817 2e60 F0189FE5 		ldr	r1, .L927+108
 5818 2e64 0300A0E1 		mov	r0, r3
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 5819              		.loc 1 591 0
 5820 2e68 A0C0C4E5 		strb	ip, [r4, #160]
 5821              	.L856:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 5822              		.loc 1 411 0
 5823 2e6c FF60A0E3 		mov	r6, #255
 592:../uvc.c      **** 			 }
 5824              		.loc 1 592 0
 5825 2e70 A120C4E5 		strb	r2, [r4, #161]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 5826              		.loc 1 411 0
 5827 2e74 06A0A0E1 		mov	r10, r6
 594:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 5828              		.loc 1 594 0
 5829 2e78 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 5830              	.LVL654:
 595:../uvc.c      **** 			  break;
 5831              		.loc 1 595 0
 5832 2e7c A080D4E5 		ldrb	r8, [r4, #160]	@ zero_extendqisi2
 5833              	.LVL655:
 5834 2e80 9F0300EA 		b	.L652
 5835              	.L502:
 5836              	.LVL656:
 5837              	.L474:
 5838              	.LBE218:
 5839              	.LBE217:
2277:../uvc.c      **** 			break;
 5840              		.loc 1 2277 0
 5841 2e84 0600A0E3 		mov	r0, #6
 5842 2e88 FEFFFFEB 		bl	ControlHandle
 5843              	.LVL657:
 5844 2e8c 28309DE5 		ldr	r3, [sp, #40]
 5845 2e90 7AFEFFEA 		b	.L458
 5846              	.LVL658:
 5847              	.L702:
 5848              	.LBE231:
 5849              	.LBE396:
 5850              	.LBB397:
 5851              	.LBB382:
2869:../uvc.c      **** 					{
 5852              		.loc 1 2869 0
 5853 2e94 FEFFFFEB 		bl	CyU3PUsbGetSpeed
 5854              	.LVL659:
 5855 2e98 020050E3 		cmp	r0, #2
 5856 2e9c EE02000A 		beq	.L914
2876:../uvc.c      **** 					}
 5857              		.loc 1 2876 0
 5858 2ea0 6C189FE5 		ldr	r1, .L927+40
 5859 2ea4 0400A0E3 		mov	r0, #4
 5860 2ea8 FEFFFFEB 		bl	CyU3PDebugPrint
 5861              	.LVL660:
 5862 2eac 75FFFFEA 		b	.L704
 5863              	.LVL661:
 5864              	.L467:
 5865              	.LBE382:
 5866              	.LBE397:
 5867              	.LBB398:
 5868              	.LBB232:
2262:../uvc.c      **** 			break;
 5869              		.loc 1 2262 0
 5870 2eb0 0200A0E3 		mov	r0, #2
 5871 2eb4 FEFFFFEB 		bl	ControlHandle
 5872              	.LVL662:
 5873 2eb8 28309DE5 		ldr	r3, [sp, #40]
 5874 2ebc 6FFEFFEA 		b	.L458
 5875              	.L528:
 5876              	.LVL663:
 5877              	.LBE232:
 5878              	.LBE398:
 5879              	.LBB399:
 5880              	.LBB362:
2492:../uvc.c      **** 			break;
 5881              		.loc 1 2492 0
 5882 2ec0 2500A0E3 		mov	r0, #37
 5883 2ec4 FEFFFFEB 		bl	ControlHandle
 5884              	.LVL664:
 5885 2ec8 28309DE5 		ldr	r3, [sp, #40]
 5886 2ecc 6BFEFFEA 		b	.L458
 5887              	.L624:
 5888              	.L523:
 5889              	.LVL665:
 5890              	.LBB271:
 5891              	.LBB272:
 415:../uvc.c      ****     /*
 5892              		.loc 1 415 0
 5893 2ed0 2C289FE5 		ldr	r2, .L927+24
 409:../uvc.c      ****     }
 5894              		.loc 1 409 0
 5895 2ed4 2284DBE5 		ldrb	r8, [fp, #1058]	@ zero_extendqisi2
 5896              	.LVL666:
 415:../uvc.c      ****     /*
 5897              		.loc 1 415 0
 5898 2ed8 0070D2E5 		ldrb	r7, [r2]	@ zero_extendqisi2
 5899              	.LVL667:
 423:../uvc.c      **** 		 {
 5900              		.loc 1 423 0
 5901 2edc 830057E3 		cmp	r7, #131
 5902 2ee0 DA05000A 		beq	.L630
 5903 2ee4 9003009A 		bls	.L915
 5904 2ee8 850057E3 		cmp	r7, #133
 5905 2eec D205000A 		beq	.L635
 5906 2ef0 C305003A 		bcc	.L636
 5907 2ef4 860057E3 		cmp	r7, #134
 5908 2ef8 B805000A 		beq	.L637
 5909 2efc 870057E3 		cmp	r7, #135
 654:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][12];
 5910              		.loc 1 654 0
 5911 2f00 2B24DB05 		ldreqb	r2, [fp, #1067]	@ zero_extendqisi2
 655:../uvc.c      **** 			 }
 5912              		.loc 1 655 0
 5913 2f04 2C34DB05 		ldreqb	r3, [fp, #1068]	@ zero_extendqisi2
 423:../uvc.c      **** 		 {
 5914              		.loc 1 423 0
 5915 2f08 AC05001A 		bne	.L629
 5916              	.L873:
 594:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 5917              		.loc 1 594 0
 5918 2f0c 44189FE5 		ldr	r1, .L927+108
 5919 2f10 0800A0E1 		mov	r0, r8
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 5920              		.loc 1 591 0
 5921 2f14 A020C4E5 		strb	r2, [r4, #160]
 5922              	.L872:
 592:../uvc.c      **** 			 }
 5923              		.loc 1 592 0
 5924 2f18 A130C4E5 		strb	r3, [r4, #161]
 594:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 5925              		.loc 1 594 0
 5926 2f1c FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 5927              	.LVL668:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 5928              		.loc 1 411 0
 5929 2f20 FF10A0E3 		mov	r1, #255
 5930 2f24 0130A0E1 		mov	r3, r1
 595:../uvc.c      **** 			  break;
 5931              		.loc 1 595 0
 5932 2f28 A060D4E5 		ldrb	r6, [r4, #160]	@ zero_extendqisi2
 5933              	.LVL669:
 5934 2f2c 960300EA 		b	.L639
 5935              	.LVL670:
 5936              	.L522:
 5937              	.LBE272:
 5938              	.LBE271:
 5939              	.LBB276:
 5940              	.LBB277:
 415:../uvc.c      ****     /*
 5941              		.loc 1 415 0
 5942 2f30 CC379FE5 		ldr	r3, .L927+24
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 5943              		.loc 1 406 0
 5944 2f34 F0C3DBE5 		ldrb	ip, [fp, #1008]	@ zero_extendqisi2
 415:../uvc.c      ****     /*
 5945              		.loc 1 415 0
 5946 2f38 0070D3E5 		ldrb	r7, [r3]	@ zero_extendqisi2
 407:../uvc.c      **** 		devAdd = CtrlParArry[CtrlID][15];
 5947              		.loc 1 407 0
 5948 2f3c F133DBE5 		ldrb	r3, [fp, #1009]	@ zero_extendqisi2
 423:../uvc.c      **** 		 {
 5949              		.loc 1 423 0
 5950 2f40 830057E3 		cmp	r7, #131
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 5951              		.loc 1 406 0
 5952 2f44 18C08DE5 		str	ip, [sp, #24]
 5953              	.LVL671:
 407:../uvc.c      **** 		devAdd = CtrlParArry[CtrlID][15];
 5954              		.loc 1 407 0
 5955 2f48 1C308DE5 		str	r3, [sp, #28]
 5956              	.LVL672:
 408:../uvc.c      **** 		Len = CtrlParArry[CtrlID][2];
 5957              		.loc 1 408 0
 5958 2f4c FF83DBE5 		ldrb	r8, [fp, #1023]	@ zero_extendqisi2
 5959              	.LVL673:
 409:../uvc.c      ****     }
 5960              		.loc 1 409 0
 5961 2f50 F263DBE5 		ldrb	r6, [fp, #1010]	@ zero_extendqisi2
 5962              	.LVL674:
 423:../uvc.c      **** 		 {
 5963              		.loc 1 423 0
 5964 2f54 9605000A 		beq	.L615
 5965 2f58 C402009A 		bls	.L916
 5966 2f5c 850057E3 		cmp	r7, #133
 5967 2f60 4606000A 		beq	.L648
 5968 2f64 8F05003A 		bcc	.L621
 5969 2f68 860057E3 		cmp	r7, #134
 5970 2f6c 8B05000A 		beq	.L622
 5971 2f70 870057E3 		cmp	r7, #135
 654:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][12];
 5972              		.loc 1 654 0
 5973 2f74 FB23DB05 		ldreqb	r2, [fp, #1019]	@ zero_extendqisi2
 655:../uvc.c      **** 			 }
 5974              		.loc 1 655 0
 5975 2f78 FC33DB05 		ldreqb	r3, [fp, #1020]	@ zero_extendqisi2
 423:../uvc.c      **** 		 {
 5976              		.loc 1 423 0
 5977 2f7c A9FEFF0A 		beq	.L875
 5978 2f80 62FFFFEA 		b	.L642
 5979              	.LVL675:
 5980              	.L902:
 5981              	.LBE277:
 5982              	.LBE276:
 5983              	.LBE362:
 5984              	.LBE399:
 5985              	.LBB400:
 5986              	.LBB383:
2955:../uvc.c      **** 					if (status != CY_U3P_SUCCESS)
 5987              		.loc 1 2955 0
 5988 2f84 2000A0E3 		mov	r0, #32
 5989 2f88 00208DE0 		add	r2, sp, r0
 5990 2f8c 84179FE5 		ldr	r1, .L927+44
 5991 2f90 FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 5992              	.LVL676:
2956:../uvc.c      **** 					{
 5993              		.loc 1 2956 0
 5994 2f94 002050E2 		subs	r2, r0, #0
 5995 2f98 7C05001A 		bne	.L917
 5996              	.LVL677:
 5997              	.L723:
2961:../uvc.c      **** 					{
 5998              		.loc 1 2961 0
 5999 2f9c B032DDE1 		ldrh	r3, [sp, #32]
 6000 2fa0 0B0053E3 		cmp	r3, #11
 6001 2fa4 2806008A 		bhi	.L885
2968:../uvc.c      **** 						{
 6002              		.loc 1 2968 0
 6003 2fa8 48079FE5 		ldr	r0, .L927+12
 6004 2fac B030D0E1 		ldrh	r3, [r0]
 6005 2fb0 030C53E3 		cmp	r3, #768
 6006 2fb4 0100000A 		beq	.L726
2973:../uvc.c      **** 						{
 6007              		.loc 1 2973 0
 6008 2fb8 010B53E3 		cmp	r3, #1024
 6009 2fbc DAFEFF1A 		bne	.L884
 6010              	.L726:
2970:../uvc.c      **** 						}
 6011              		.loc 1 2970 0
 6012 2fc0 50179FE5 		ldr	r1, .L927+44
 6013 2fc4 28309DE5 		ldr	r3, [sp, #40]
 6014 2fc8 0120D1E5 		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 6015 2fcc 1926CBE5 		strb	r2, [fp, #1561]
 6016 2fd0 35FEFFEA 		b	.L698
 6017              	.LVL678:
 6018              	.L901:
2904:../uvc.c      **** 						glCommitCtrl, &readCount);
 6019              		.loc 1 2904 0
 6020 2fd4 2000A0E3 		mov	r0, #32
 6021 2fd8 00208DE0 		add	r2, sp, r0
 6022 2fdc 6C179FE5 		ldr	r1, .L927+100
 6023 2fe0 FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 6024              	.LVL679:
2906:../uvc.c      **** 					{
 6025              		.loc 1 2906 0
 6026 2fe4 002050E2 		subs	r2, r0, #0
 6027 2fe8 0200000A 		beq	.L713
2908:../uvc.c      **** 					}
 6028              		.loc 1 2908 0
 6029 2fec 0400A0E3 		mov	r0, #4
 6030              	.LVL680:
 6031 2ff0 5C179FE5 		ldr	r1, .L927+104
 6032 2ff4 FEFFFFEB 		bl	CyU3PDebugPrint
 6033              	.LVL681:
 6034              	.L713:
2911:../uvc.c      **** 					{
 6035              		.loc 1 2911 0
 6036 2ff8 B032DDE1 		ldrh	r3, [sp, #32]
 6037 2ffc 1A0053E3 		cmp	r3, #26
 6038 3000 1106008A 		bhi	.L885
2918:../uvc.c      **** 						{
 6039              		.loc 1 2918 0
 6040 3004 EC069FE5 		ldr	r0, .L927+12
 6041 3008 B030D0E1 		ldrh	r3, [r0]
 6042 300c 010C53E3 		cmp	r3, #256
 6043 3010 5905000A 		beq	.L918
2923:../uvc.c      **** 						{
 6044              		.loc 1 2923 0
 6045 3014 020C53E3 		cmp	r3, #512
 6046 3018 C3FEFF1A 		bne	.L884
2926:../uvc.c      **** 							{
 6047              		.loc 1 2926 0
 6048 301c D420D4E5 		ldrb	r2, [r4, #212]	@ zero_extendqisi2
 6049 3020 000052E3 		cmp	r2, #0
 6050 3024 0400000A 		beq	.L717
 6051 3028 20379FE5 		ldr	r3, .L927+100
 6052 302c 0310D3E5 		ldrb	r1, [r3, #3]	@ zero_extendqisi2
 6053 3030 1836DBE5 		ldrb	r3, [fp, #1560]	@ zero_extendqisi2
 6054 3034 030051E1 		cmp	r1, r3
 6055 3038 BBFEFF0A 		beq	.L884
 6056              	.L717:
2929:../uvc.c      **** 								glCurrentFrameIndex = glCommitCtrl[3];
 6057              		.loc 1 2929 0
 6058 303c 0CC79FE5 		ldr	ip, .L927+100
2938:../uvc.c      **** 								{
 6059              		.loc 1 2938 0
 6060 3040 C41094E5 		ldr	r1, [r4, #196]
2929:../uvc.c      **** 								glCurrentFrameIndex = glCommitCtrl[3];
 6061              		.loc 1 2929 0
 6062 3044 0330DCE5 		ldrb	r3, [ip, #3]	@ zero_extendqisi2
2928:../uvc.c      **** 								glcheckframe = glCommitCtrl[3];
 6063              		.loc 1 2928 0
 6064 3048 012082E2 		add	r2, r2, #1
 6065 304c FF2002E2 		and	r2, r2, #255
2938:../uvc.c      **** 								{
 6066              		.loc 1 2938 0
 6067 3050 000051E3 		cmp	r1, #0
2932:../uvc.c      **** 
 6068              		.loc 1 2932 0
 6069 3054 0110A0E3 		mov	r1, #1
2928:../uvc.c      **** 								glcheckframe = glCommitCtrl[3];
 6070              		.loc 1 2928 0
 6071 3058 D420C4E5 		strb	r2, [r4, #212]
2929:../uvc.c      **** 								glCurrentFrameIndex = glCommitCtrl[3];
 6072              		.loc 1 2929 0
 6073 305c 1836CBE5 		strb	r3, [fp, #1560]
2930:../uvc.c      **** 								glFrameIndexToSet = glCurrentFrameIndex;
 6074              		.loc 1 2930 0
 6075 3060 9034CBE5 		strb	r3, [fp, #1168]
2931:../uvc.c      **** 								glPreviewStarted = CyTrue;
 6076              		.loc 1 2931 0
 6077 3064 8830C4E5 		strb	r3, [r4, #136]
2932:../uvc.c      **** 
 6078              		.loc 1 2932 0
 6079 3068 D01084E5 		str	r1, [r4, #208]
2938:../uvc.c      **** 								{
 6080              		.loc 1 2938 0
 6081 306c 2200000A 		beq	.L719
2940:../uvc.c      **** 										glIsClearFeature = CyFalse;
 6082              		.loc 1 2940 0
 6083 3070 012072E2 		rsbs	r2, r2, #1
 6084 3074 0020A033 		movcc	r2, #0
 6085              	.LBB377:
 6086              	.LBB378:
1118:../uvc.c      **** 
 6087              		.loc 1 1118 0
 6088 3078 0030A0E3 		mov	r3, #0
1135:../uvc.c      ****     CyU3PBusyWait (100);
 6089              		.loc 1 1135 0
 6090 307c 8300A0E3 		mov	r0, #131
 6091 3080 CC2085E5 		str	r2, [r5, #204]
 6092              	.LVL682:
1118:../uvc.c      **** 
 6093              		.loc 1 1118 0
 6094 3084 C43085E5 		str	r3, [r5, #196]
1135:../uvc.c      ****     CyU3PBusyWait (100);
 6095              		.loc 1 1135 0
 6096 3088 FEFFFFEB 		bl	CyU3PUsbSetEpNak
 6097              	.LVL683:
1136:../uvc.c      **** 
 6098              		.loc 1 1136 0
 6099 308c 6400A0E3 		mov	r0, #100
 6100 3090 FEFFFFEB 		bl	CyFx3BusyWait
 6101              	.LVL684:
1140:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 6102              		.loc 1 1140 0
 6103 3094 80069FE5 		ldr	r0, .L927+48
 6104 3098 FEFFFFEB 		bl	CyU3PDmaMultiChannelReset
 6105              	.LVL685:
1141:../uvc.c      ****     {
 6106              		.loc 1 1141 0
 6107 309c 002050E2 		subs	r2, r0, #0
 6108 30a0 C703001A 		bne	.L919
 6109              	.LVL686:
 6110              	.L720:
1145:../uvc.c      **** 
 6111              		.loc 1 1145 0
 6112 30a4 1900A0E3 		mov	r0, #25
 6113 30a8 FEFFFFEB 		bl	_tx_thread_sleep
 6114              	.LVL687:
1148:../uvc.c      ****     /* Clear the stall condition and sequence numbers if ClearFeature. */
 6115              		.loc 1 1148 0
 6116 30ac 8300A0E3 		mov	r0, #131
 6117 30b0 FEFFFFEB 		bl	CyU3PUsbFlushEp
 6118              	.LVL688:
1150:../uvc.c      ****     {
 6119              		.loc 1 1150 0
 6120 30b4 CC3094E5 		ldr	r3, [r4, #204]
 6121 30b8 000053E3 		cmp	r3, #0
 6122 30bc 0500000A 		beq	.L721
1152:../uvc.c      ****         glIsClearFeature = CyFalse;
 6123              		.loc 1 1152 0
 6124 30c0 8300A0E3 		mov	r0, #131
 6125 30c4 0010A0E3 		mov	r1, #0
 6126 30c8 0120A0E3 		mov	r2, #1
 6127 30cc FEFFFFEB 		bl	CyU3PUsbStall
 6128              	.LVL689:
1153:../uvc.c      ****     }
 6129              		.loc 1 1153 0
 6130 30d0 0030A0E3 		mov	r3, #0
 6131 30d4 CC3085E5 		str	r3, [r5, #204]
 6132              	.L721:
1155:../uvc.c      **** 	CyU3PBusyWait (200);
 6133              		.loc 1 1155 0
 6134 30d8 0010A0E3 		mov	r1, #0
 6135 30dc 8300A0E3 		mov	r0, #131
 6136 30e0 FEFFFFEB 		bl	CyU3PUsbSetEpNak
 6137              	.LVL690:
1156:../uvc.c      **** 
 6138              		.loc 1 1156 0
 6139 30e4 C800A0E3 		mov	r0, #200
 6140 30e8 FEFFFFEB 		bl	CyFx3BusyWait
 6141              	.LVL691:
1158:../uvc.c      ****     glDmaDone = 0;
 6142              		.loc 1 1158 0
 6143 30ec 0030A0E3 		mov	r3, #0
 6144 30f0 743084E5 		str	r3, [r4, #116]
1159:../uvc.c      **** 
 6145              		.loc 1 1159 0
 6146 30f4 783084E5 		str	r3, [r4, #120]
1162:../uvc.c      **** }
 6147              		.loc 1 1162 0
 6148 30f8 FEFFFFEB 		bl	CyU3PUsbLPMEnable
 6149              	.LVL692:
 6150              	.L719:
 6151              	.LBE378:
 6152              	.LBE377:
2947:../uvc.c      **** 							}
 6153              		.loc 1 2947 0
 6154 30fc FEFFFFEB 		bl	esUVCUvcApplnStart
 6155              	.LVL693:
 6156 3100 28309DE5 		ldr	r3, [sp, #40]
 6157 3104 E8FDFFEA 		b	.L698
 6158              	.L572:
 6159              	.LVL694:
 6160              	.L510:
 6161              	.LBE383:
 6162              	.LBE400:
 6163              	.LBB401:
 6164              	.LBB363:
 6165              	.LBB281:
 6166              	.LBB282:
 415:../uvc.c      ****     /*
 6167              		.loc 1 415 0
 6168 3108 F4359FE5 		ldr	r3, .L927+24
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 6169              		.loc 1 406 0
 6170 310c 48C3DBE5 		ldrb	ip, [fp, #840]	@ zero_extendqisi2
 415:../uvc.c      ****     /*
 6171              		.loc 1 415 0
 6172 3110 0070D3E5 		ldrb	r7, [r3]	@ zero_extendqisi2
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 6173              		.loc 1 406 0
 6174 3114 18C08DE5 		str	ip, [sp, #24]
 6175              	.LVL695:
 423:../uvc.c      **** 		 {
 6176              		.loc 1 423 0
 6177 3118 830057E3 		cmp	r7, #131
 408:../uvc.c      **** 		Len = CtrlParArry[CtrlID][2];
 6178              		.loc 1 408 0
 6179 311c 5783DBE5 		ldrb	r8, [fp, #855]	@ zero_extendqisi2
 6180              	.LVL696:
 409:../uvc.c      ****     }
 6181              		.loc 1 409 0
 6182 3120 4A63DBE5 		ldrb	r6, [fp, #842]	@ zero_extendqisi2
 6183              	.LVL697:
 423:../uvc.c      **** 		 {
 6184              		.loc 1 423 0
 6185 3124 1105000A 		beq	.L576
 6186 3128 9C00009A 		bls	.L920
 6187 312c 850057E3 		cmp	r7, #133
 6188 3130 D205000A 		beq	.L648
 6189 3134 0A05003A 		bcc	.L582
 6190 3138 860057E3 		cmp	r7, #134
 6191 313c 0605000A 		beq	.L583
 6192 3140 870057E3 		cmp	r7, #135
 654:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][12];
 6193              		.loc 1 654 0
 6194 3144 5323D905 		ldreqb	r2, [r9, #851]	@ zero_extendqisi2
 655:../uvc.c      **** 			 }
 6195              		.loc 1 655 0
 6196 3148 5433D905 		ldreqb	r3, [r9, #852]	@ zero_extendqisi2
 423:../uvc.c      **** 		 {
 6197              		.loc 1 423 0
 6198 314c 35FEFF0A 		beq	.L875
 6199 3150 EEFEFFEA 		b	.L642
 6200              	.LVL698:
 6201              	.L905:
 6202              	.LBE282:
 6203              	.LBE281:
2420:../uvc.c      **** 		{
 6204              		.loc 1 2420 0
 6205 3154 010A53E3 		cmp	r3, #4096
 6206 3158 0BFEFF1A 		bne	.L459
 6207              	.LVL699:
 6208              	.LBB286:
 6209              	.LBB287:
 415:../uvc.c      ****     /*
 6210              		.loc 1 415 0
 6211 315c A0359FE5 		ldr	r3, .L927+24
 409:../uvc.c      ****     }
 6212              		.loc 1 409 0
 6213 3160 6A64DBE5 		ldrb	r6, [fp, #1130]	@ zero_extendqisi2
 6214              	.LVL700:
 415:../uvc.c      ****     /*
 6215              		.loc 1 415 0
 6216 3164 00A0D3E5 		ldrb	r10, [r3]	@ zero_extendqisi2
 6217              	.LVL701:
 423:../uvc.c      **** 		 {
 6218              		.loc 1 423 0
 6219 3168 83005AE3 		cmp	r10, #131
 6220 316c F704000A 		beq	.L656
 6221 3170 7901009A 		bls	.L921
 6222 3174 85005AE3 		cmp	r10, #133
 6223 3178 EE04000A 		beq	.L661
 6224 317c DE04003A 		bcc	.L662
 6225 3180 86005AE3 		cmp	r10, #134
 6226 3184 D204000A 		beq	.L663
 6227 3188 87005AE3 		cmp	r10, #135
 654:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][12];
 6228              		.loc 1 654 0
 6229 318c 7324DB05 		ldreqb	r2, [fp, #1139]	@ zero_extendqisi2
 655:../uvc.c      **** 			 }
 6230              		.loc 1 655 0
 6231 3190 7434DB05 		ldreqb	r3, [fp, #1140]	@ zero_extendqisi2
 423:../uvc.c      **** 		 {
 6232              		.loc 1 423 0
 6233 3194 C504001A 		bne	.L655
 6234              	.L877:
 594:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 6235              		.loc 1 594 0
 6236 3198 B8159FE5 		ldr	r1, .L927+108
 6237 319c 0600A0E1 		mov	r0, r6
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 6238              		.loc 1 411 0
 6239 31a0 FF70A0E3 		mov	r7, #255
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 6240              		.loc 1 591 0
 6241 31a4 A020C4E5 		strb	r2, [r4, #160]
 6242              	.L876:
 592:../uvc.c      **** 			 }
 6243              		.loc 1 592 0
 6244 31a8 A130C4E5 		strb	r3, [r4, #161]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 6245              		.loc 1 411 0
 6246 31ac 0780A0E1 		mov	r8, r7
 594:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 6247              		.loc 1 594 0
 6248 31b0 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 6249              	.LVL702:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 6250              		.loc 1 411 0
 6251 31b4 0730A0E1 		mov	r3, r7
 595:../uvc.c      **** 			  break;
 6252              		.loc 1 595 0
 6253 31b8 A0C0D4E5 		ldrb	ip, [r4, #160]	@ zero_extendqisi2
 6254              	.LVL703:
 6255 31bc 990300EA 		b	.L665
 6256              	.L598:
 6257              	.LVL704:
 6258              	.L518:
 6259              	.LBE287:
 6260              	.LBE286:
2448:../uvc.c      **** 			break;
 6261              		.loc 1 2448 0
 6262 31c0 1600A0E3 		mov	r0, #22
 6263 31c4 FEFFFFEB 		bl	ControlHandle
 6264              	.LVL705:
 6265 31c8 28309DE5 		ldr	r3, [sp, #40]
 6266 31cc ABFDFFEA 		b	.L458
 6267              	.L559:
 6268              	.L513:
 6269              	.LVL706:
 6270              	.LBB291:
 6271              	.LBB292:
 415:../uvc.c      ****     /*
 6272              		.loc 1 415 0
 6273 31d0 2C359FE5 		ldr	r3, .L927+24
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 6274              		.loc 1 406 0
 6275 31d4 30C3DBE5 		ldrb	ip, [fp, #816]	@ zero_extendqisi2
 415:../uvc.c      ****     /*
 6276              		.loc 1 415 0
 6277 31d8 0070D3E5 		ldrb	r7, [r3]	@ zero_extendqisi2
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 6278              		.loc 1 406 0
 6279 31dc 18C08DE5 		str	ip, [sp, #24]
 6280              	.LVL707:
 423:../uvc.c      **** 		 {
 6281              		.loc 1 423 0
 6282 31e0 830057E3 		cmp	r7, #131
 408:../uvc.c      **** 		Len = CtrlParArry[CtrlID][2];
 6283              		.loc 1 408 0
 6284 31e4 3F83DBE5 		ldrb	r8, [fp, #831]	@ zero_extendqisi2
 6285              	.LVL708:
 409:../uvc.c      ****     }
 6286              		.loc 1 409 0
 6287 31e8 3263DBE5 		ldrb	r6, [fp, #818]	@ zero_extendqisi2
 6288              	.LVL709:
 423:../uvc.c      **** 		 {
 6289              		.loc 1 423 0
 6290 31ec AC04000A 		beq	.L563
 6291 31f0 4C02009A 		bls	.L922
 6292 31f4 850057E3 		cmp	r7, #133
 6293 31f8 A005000A 		beq	.L648
 6294 31fc A504003A 		bcc	.L569
 6295 3200 860057E3 		cmp	r7, #134
 6296 3204 A104000A 		beq	.L570
 6297 3208 870057E3 		cmp	r7, #135
 654:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][12];
 6298              		.loc 1 654 0
 6299 320c 3B23DB05 		ldreqb	r2, [fp, #827]	@ zero_extendqisi2
 655:../uvc.c      **** 			 }
 6300              		.loc 1 655 0
 6301 3210 3C33DB05 		ldreqb	r3, [fp, #828]	@ zero_extendqisi2
 423:../uvc.c      **** 		 {
 6302              		.loc 1 423 0
 6303 3214 03FEFF0A 		beq	.L875
 6304 3218 BCFEFFEA 		b	.L642
 6305              	.L540:
 6306              	.LVL710:
 6307              	.L512:
 6308              	.LBE292:
 6309              	.LBE291:
 6310              	.LBB296:
 6311              	.LBB297:
 415:../uvc.c      ****     /*
 6312              		.loc 1 415 0
 6313 321c E0349FE5 		ldr	r3, .L927+24
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 6314              		.loc 1 406 0
 6315 3220 18C3DBE5 		ldrb	ip, [fp, #792]	@ zero_extendqisi2
 415:../uvc.c      ****     /*
 6316              		.loc 1 415 0
 6317 3224 0070D3E5 		ldrb	r7, [r3]	@ zero_extendqisi2
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 6318              		.loc 1 406 0
 6319 3228 18C08DE5 		str	ip, [sp, #24]
 6320              	.LVL711:
 423:../uvc.c      **** 		 {
 6321              		.loc 1 423 0
 6322 322c 830057E3 		cmp	r7, #131
 408:../uvc.c      **** 		Len = CtrlParArry[CtrlID][2];
 6323              		.loc 1 408 0
 6324 3230 2783DBE5 		ldrb	r8, [fp, #807]	@ zero_extendqisi2
 6325              	.LVL712:
 409:../uvc.c      ****     }
 6326              		.loc 1 409 0
 6327 3234 1A63DBE5 		ldrb	r6, [fp, #794]	@ zero_extendqisi2
 6328              	.LVL713:
 423:../uvc.c      **** 		 {
 6329              		.loc 1 423 0
 6330 3238 9104000A 		beq	.L550
 6331 323c 9401009A 		bls	.L923
 6332 3240 850057E3 		cmp	r7, #133
 6333 3244 8D05000A 		beq	.L648
 6334 3248 8A04003A 		bcc	.L556
 6335 324c 860057E3 		cmp	r7, #134
 6336 3250 8604000A 		beq	.L557
 6337 3254 870057E3 		cmp	r7, #135
 654:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][12];
 6338              		.loc 1 654 0
 6339 3258 2323DB05 		ldreqb	r2, [fp, #803]	@ zero_extendqisi2
 655:../uvc.c      **** 			 }
 6340              		.loc 1 655 0
 6341 325c 2433DB05 		ldreqb	r3, [fp, #804]	@ zero_extendqisi2
 423:../uvc.c      **** 		 {
 6342              		.loc 1 423 0
 6343 3260 F0FDFF0A 		beq	.L875
 6344 3264 A9FEFFEA 		b	.L642
 6345              	.L611:
 6346              	.LVL714:
 6347              	.L508:
 6348              	.LBE297:
 6349              	.LBE296:
2456:../uvc.c      **** 			break;
 6350              		.loc 1 2456 0
 6351 3268 1800A0E3 		mov	r0, #24
 6352 326c FEFFFFEB 		bl	ControlHandle
 6353              	.LVL715:
 6354 3270 28309DE5 		ldr	r3, [sp, #40]
 6355 3274 81FDFFEA 		b	.L458
 6356              	.L520:
 6357              	.LVL716:
 6358              	.LBB301:
 6359              	.LBB250:
 415:../uvc.c      ****     /*
 6360              		.loc 1 415 0
 6361 3278 84349FE5 		ldr	r3, .L927+24
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 6362              		.loc 1 406 0
 6363 327c 50C4DBE5 		ldrb	ip, [fp, #1104]	@ zero_extendqisi2
 415:../uvc.c      ****     /*
 6364              		.loc 1 415 0
 6365 3280 0070D3E5 		ldrb	r7, [r3]	@ zero_extendqisi2
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 6366              		.loc 1 406 0
 6367 3284 18C08DE5 		str	ip, [sp, #24]
 6368              	.LVL717:
 423:../uvc.c      **** 		 {
 6369              		.loc 1 423 0
 6370 3288 830057E3 		cmp	r7, #131
 408:../uvc.c      **** 		Len = CtrlParArry[CtrlID][2];
 6371              		.loc 1 408 0
 6372 328c 5F84DBE5 		ldrb	r8, [fp, #1119]	@ zero_extendqisi2
 6373              	.LVL718:
 409:../uvc.c      ****     }
 6374              		.loc 1 409 0
 6375 3290 5264DBE5 		ldrb	r6, [fp, #1106]	@ zero_extendqisi2
 6376              	.LVL719:
 423:../uvc.c      **** 		 {
 6377              		.loc 1 423 0
 6378 3294 7204000A 		beq	.L643
 6379 3298 6100009A 		bls	.L924
 6380 329c 850057E3 		cmp	r7, #133
 6381 32a0 7605000A 		beq	.L648
 6382 32a4 6B04003A 		bcc	.L649
 6383 32a8 860057E3 		cmp	r7, #134
 6384 32ac 6704000A 		beq	.L650
 6385 32b0 870057E3 		cmp	r7, #135
 654:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][12];
 6386              		.loc 1 654 0
 6387 32b4 5B24D905 		ldreqb	r2, [r9, #1115]	@ zero_extendqisi2
 655:../uvc.c      **** 			 }
 6388              		.loc 1 655 0
 6389 32b8 5C34D905 		ldreqb	r3, [r9, #1116]	@ zero_extendqisi2
 423:../uvc.c      **** 		 {
 6390              		.loc 1 423 0
 6391 32bc D9FDFF0A 		beq	.L875
 6392 32c0 92FEFFEA 		b	.L642
 6393              	.LVL720:
 6394              	.L525:
 6395              	.LBE250:
 6396              	.LBE301:
 6397              	.LBB302:
 6398              	.LBB303:
 415:../uvc.c      ****     /*
 6399              		.loc 1 415 0
 6400 32c4 38C49FE5 		ldr	ip, .L927+24
 401:../uvc.c      ****         RegAdd1 = ExUCtrlParArry[locCtrlID][1];
 6401              		.loc 1 401 0
 6402 32c8 6030DBE5 		ldrb	r3, [fp, #96]	@ zero_extendqisi2
 415:../uvc.c      ****     /*
 6403              		.loc 1 415 0
 6404 32cc 0070DCE5 		ldrb	r7, [ip]	@ zero_extendqisi2
 402:../uvc.c      ****         devAdd = ExUCtrlParArry[locCtrlID][15];
 6405              		.loc 1 402 0
 6406 32d0 61C0DBE5 		ldrb	ip, [fp, #97]	@ zero_extendqisi2
 423:../uvc.c      **** 		 {
 6407              		.loc 1 423 0
 6408 32d4 830057E3 		cmp	r7, #131
 401:../uvc.c      ****         RegAdd1 = ExUCtrlParArry[locCtrlID][1];
 6409              		.loc 1 401 0
 6410 32d8 18308DE5 		str	r3, [sp, #24]
 6411              	.LVL721:
 402:../uvc.c      ****         devAdd = ExUCtrlParArry[locCtrlID][15];
 6412              		.loc 1 402 0
 6413 32dc 1CC08DE5 		str	ip, [sp, #28]
 6414              	.LVL722:
 403:../uvc.c      ****         Len = ExUCtrlParArry[locCtrlID][2];
 6415              		.loc 1 403 0
 6416 32e0 6FA0DBE5 		ldrb	r10, [fp, #111]	@ zero_extendqisi2
 6417              	.LVL723:
 404:../uvc.c      ****     }else{
 6418              		.loc 1 404 0
 6419 32e4 6220DBE5 		ldrb	r2, [fp, #98]	@ zero_extendqisi2
 6420              	.LVL724:
 423:../uvc.c      **** 		 {
 6421              		.loc 1 423 0
 6422 32e8 5504000A 		beq	.L675
 6423 32ec AE00009A 		bls	.L925
 6424 32f0 850057E3 		cmp	r7, #133
 6425 32f4 4C04000A 		beq	.L680
 6426 32f8 3C04003A 		bcc	.L681
 6427 32fc 860057E3 		cmp	r7, #134
 6428 3300 3004000A 		beq	.L682
 6429 3304 870057E3 		cmp	r7, #135
 644:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][12];
 6430              		.loc 1 644 0
 6431 3308 6BC0DB05 		ldreqb	ip, [fp, #107]	@ zero_extendqisi2
 645:../uvc.c      **** 		 	 }
 6432              		.loc 1 645 0
 6433 330c 6C30DB05 		ldreqb	r3, [fp, #108]	@ zero_extendqisi2
 423:../uvc.c      **** 		 {
 6434              		.loc 1 423 0
 6435 3310 2304001A 		bne	.L674
 6436              	.L879:
 594:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 6437              		.loc 1 594 0
 6438 3314 3C149FE5 		ldr	r1, .L927+108
 6439 3318 0200A0E1 		mov	r0, r2
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 6440              		.loc 1 411 0
 6441 331c FFA0A0E3 		mov	r10, #255
 580:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][4];
 6442              		.loc 1 580 0
 6443 3320 A0C0C4E5 		strb	ip, [r4, #160]
 6444              	.L878:
 581:../uvc.c      **** 		 	 }
 6445              		.loc 1 581 0
 6446 3324 A130C4E5 		strb	r3, [r4, #161]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 6447              		.loc 1 411 0
 6448 3328 0A60A0E1 		mov	r6, r10
 594:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 6449              		.loc 1 594 0
 6450 332c FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 6451              	.LVL725:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 6452              		.loc 1 411 0
 6453 3330 0AC0A0E1 		mov	ip, r10
 595:../uvc.c      **** 			  break;
 6454              		.loc 1 595 0
 6455 3334 A030D4E5 		ldrb	r3, [r4, #160]	@ zero_extendqisi2
 6456              	.LVL726:
 6457 3338 9D0300EA 		b	.L684
 6458              	.LVL727:
 6459              	.L897:
 6460              	.LBE303:
 6461              	.LBE302:
2420:../uvc.c      **** 		{
 6462              		.loc 1 2420 0
 6463 333c 050C53E3 		cmp	r3, #1280
 6464 3340 91FDFF1A 		bne	.L459
 6465              	.L585:
 6466              	.LVL728:
2440:../uvc.c      **** 			break;
 6467              		.loc 1 2440 0
 6468 3344 1400A0E3 		mov	r0, #20
 6469 3348 FEFFFFEB 		bl	ControlHandle
 6470              	.LVL729:
 6471 334c 28309DE5 		ldr	r3, [sp, #40]
 6472 3350 4AFDFFEA 		b	.L458
 6473              	.L515:
 6474              	.LVL730:
 6475              	.LBB307:
 6476              	.LBB308:
 415:../uvc.c      ****     /*
 6477              		.loc 1 415 0
 6478 3354 A8339FE5 		ldr	r3, .L927+24
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 6479              		.loc 1 406 0
 6480 3358 78C3DBE5 		ldrb	ip, [fp, #888]	@ zero_extendqisi2
 415:../uvc.c      ****     /*
 6481              		.loc 1 415 0
 6482 335c 0070D3E5 		ldrb	r7, [r3]	@ zero_extendqisi2
 406:../uvc.c      **** 		RegAdd1 = CtrlParArry[CtrlID][1];
 6483              		.loc 1 406 0
 6484 3360 18C08DE5 		str	ip, [sp, #24]
 6485              	.LVL731:
 423:../uvc.c      **** 		 {
 6486              		.loc 1 423 0
 6487 3364 830057E3 		cmp	r7, #131
 408:../uvc.c      **** 		Len = CtrlParArry[CtrlID][2];
 6488              		.loc 1 408 0
 6489 3368 8783DBE5 		ldrb	r8, [fp, #903]	@ zero_extendqisi2
 6490              	.LVL732:
 409:../uvc.c      ****     }
 6491              		.loc 1 409 0
 6492 336c 7A63DBE5 		ldrb	r6, [fp, #890]	@ zero_extendqisi2
 6493              	.LVL733:
 423:../uvc.c      **** 		 {
 6494              		.loc 1 423 0
 6495 3370 0804000A 		beq	.L589
 6496 3374 4C00009A 		bls	.L926
 6497 3378 850057E3 		cmp	r7, #133
 6498 337c 3F05000A 		beq	.L648
 6499 3380 F603003A 		bcc	.L595
 6500 3384 860057E3 		cmp	r7, #134
 6501 3388 EB03000A 		beq	.L596
 6502 338c 870057E3 		cmp	r7, #135
 654:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][12];
 6503              		.loc 1 654 0
 6504 3390 8323DB05 		ldreqb	r2, [fp, #899]	@ zero_extendqisi2
 655:../uvc.c      **** 			 }
 6505              		.loc 1 655 0
 6506 3394 8433DB05 		ldreqb	r3, [fp, #900]	@ zero_extendqisi2
 423:../uvc.c      **** 		 {
 6507              		.loc 1 423 0
 6508 3398 A2FDFF0A 		beq	.L875
 6509 339c 5BFEFFEA 		b	.L642
 6510              	.LVL734:
 6511              	.L920:
 6512              	.LBE308:
 6513              	.LBE307:
 6514              	.LBB314:
 6515              	.LBB283:
 6516 33a0 810057E3 		cmp	r7, #129
 6517 33a4 D903000A 		beq	.L578
 6518 33a8 D503008A 		bhi	.L579
 6519 33ac 010057E3 		cmp	r7, #1
 6520 33b0 56FEFF1A 		bne	.L642
 661:../uvc.c      **** 				  glEp0Buffer, &readCount);
 6521              		.loc 1 661 0
 6522 33b4 2000A0E3 		mov	r0, #32
 6523 33b8 00208DE0 		add	r2, sp, r0
 6524 33bc 94139FE5 		ldr	r1, .L927+108
 6525 33c0 FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 6526              	.LVL735:
 663:../uvc.c      **** 			   {
 6527              		.loc 1 663 0
 6528 33c4 002050E2 		subs	r2, r0, #0
 6529 33c8 C603001A 		bne	.L654
 937:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 6530              		.loc 1 937 0
 6531 33cc 60139FE5 		ldr	r1, .L927+72
 665:../uvc.c      **** 				  Data1 = glEp0Buffer[1];
 6532              		.loc 1 665 0
 6533 33d0 A0A0D5E5 		ldrb	r10, [r5, #160]	@ zero_extendqisi2
 6534              	.LVL736:
 937:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 6535              		.loc 1 937 0
 6536 33d4 1C0091E5 		ldr	r0, [r1, #28]
 6537              	.LVL737:
 6538 33d8 0010E0E3 		mvn	r1, #0
 668:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 6539              		.loc 1 668 0
 6540 33dc A260D5E5 		ldrb	r6, [r5, #162]	@ zero_extendqisi2
 6541              	.LVL738:
 937:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 6542              		.loc 1 937 0
 6543 33e0 10208DE5 		str	r2, [sp, #16]
 6544 33e4 FEFFFFEB 		bl	_txe_mutex_get
 6545              	.LVL739:
 938:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 6546              		.loc 1 938 0
 6547 33e8 10209DE5 		ldr	r2, [sp, #16]
 6548 33ec 0830A0E1 		mov	r3, r8
 6549 33f0 04208DE5 		str	r2, [sp, #4]
 6550 33f4 1310A0E3 		mov	r1, #19
 6551 33f8 18209DE5 		ldr	r2, [sp, #24]
 6552 33fc 00A08DE5 		str	r10, [sp]
 6553 3400 2C039FE5 		ldr	r0, .L927+72
 6554 3404 FEFFFFEB 		bl	cmdSet
 6555              	.LVL740:
 939:../uvc.c      **** 
 6556              		.loc 1 939 0
 6557 3408 24239FE5 		ldr	r2, .L927+72
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 6558              		.loc 1 411 0
 6559 340c FF80A0E3 		mov	r8, #255
 6560              	.LVL741:
 939:../uvc.c      **** 
 6561              		.loc 1 939 0
 6562 3410 1C0092E5 		ldr	r0, [r2, #28]
 6563 3414 FEFFFFEB 		bl	_txe_mutex_put
 6564              	.LVL742:
 941:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 6565              		.loc 1 941 0
 6566 3418 55A3C9E5 		strb	r10, [r9, #853]
 942:../uvc.c      **** 							 break;
 6567              		.loc 1 942 0
 6568 341c 5873C9E5 		strb	r7, [r9, #856]
 6569 3420 370200EA 		b	.L652
 6570              	.LVL743:
 6571              	.L924:
 6572              	.LBE283:
 6573              	.LBE314:
 6574              	.LBB315:
 6575              	.LBB251:
 423:../uvc.c      **** 		 {
 6576              		.loc 1 423 0
 6577 3424 810057E3 		cmp	r7, #129
 6578 3428 A303000A 		beq	.L645
 6579 342c 9F03008A 		bhi	.L646
 6580 3430 010057E3 		cmp	r7, #1
 6581 3434 35FEFF1A 		bne	.L642
 661:../uvc.c      **** 				  glEp0Buffer, &readCount);
 6582              		.loc 1 661 0
 6583 3438 2000A0E3 		mov	r0, #32
 6584 343c 00208DE0 		add	r2, sp, r0
 6585 3440 10139FE5 		ldr	r1, .L927+108
 6586 3444 FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 6587              	.LVL744:
 663:../uvc.c      **** 			   {
 6588              		.loc 1 663 0
 6589 3448 002050E2 		subs	r2, r0, #0
 6590 344c A503001A 		bne	.L654
 759:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 6591              		.loc 1 759 0
 6592 3450 DC129FE5 		ldr	r1, .L927+72
 665:../uvc.c      **** 				  Data1 = glEp0Buffer[1];
 6593              		.loc 1 665 0
 6594 3454 A0A0D5E5 		ldrb	r10, [r5, #160]	@ zero_extendqisi2
 6595              	.LVL745:
 759:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 6596              		.loc 1 759 0
 6597 3458 1C0091E5 		ldr	r0, [r1, #28]
 6598              	.LVL746:
 6599 345c 0010E0E3 		mvn	r1, #0
 668:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 6600              		.loc 1 668 0
 6601 3460 A260D5E5 		ldrb	r6, [r5, #162]	@ zero_extendqisi2
 6602              	.LVL747:
 759:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 6603              		.loc 1 759 0
 6604 3464 10208DE5 		str	r2, [sp, #16]
 6605 3468 FEFFFFEB 		bl	_txe_mutex_get
 6606              	.LVL748:
 760:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 6607              		.loc 1 760 0
 6608 346c 10209DE5 		ldr	r2, [sp, #16]
 6609 3470 01107AE2 		rsbs	r1, r10, #1
 6610 3474 0010A033 		movcc	r1, #0
 6611 3478 0830A0E1 		mov	r3, r8
 6612 347c 04208DE5 		str	r2, [sp, #4]
 6613 3480 00108DE5 		str	r1, [sp]
 6614 3484 18209DE5 		ldr	r2, [sp, #24]
 6615 3488 1E10A0E3 		mov	r1, #30
 6616 348c A0029FE5 		ldr	r0, .L927+72
 6617 3490 FEFFFFEB 		bl	cmdSet
 6618              	.LVL749:
 761:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 6619              		.loc 1 761 0
 6620 3494 98229FE5 		ldr	r2, .L927+72
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 6621              		.loc 1 411 0
 6622 3498 FF80A0E3 		mov	r8, #255
 6623              	.LVL750:
 761:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 6624              		.loc 1 761 0
 6625 349c 1C0092E5 		ldr	r0, [r2, #28]
 6626 34a0 FEFFFFEB 		bl	_txe_mutex_put
 6627              	.LVL751:
 762:../uvc.c      **** 							 break;
 6628              		.loc 1 762 0
 6629 34a4 6074C9E5 		strb	r7, [r9, #1120]
 6630 34a8 150200EA 		b	.L652
 6631              	.LVL752:
 6632              	.L926:
 6633              	.LBE251:
 6634              	.LBE315:
 6635              	.LBB316:
 6636              	.LBB309:
 423:../uvc.c      **** 		 {
 6637              		.loc 1 423 0
 6638 34ac 810057E3 		cmp	r7, #129
 6639 34b0 7303000A 		beq	.L591
 6640 34b4 6F03008A 		bhi	.L592
 6641 34b8 010057E3 		cmp	r7, #1
 6642 34bc 13FEFF1A 		bne	.L642
 661:../uvc.c      **** 				  glEp0Buffer, &readCount);
 6643              		.loc 1 661 0
 6644 34c0 2000A0E3 		mov	r0, #32
 6645 34c4 00208DE0 		add	r2, sp, r0
 6646 34c8 88129FE5 		ldr	r1, .L927+108
 6647 34cc FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 6648              	.LVL753:
 663:../uvc.c      **** 			   {
 6649              		.loc 1 663 0
 6650 34d0 002050E2 		subs	r2, r0, #0
 6651 34d4 8303001A 		bne	.L654
 937:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 6652              		.loc 1 937 0
 6653 34d8 54129FE5 		ldr	r1, .L927+72
 665:../uvc.c      **** 				  Data1 = glEp0Buffer[1];
 6654              		.loc 1 665 0
 6655 34dc A0A0D5E5 		ldrb	r10, [r5, #160]	@ zero_extendqisi2
 6656              	.LVL754:
 937:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 6657              		.loc 1 937 0
 6658 34e0 1C0091E5 		ldr	r0, [r1, #28]
 6659              	.LVL755:
 6660 34e4 0010E0E3 		mvn	r1, #0
 668:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 6661              		.loc 1 668 0
 6662 34e8 A260D5E5 		ldrb	r6, [r5, #162]	@ zero_extendqisi2
 6663              	.LVL756:
 937:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 6664              		.loc 1 937 0
 6665 34ec 10208DE5 		str	r2, [sp, #16]
 6666 34f0 FEFFFFEB 		bl	_txe_mutex_get
 6667              	.LVL757:
 938:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 6668              		.loc 1 938 0
 6669 34f4 10209DE5 		ldr	r2, [sp, #16]
 6670 34f8 0830A0E1 		mov	r3, r8
 6671 34fc 04208DE5 		str	r2, [sp, #4]
 6672 3500 1510A0E3 		mov	r1, #21
 6673 3504 18209DE5 		ldr	r2, [sp, #24]
 6674 3508 00A08DE5 		str	r10, [sp]
 6675 350c 20029FE5 		ldr	r0, .L927+72
 6676 3510 FEFFFFEB 		bl	cmdSet
 6677              	.LVL758:
 939:../uvc.c      **** 
 6678              		.loc 1 939 0
 6679 3514 18229FE5 		ldr	r2, .L927+72
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 6680              		.loc 1 411 0
 6681 3518 FF80A0E3 		mov	r8, #255
 6682              	.LVL759:
 939:../uvc.c      **** 
 6683              		.loc 1 939 0
 6684 351c 1C0092E5 		ldr	r0, [r2, #28]
 6685 3520 FEFFFFEB 		bl	_txe_mutex_put
 6686              	.LVL760:
 942:../uvc.c      **** 							 break;
 6687              		.loc 1 942 0
 6688 3524 0130A0E3 		mov	r3, #1
 941:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 6689              		.loc 1 941 0
 6690 3528 85A3CBE5 		strb	r10, [fp, #901]
 942:../uvc.c      **** 							 break;
 6691              		.loc 1 942 0
 6692 352c 8833CBE5 		strb	r3, [fp, #904]
 6693 3530 F30100EA 		b	.L652
 6694              	.LVL761:
 6695              	.L912:
 6696              	.LBE309:
 6697              	.LBE316:
 6698              	.LBE363:
 6699              	.LBE401:
 6700              	.LBB402:
 6701              	.LBB233:
 6702              	.LBB222:
 6703              	.LBB214:
 423:../uvc.c      **** 		 {
 6704              		.loc 1 423 0
 6705 3534 81005AE3 		cmp	r10, #129
 6706 3538 3D03000A 		beq	.L481
 6707 353c 3903008A 		bhi	.L482
 6708 3540 01005AE3 		cmp	r10, #1
 6709 3544 5204001A 		bne	.L478
 661:../uvc.c      **** 				  glEp0Buffer, &readCount);
 6710              		.loc 1 661 0
 6711 3548 2000A0E3 		mov	r0, #32
 6712 354c 00208DE0 		add	r2, sp, r0
 6713 3550 00129FE5 		ldr	r1, .L927+108
 6714 3554 FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 6715              	.LVL762:
 663:../uvc.c      **** 			   {
 6716              		.loc 1 663 0
 6717 3558 002050E2 		subs	r2, r0, #0
 6718 355c 2603001A 		bne	.L490
 665:../uvc.c      **** 				  Data1 = glEp0Buffer[1];
 6719              		.loc 1 665 0
 6720 3560 A080D5E5 		ldrb	r8, [r5, #160]	@ zero_extendqisi2
 6721              	.LVL763:
 902:../uvc.c      **** 							 //remove for Invendo
 6722              		.loc 1 902 0
 6723 3564 C8319FE5 		ldr	r3, .L927+72
 6724 3568 0010E0E3 		mvn	r1, #0
 6725 356c 1C0093E5 		ldr	r0, [r3, #28]
 6726              	.LVL764:
 896:../uvc.c      **** 							 if(Data0 < 0)  //for specific check. if it's minor value, set to 0.
 6727              		.loc 1 896 0
 6728 3570 013048E2 		sub	r3, r8, #1
 6729 3574 FF3003E2 		and	r3, r3, #255
 900:../uvc.c      **** 
 6730              		.loc 1 900 0
 6731 3578 020053E3 		cmp	r3, #2
 6732 357c 0130A083 		movhi	r3, #1
 668:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 6733              		.loc 1 668 0
 6734 3580 A260D5E5 		ldrb	r6, [r5, #162]	@ zero_extendqisi2
 6735              	.LVL765:
 902:../uvc.c      **** 							 //remove for Invendo
 6736              		.loc 1 902 0
 6737 3584 14308DE5 		str	r3, [sp, #20]
 6738 3588 FEFFFFEB 		bl	_txe_mutex_get
 6739              	.LVL766:
 905:../uvc.c      **** 
 6740              		.loc 1 905 0
 6741 358c A0C19FE5 		ldr	ip, .L927+72
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 6742              		.loc 1 411 0
 6743 3590 FF70A0E3 		mov	r7, #255
 905:../uvc.c      **** 
 6744              		.loc 1 905 0
 6745 3594 1C009CE5 		ldr	r0, [ip, #28]
 6746 3598 FEFFFFEB 		bl	_txe_mutex_put
 6747              	.LVL767:
 907:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 6748              		.loc 1 907 0
 6749 359c 14309DE5 		ldr	r3, [sp, #20]
 908:../uvc.c      **** 							 break;
 6750              		.loc 1 908 0
 6751 35a0 F0A1CBE5 		strb	r10, [fp, #496]
 907:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 6752              		.loc 1 907 0
 6753 35a4 ED31CBE5 		strb	r3, [fp, #493]
 6754 35a8 190300EA 		b	.L488
 6755              	.LVL768:
 6756              	.L925:
 6757              	.LBE214:
 6758              	.LBE222:
 6759              	.LBE233:
 6760              	.LBE402:
 6761              	.LBB403:
 6762              	.LBB364:
 6763              	.LBB317:
 6764              	.LBB304:
 423:../uvc.c      **** 		 {
 6765              		.loc 1 423 0
 6766 35ac 810057E3 		cmp	r7, #129
 6767 35b0 0503000A 		beq	.L677
 6768 35b4 0103008A 		bhi	.L678
 6769 35b8 010057E3 		cmp	r7, #1
 6770 35bc 7803001A 		bne	.L674
 661:../uvc.c      **** 				  glEp0Buffer, &readCount);
 6771              		.loc 1 661 0
 6772 35c0 2000A0E3 		mov	r0, #32
 6773 35c4 00208DE0 		add	r2, sp, r0
 6774 35c8 88119FE5 		ldr	r1, .L927+108
 6775 35cc FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 6776              	.LVL769:
 663:../uvc.c      **** 			   {
 6777              		.loc 1 663 0
 6778 35d0 002050E2 		subs	r2, r0, #0
 6779 35d4 EF02001A 		bne	.L685
 794:../uvc.c      **** 						     /* end test */
 6780              		.loc 1 794 0
 6781 35d8 54119FE5 		ldr	r1, .L927+72
 665:../uvc.c      **** 				  Data1 = glEp0Buffer[1];
 6782              		.loc 1 665 0
 6783 35dc A0C0D5E5 		ldrb	ip, [r5, #160]	@ zero_extendqisi2
 6784              	.LVL770:
 794:../uvc.c      **** 						     /* end test */
 6785              		.loc 1 794 0
 6786 35e0 1C0091E5 		ldr	r0, [r1, #28]
 6787              	.LVL771:
 6788 35e4 0010E0E3 		mvn	r1, #0
 793:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 6789              		.loc 1 793 0
 6790 35e8 7F800CE2 		and	r8, ip, #127
 666:../uvc.c      **** 				  getData = glEp0Buffer[0];
 6791              		.loc 1 666 0
 6792 35ec A160D5E5 		ldrb	r6, [r5, #161]	@ zero_extendqisi2
 6793              	.LVL772:
 794:../uvc.c      **** 						     /* end test */
 6794              		.loc 1 794 0
 6795 35f0 14C08DE5 		str	ip, [sp, #20]
 6796 35f4 10208DE5 		str	r2, [sp, #16]
 6797 35f8 FEFFFFEB 		bl	_txe_mutex_get
 6798              	.LVL773:
 796:../uvc.c      **** 							 dataIdx++;
 6799              		.loc 1 796 0
 6800 35fc 10209DE5 		ldr	r2, [sp, #16]
 6801 3600 0A30A0E1 		mov	r3, r10
 6802 3604 04208DE5 		str	r2, [sp, #4]
 6803 3608 2410A0E3 		mov	r1, #36
 6804 360c 18209DE5 		ldr	r2, [sp, #24]
 6805 3610 00808DE5 		str	r8, [sp]
 6806 3614 18019FE5 		ldr	r0, .L927+72
 6807 3618 FEFFFFEB 		bl	cmdSet
 6808              	.LVL774:
 798:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 6809              		.loc 1 798 0
 6810 361c 0100A0E3 		mov	r0, #1
 6811 3620 0A30A0E1 		mov	r3, r10
 6812 3624 1C209DE5 		ldr	r2, [sp, #28]
 6813 3628 04008DE5 		str	r0, [sp, #4]
 6814 362c 2410A0E3 		mov	r1, #36
 6815 3630 00608DE5 		str	r6, [sp]
 6816 3634 F8009FE5 		ldr	r0, .L927+72
 6817 3638 FEFFFFEB 		bl	cmdSet
 6818              	.LVL775:
 799:../uvc.c      **** 							 getData1 = Data1;
 6819              		.loc 1 799 0
 6820 363c F0109FE5 		ldr	r1, .L927+72
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 6821              		.loc 1 411 0
 6822 3640 FFA0A0E3 		mov	r10, #255
 6823              	.LVL776:
 799:../uvc.c      **** 							 getData1 = Data1;
 6824              		.loc 1 799 0
 6825 3644 1C0091E5 		ldr	r0, [r1, #28]
 6826 3648 FEFFFFEB 		bl	_txe_mutex_put
 6827              	.LVL777:
 804:../uvc.c      **** 							 break;
 6828              		.loc 1 804 0
 6829 364c 0120A0E3 		mov	r2, #1
 802:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][14] = Data1;
 6830              		.loc 1 802 0
 6831 3650 6D80CBE5 		strb	r8, [fp, #109]
 803:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][16] = CyTrue;
 6832              		.loc 1 803 0
 6833 3654 6E60CBE5 		strb	r6, [fp, #110]
 804:../uvc.c      **** 							 break;
 6834              		.loc 1 804 0
 6835 3658 7020CBE5 		strb	r2, [fp, #112]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 6836              		.loc 1 411 0
 6837 365c 0A30A0E1 		mov	r3, r10
 6838 3660 14C09DE5 		ldr	ip, [sp, #20]
 6839 3664 D20200EA 		b	.L684
 6840              	.LVL778:
 6841              	.L898:
 6842              	.LBE304:
 6843              	.LBE317:
 6844              	.LBB318:
 6845              	.LBB243:
 423:../uvc.c      **** 		 {
 6846              		.loc 1 423 0
 6847 3668 810057E3 		cmp	r7, #129
 6848 366c BE02000A 		beq	.L604
 6849 3670 BA02008A 		bhi	.L605
 6850 3674 010057E3 		cmp	r7, #1
 6851 3678 A4FDFF1A 		bne	.L642
 661:../uvc.c      **** 				  glEp0Buffer, &readCount);
 6852              		.loc 1 661 0
 6853 367c 2000A0E3 		mov	r0, #32
 6854 3680 00208DE0 		add	r2, sp, r0
 6855 3684 CC109FE5 		ldr	r1, .L927+108
 6856 3688 FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 6857              	.LVL779:
 663:../uvc.c      **** 			   {
 6858              		.loc 1 663 0
 6859 368c 002050E2 		subs	r2, r0, #0
 6860 3690 1403001A 		bne	.L654
 937:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 6861              		.loc 1 937 0
 6862 3694 98109FE5 		ldr	r1, .L927+72
 665:../uvc.c      **** 				  Data1 = glEp0Buffer[1];
 6863              		.loc 1 665 0
 6864 3698 A0A0D5E5 		ldrb	r10, [r5, #160]	@ zero_extendqisi2
 6865              	.LVL780:
 937:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 6866              		.loc 1 937 0
 6867 369c 1C0091E5 		ldr	r0, [r1, #28]
 6868              	.LVL781:
 6869 36a0 0010E0E3 		mvn	r1, #0
 668:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 6870              		.loc 1 668 0
 6871 36a4 A260D5E5 		ldrb	r6, [r5, #162]	@ zero_extendqisi2
 6872              	.LVL782:
 937:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 6873              		.loc 1 937 0
 6874 36a8 10208DE5 		str	r2, [sp, #16]
 6875 36ac FEFFFFEB 		bl	_txe_mutex_get
 6876              	.LVL783:
 938:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 6877              		.loc 1 938 0
 6878 36b0 10209DE5 		ldr	r2, [sp, #16]
 6879 36b4 0830A0E1 		mov	r3, r8
 6880 36b8 04208DE5 		str	r2, [sp, #4]
 6881 36bc 1710A0E3 		mov	r1, #23
 6882 36c0 18209DE5 		ldr	r2, [sp, #24]
 6883 36c4 00A08DE5 		str	r10, [sp]
 6884 36c8 64009FE5 		ldr	r0, .L927+72
 6885 36cc FEFFFFEB 		bl	cmdSet
 6886              	.LVL784:
 939:../uvc.c      **** 
 6887              		.loc 1 939 0
 6888 36d0 5C209FE5 		ldr	r2, .L927+72
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 6889              		.loc 1 411 0
 6890 36d4 FF80A0E3 		mov	r8, #255
 6891              	.LVL785:
 939:../uvc.c      **** 
 6892              		.loc 1 939 0
 6893 36d8 1C0092E5 		ldr	r0, [r2, #28]
 6894 36dc FEFFFFEB 		bl	_txe_mutex_put
 6895              	.LVL786:
 941:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 6896              		.loc 1 941 0
 6897 36e0 B5A3CBE5 		strb	r10, [fp, #949]
 942:../uvc.c      **** 							 break;
 6898              		.loc 1 942 0
 6899 36e4 B873CBE5 		strb	r7, [fp, #952]
 6900 36e8 850100EA 		b	.L652
 6901              	.L928:
 6902              		.align	2
 6903              	.L927:
 6904 36ec 00000000 		.word	.LANCHOR0
 6905 36f0 00000000 		.word	.LANCHOR1
 6906 36f4 00000000 		.word	wIndex
 6907 36f8 00000000 		.word	wValue
 6908 36fc 00000000 		.word	glInterStaBuffer
 6909 3700 00000000 		.word	glChHandleInterStat
 6910 3704 00000000 		.word	bRequest
 6911 3708 F8070000 		.word	.LC49
 6912 370c DC000000 		.word	.LANCHOR0+220
 6913 3710 2C030000 		.word	.LC19
 6914 3714 10030000 		.word	.LC18
 6915 3718 00000000 		.word	glStillCommitCtrl
 6916 371c 00000000 		.word	glChHandleUVCStream
 6917 3720 24080000 		.word	.LC50
 6918 3724 00000000 		.word	glProbeCtrl
 6919 3728 00000000 		.word	glVga30ProbeCtrl
 6920 372c A4010000 		.word	.LC10
 6921 3730 00000000 		.word	glStillProbeCtrl
 6922 3734 00000000 		.word	cmdQu
 6923 3738 DC000000 		.word	.LC6
 6924 373c 00000000 		.word	.LANCHOR2
 6925 3740 9C020000 		.word	.LC16
 6926 3744 08020000 		.word	.LC13
 6927 3748 14010000 		.word	.LC7
 6928 374c D8010000 		.word	.LC12
 6929 3750 00000000 		.word	glCommitCtrl
 6930 3754 58030000 		.word	.LC20
 6931 3758 A0000000 		.word	.LANCHOR0+160
 6932              	.LVL787:
 6933              	.L921:
 6934              	.LBE243:
 6935              	.LBE318:
 6936              	.LBB319:
 6937              	.LBB288:
 423:../uvc.c      **** 		 {
 6938              		.loc 1 423 0
 6939 375c 81005AE3 		cmp	r10, #129
 6940 3760 3B02000A 		beq	.L658
 6941 3764 3702008A 		bhi	.L659
 6942 3768 01005AE3 		cmp	r10, #1
 6943 376c 4F03001A 		bne	.L655
 661:../uvc.c      **** 				  glEp0Buffer, &readCount);
 6944              		.loc 1 661 0
 6945 3770 2000A0E3 		mov	r0, #32
 6946 3774 00208DE0 		add	r2, sp, r0
 6947 3778 28101FE5 		ldr	r1, .L927+108
 6948 377c FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 6949              	.LVL788:
 663:../uvc.c      **** 			   {
 6950              		.loc 1 663 0
 6951 3780 002050E2 		subs	r2, r0, #0
 6952 3784 2002001A 		bne	.L670
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 6953              		.loc 1 765 0
 6954 3788 000056E3 		cmp	r6, #0
 665:../uvc.c      **** 				  Data1 = glEp0Buffer[1];
 6955              		.loc 1 665 0
 6956 378c A030D5E5 		ldrb	r3, [r5, #160]	@ zero_extendqisi2
 6957              	.LVL789:
 668:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 6958              		.loc 1 668 0
 6959 3790 A280D5E5 		ldrb	r8, [r5, #162]	@ zero_extendqisi2
 6960              	.LVL790:
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 6961              		.loc 1 765 0
 6962 3794 2A00000A 		beq	.L672
 6963 3798 010056E3 		cmp	r6, #1
 766:../uvc.c      **** 					 		 }
 6964              		.loc 1 766 0
 6965 379c 9430C5E5 		strb	r3, [r5, #148]
 6966              	.LVL791:
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 6967              		.loc 1 765 0
 6968 37a0 2700009A 		bls	.L672
 766:../uvc.c      **** 					 		 }
 6969              		.loc 1 766 0
 6970 37a4 A120D5E5 		ldrb	r2, [r5, #161]	@ zero_extendqisi2
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 6971              		.loc 1 765 0
 6972 37a8 020056E3 		cmp	r6, #2
 766:../uvc.c      **** 					 		 }
 6973              		.loc 1 766 0
 6974 37ac 9520C5E5 		strb	r2, [r5, #149]
 6975              	.LVL792:
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 6976              		.loc 1 765 0
 6977 37b0 2300000A 		beq	.L672
 6978 37b4 030056E3 		cmp	r6, #3
 766:../uvc.c      **** 					 		 }
 6979              		.loc 1 766 0
 6980 37b8 9680C5E5 		strb	r8, [r5, #150]
 6981              	.LVL793:
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 6982              		.loc 1 765 0
 6983 37bc 2000000A 		beq	.L672
 766:../uvc.c      **** 					 		 }
 6984              		.loc 1 766 0
 6985 37c0 A320D5E5 		ldrb	r2, [r5, #163]	@ zero_extendqisi2
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 6986              		.loc 1 765 0
 6987 37c4 040056E3 		cmp	r6, #4
 766:../uvc.c      **** 					 		 }
 6988              		.loc 1 766 0
 6989 37c8 9720C5E5 		strb	r2, [r5, #151]
 6990              	.LVL794:
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 6991              		.loc 1 765 0
 6992 37cc 1C00000A 		beq	.L672
 766:../uvc.c      **** 					 		 }
 6993              		.loc 1 766 0
 6994 37d0 A420D5E5 		ldrb	r2, [r5, #164]	@ zero_extendqisi2
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 6995              		.loc 1 765 0
 6996 37d4 050056E3 		cmp	r6, #5
 766:../uvc.c      **** 					 		 }
 6997              		.loc 1 766 0
 6998 37d8 9820C5E5 		strb	r2, [r5, #152]
 6999              	.LVL795:
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 7000              		.loc 1 765 0
 7001 37dc 1800000A 		beq	.L672
 766:../uvc.c      **** 					 		 }
 7002              		.loc 1 766 0
 7003 37e0 A520D5E5 		ldrb	r2, [r5, #165]	@ zero_extendqisi2
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 7004              		.loc 1 765 0
 7005 37e4 060056E3 		cmp	r6, #6
 766:../uvc.c      **** 					 		 }
 7006              		.loc 1 766 0
 7007 37e8 9920C5E5 		strb	r2, [r5, #153]
 7008              	.LVL796:
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 7009              		.loc 1 765 0
 7010 37ec 1400000A 		beq	.L672
 766:../uvc.c      **** 					 		 }
 7011              		.loc 1 766 0
 7012 37f0 A620D4E5 		ldrb	r2, [r4, #166]	@ zero_extendqisi2
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 7013              		.loc 1 765 0
 7014 37f4 070056E3 		cmp	r6, #7
 766:../uvc.c      **** 					 		 }
 7015              		.loc 1 766 0
 7016 37f8 9A20C4E5 		strb	r2, [r4, #154]
 7017              	.LVL797:
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 7018              		.loc 1 765 0
 7019 37fc 1000000A 		beq	.L672
 766:../uvc.c      **** 					 		 }
 7020              		.loc 1 766 0
 7021 3800 A720D5E5 		ldrb	r2, [r5, #167]	@ zero_extendqisi2
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 7022              		.loc 1 765 0
 7023 3804 080056E3 		cmp	r6, #8
 766:../uvc.c      **** 					 		 }
 7024              		.loc 1 766 0
 7025 3808 9B20C5E5 		strb	r2, [r5, #155]
 7026              	.LVL798:
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 7027              		.loc 1 765 0
 7028 380c 0C00000A 		beq	.L672
 766:../uvc.c      **** 					 		 }
 7029              		.loc 1 766 0
 7030 3810 A820D5E5 		ldrb	r2, [r5, #168]	@ zero_extendqisi2
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 7031              		.loc 1 765 0
 7032 3814 090056E3 		cmp	r6, #9
 766:../uvc.c      **** 					 		 }
 7033              		.loc 1 766 0
 7034 3818 9C20C5E5 		strb	r2, [r5, #156]
 7035              	.LVL799:
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 7036              		.loc 1 765 0
 7037 381c 0800000A 		beq	.L672
 766:../uvc.c      **** 					 		 }
 7038              		.loc 1 766 0
 7039 3820 A920D5E5 		ldrb	r2, [r5, #169]	@ zero_extendqisi2
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 7040              		.loc 1 765 0
 7041 3824 0A0056E3 		cmp	r6, #10
 766:../uvc.c      **** 					 		 }
 7042              		.loc 1 766 0
 7043 3828 9D20C5E5 		strb	r2, [r5, #157]
 7044              	.LVL800:
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 7045              		.loc 1 765 0
 7046 382c 0400000A 		beq	.L672
 766:../uvc.c      **** 					 		 }
 7047              		.loc 1 766 0
 7048 3830 AA20D5E5 		ldrb	r2, [r5, #170]	@ zero_extendqisi2
 765:../uvc.c      **** 					 			I2CCMDArry[idx] = glEp0Buffer[idx];
 7049              		.loc 1 765 0
 7050 3834 0B0056E3 		cmp	r6, #11
 766:../uvc.c      **** 					 		 }
 7051              		.loc 1 766 0
 7052 3838 9E20C5E5 		strb	r2, [r5, #158]
 7053              	.LVL801:
 7054 383c AB20D515 		ldrneb	r2, [r5, #171]	@ zero_extendqisi2
 7055 3840 9F20C515 		strneb	r2, [r5, #159]
 7056              	.LVL802:
 7057              	.L672:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7058              		.loc 1 411 0
 7059 3844 FF70A0E3 		mov	r7, #255
 768:../uvc.c      **** 							 break;
 7060              		.loc 1 768 0
 7061 3848 14308DE5 		str	r3, [sp, #20]
 7062 384c FEFFFFEB 		bl	I2CCmdHandler
 7063              	.LVL803:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7064              		.loc 1 411 0
 7065 3850 07C0A0E1 		mov	ip, r7
 7066 3854 14309DE5 		ldr	r3, [sp, #20]
 7067 3858 F20100EA 		b	.L665
 7068              	.LVL804:
 7069              	.L899:
 7070 385c 0020A0E1 		mov	r2, r0
 7071              	.LBE288:
 7072              	.LBE319:
 7073              	.LBE364:
 7074              	.LBE403:
3134:../uvc.c      **** 						CyFxAppErrorHandler (apiRetStatus);
 7075              		.loc 1 3134 0
 7076 3860 48111FE5 		ldr	r1, .L927+52
 7077 3864 0700A0E1 		mov	r0, r7
 7078              	.LVL805:
 7079 3868 FEFFFFEB 		bl	CyU3PDebugPrint
 7080              	.LVL806:
 7081              	.L733:
 7082              	.LBB404:
 7083              	.LBB405:
 974:../uvc.c      ****     }
 7084              		.loc 1 974 0
 7085 386c 6400A0E3 		mov	r0, #100
 7086 3870 FEFFFFEB 		bl	_tx_thread_sleep
 7087              	.LVL807:
 7088 3874 FCFFFFEA 		b	.L733
 7089              	.LVL808:
 7090              	.L893:
 7091 3878 0020A0E1 		mov	r2, r0
 7092              	.LBE405:
 7093              	.LBE404:
3158:../uvc.c      **** 						CyFxAppErrorHandler (apiRetStatus);
 7094              		.loc 1 3158 0
 7095 387c 64111FE5 		ldr	r1, .L927+52
 7096 3880 0600A0E1 		mov	r0, r6
 7097              	.LVL809:
 7098 3884 FEFFFFEB 		bl	CyU3PDebugPrint
 7099              	.LVL810:
 7100              	.L735:
 7101              	.LBB406:
 7102              	.LBB407:
 974:../uvc.c      ****     }
 7103              		.loc 1 974 0
 7104 3888 6400A0E3 		mov	r0, #100
 7105 388c FEFFFFEB 		bl	_tx_thread_sleep
 7106              	.LVL811:
 7107 3890 FCFFFFEA 		b	.L735
 7108              	.LVL812:
 7109              	.L923:
 7110              	.LBE407:
 7111              	.LBE406:
 7112              	.LBB408:
 7113              	.LBB365:
 7114              	.LBB320:
 7115              	.LBB298:
 423:../uvc.c      **** 		 {
 7116              		.loc 1 423 0
 7117 3894 810057E3 		cmp	r7, #129
 7118 3898 D001000A 		beq	.L552
 7119 389c CC01008A 		bhi	.L553
 7120 38a0 010057E3 		cmp	r7, #1
 7121 38a4 19FDFF1A 		bne	.L642
 661:../uvc.c      **** 				  glEp0Buffer, &readCount);
 7122              		.loc 1 661 0
 7123 38a8 2000A0E3 		mov	r0, #32
 7124 38ac 00208DE0 		add	r2, sp, r0
 7125 38b0 60111FE5 		ldr	r1, .L927+108
 7126 38b4 FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 7127              	.LVL813:
 663:../uvc.c      **** 			   {
 7128              		.loc 1 663 0
 7129 38b8 002050E2 		subs	r2, r0, #0
 7130 38bc 8902001A 		bne	.L654
 937:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 7131              		.loc 1 937 0
 7132 38c0 94111FE5 		ldr	r1, .L927+72
 665:../uvc.c      **** 				  Data1 = glEp0Buffer[1];
 7133              		.loc 1 665 0
 7134 38c4 A0A0D5E5 		ldrb	r10, [r5, #160]	@ zero_extendqisi2
 7135              	.LVL814:
 937:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 7136              		.loc 1 937 0
 7137 38c8 1C0091E5 		ldr	r0, [r1, #28]
 7138              	.LVL815:
 7139 38cc 0010E0E3 		mvn	r1, #0
 668:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7140              		.loc 1 668 0
 7141 38d0 A260D5E5 		ldrb	r6, [r5, #162]	@ zero_extendqisi2
 7142              	.LVL816:
 937:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 7143              		.loc 1 937 0
 7144 38d4 10208DE5 		str	r2, [sp, #16]
 7145 38d8 FEFFFFEB 		bl	_txe_mutex_get
 7146              	.LVL817:
 938:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 7147              		.loc 1 938 0
 7148 38dc 10209DE5 		ldr	r2, [sp, #16]
 7149 38e0 0830A0E1 		mov	r3, r8
 7150 38e4 04208DE5 		str	r2, [sp, #4]
 7151 38e8 1110A0E3 		mov	r1, #17
 7152 38ec 18209DE5 		ldr	r2, [sp, #24]
 7153 38f0 00A08DE5 		str	r10, [sp]
 7154 38f4 C8011FE5 		ldr	r0, .L927+72
 7155 38f8 FEFFFFEB 		bl	cmdSet
 7156              	.LVL818:
 939:../uvc.c      **** 
 7157              		.loc 1 939 0
 7158 38fc D0211FE5 		ldr	r2, .L927+72
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7159              		.loc 1 411 0
 7160 3900 FF80A0E3 		mov	r8, #255
 7161              	.LVL819:
 939:../uvc.c      **** 
 7162              		.loc 1 939 0
 7163 3904 1C0092E5 		ldr	r0, [r2, #28]
 7164 3908 FEFFFFEB 		bl	_txe_mutex_put
 7165              	.LVL820:
 942:../uvc.c      **** 							 break;
 7166              		.loc 1 942 0
 7167 390c 0130A0E3 		mov	r3, #1
 941:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 7168              		.loc 1 941 0
 7169 3910 25A3CBE5 		strb	r10, [fp, #805]
 942:../uvc.c      **** 							 break;
 7170              		.loc 1 942 0
 7171 3914 2833CBE5 		strb	r3, [fp, #808]
 7172 3918 F90000EA 		b	.L652
 7173              	.LVL821:
 7174              	.L906:
 7175              	.LBE298:
 7176              	.LBE320:
 7177              	.LBB321:
 7178              	.LBB262:
 423:../uvc.c      **** 		 {
 7179              		.loc 1 423 0
 7180 391c 810057E3 		cmp	r7, #129
 7181 3920 9D01000A 		beq	.L689
 7182 3924 9901008A 		bhi	.L690
 7183 3928 010057E3 		cmp	r7, #1
 7184 392c 9B03001A 		bne	.L686
 661:../uvc.c      **** 				  glEp0Buffer, &readCount);
 7185              		.loc 1 661 0
 7186 3930 2000A0E3 		mov	r0, #32
 7187 3934 00208DE0 		add	r2, sp, r0
 7188 3938 E8111FE5 		ldr	r1, .L927+108
 7189 393c FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 7190              	.LVL822:
 663:../uvc.c      **** 			   {
 7191              		.loc 1 663 0
 7192 3940 002050E2 		subs	r2, r0, #0
 7193 3944 8101001A 		bne	.L697
 816:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //set grid status
 7194              		.loc 1 816 0
 7195 3948 1C121FE5 		ldr	r1, .L927+72
 665:../uvc.c      **** 				  Data1 = glEp0Buffer[1];
 7196              		.loc 1 665 0
 7197 394c A0C0D5E5 		ldrb	ip, [r5, #160]	@ zero_extendqisi2
 7198              	.LVL823:
 816:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //set grid status
 7199              		.loc 1 816 0
 7200 3950 1C0091E5 		ldr	r0, [r1, #28]
 7201              	.LVL824:
 7202 3954 0010E0E3 		mvn	r1, #0
 668:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7203              		.loc 1 668 0
 7204 3958 A260D5E5 		ldrb	r6, [r5, #162]	@ zero_extendqisi2
 7205              	.LVL825:
 816:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //set grid status
 7206              		.loc 1 816 0
 7207 395c 10208DE5 		str	r2, [sp, #16]
 7208 3960 14C08DE5 		str	ip, [sp, #20]
 7209 3964 FEFFFFEB 		bl	_txe_mutex_get
 7210              	.LVL826:
 817:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 7211              		.loc 1 817 0
 7212 3968 14C09DE5 		ldr	ip, [sp, #20]
 7213 396c 10209DE5 		ldr	r2, [sp, #16]
 7214 3970 00C08DE5 		str	ip, [sp]
 7215 3974 0830A0E1 		mov	r3, r8
 7216 3978 04208DE5 		str	r2, [sp, #4]
 7217 397c 2610A0E3 		mov	r1, #38
 7218 3980 0A20A0E1 		mov	r2, r10
 7219 3984 58021FE5 		ldr	r0, .L927+72
 7220 3988 FEFFFFEB 		bl	cmdSet
 7221              	.LVL827:
 818:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][13] = Data0;
 7222              		.loc 1 818 0
 7223 398c 60221FE5 		ldr	r2, .L927+72
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7224              		.loc 1 411 0
 7225 3990 FF80A0E3 		mov	r8, #255
 7226              	.LVL828:
 818:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][13] = Data0;
 7227              		.loc 1 818 0
 7228 3994 1C0092E5 		ldr	r0, [r2, #28]
 7229 3998 FEFFFFEB 		bl	_txe_mutex_put
 7230              	.LVL829:
 819:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][16] = CyTrue;
 7231              		.loc 1 819 0
 7232 399c 14C09DE5 		ldr	ip, [sp, #20]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7233              		.loc 1 411 0
 7234 39a0 08A0A0E1 		mov	r10, r8
 7235              	.LVL830:
 819:../uvc.c      **** 							 ExUCtrlParArry[locCtrlID][16] = CyTrue;
 7236              		.loc 1 819 0
 7237 39a4 9DC0CBE5 		strb	ip, [fp, #157]
 820:../uvc.c      **** 							 break;
 7238              		.loc 1 820 0
 7239 39a8 A070CBE5 		strb	r7, [fp, #160]
 7240 39ac 6E0100EA 		b	.L696
 7241              	.LVL831:
 7242              	.L911:
 7243              	.LBE262:
 7244              	.LBE321:
 7245              	.LBB322:
 7246              	.LBB267:
 423:../uvc.c      **** 		 {
 7247              		.loc 1 423 0
 7248 39b0 810057E3 		cmp	r7, #129
 7249 39b4 5A01000A 		beq	.L533
 7250 39b8 5601008A 		bhi	.L534
 7251 39bc 010057E3 		cmp	r7, #1
 7252 39c0 D2FCFF1A 		bne	.L642
 661:../uvc.c      **** 				  glEp0Buffer, &readCount);
 7253              		.loc 1 661 0
 7254 39c4 2000A0E3 		mov	r0, #32
 7255 39c8 00208DE0 		add	r2, sp, r0
 7256 39cc 7C121FE5 		ldr	r1, .L927+108
 7257 39d0 FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 7258              	.LVL832:
 663:../uvc.c      **** 			   {
 7259              		.loc 1 663 0
 7260 39d4 002050E2 		subs	r2, r0, #0
 7261 39d8 4202001A 		bne	.L654
 665:../uvc.c      **** 				  Data1 = glEp0Buffer[1];
 7262              		.loc 1 665 0
 7263 39dc A0A0D5E5 		ldrb	r10, [r5, #160]	@ zero_extendqisi2
 7264              	.LVL833:
 668:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7265              		.loc 1 668 0
 7266 39e0 A260D5E5 		ldrb	r6, [r5, #162]	@ zero_extendqisi2
 7267              	.LVL834:
 676:../uvc.c      **** 								 if((CTCtrlParArry[AutoExMCtlID1][13] != 8) && (CTCtrlParArry[AutoExMCtlID1][13] != 2)){
 7268              		.loc 1 676 0
 7269 39e4 00005AE3 		cmp	r10, #0
 675:../uvc.c      **** 							 if(Data0 == 0){//set exposure mode auto
 7270              		.loc 1 675 0
 7271 39e8 0DA3CBE5 		strb	r10, [fp, #781]
 676:../uvc.c      **** 								 if((CTCtrlParArry[AutoExMCtlID1][13] != 8) && (CTCtrlParArry[AutoExMCtlID1][13] != 2)){
 7272              		.loc 1 676 0
 7273 39ec 3301001A 		bne	.L543
 677:../uvc.c      **** 									 if(CTCtrlParArry[AutoExMCtlID1][13] == 1) {
 7274              		.loc 1 677 0
 7275 39f0 BD34D9E5 		ldrb	r3, [r9, #1213]	@ zero_extendqisi2
 7276 39f4 020053E3 		cmp	r3, #2
 7277 39f8 08005313 		cmpne	r3, #8
 7278 39fc 0300000A 		beq	.L544
 678:../uvc.c      **** 										 CTCtrlParArry[AutoExMCtlID1][13] = 8; //aperture priority
 7279              		.loc 1 678 0
 7280 3a00 010053E3 		cmp	r3, #1
 679:../uvc.c      **** 									 }else{
 7281              		.loc 1 679 0
 7282 3a04 0830A003 		moveq	r3, #8
 681:../uvc.c      **** 									 }
 7283              		.loc 1 681 0
 7284 3a08 0230A013 		movne	r3, #2
 7285 3a0c BD34C9E5 		strb	r3, [r9, #1213]
 7286              	.LVL835:
 7287              	.L544:
 703:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 7288              		.loc 1 703 0
 7289 3a10 E4121FE5 		ldr	r1, .L927+72
 701:../uvc.c      **** 							 dataIdx = 0;
 7290              		.loc 1 701 0
 7291 3a14 0130A0E3 		mov	r3, #1
 703:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 7292              		.loc 1 703 0
 7293 3a18 1C0091E5 		ldr	r0, [r1, #28]
 7294              	.LVL836:
 7295 3a1c 0010E0E3 		mvn	r1, #0
 701:../uvc.c      **** 							 dataIdx = 0;
 7296              		.loc 1 701 0
 7297 3a20 1033CBE5 		strb	r3, [fp, #784]
 7298              	.LVL837:
 703:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 7299              		.loc 1 703 0
 7300 3a24 FEFFFFEB 		bl	_txe_mutex_get
 7301              	.LVL838:
 704:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 7302              		.loc 1 704 0
 7303 3a28 0010A0E3 		mov	r1, #0
 7304 3a2c 0830A0E1 		mov	r3, r8
 7305 3a30 18209DE5 		ldr	r2, [sp, #24]
 7306 3a34 04108DE5 		str	r1, [sp, #4]
 7307 3a38 00A08DE5 		str	r10, [sp]
 7308 3a3c 1010A0E3 		mov	r1, #16
 7309 3a40 14031FE5 		ldr	r0, .L927+72
 7310 3a44 FEFFFFEB 		bl	cmdSet
 7311              	.LVL839:
 705:../uvc.c      **** 							 //CyU3PDebugPrint (4, "The shutter&exposure 0x%x 0x%x 0x%x ox%x\r\n", Data1, Data0, CTCtrlP
 7312              		.loc 1 705 0
 7313 3a48 1C231FE5 		ldr	r2, .L927+72
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7314              		.loc 1 411 0
 7315 3a4c FF80A0E3 		mov	r8, #255
 7316              	.LVL840:
 705:../uvc.c      **** 							 //CyU3PDebugPrint (4, "The shutter&exposure 0x%x 0x%x 0x%x ox%x\r\n", Data1, Data0, CTCtrlP
 7317              		.loc 1 705 0
 7318 3a50 1C0092E5 		ldr	r0, [r2, #28]
 7319 3a54 FEFFFFEB 		bl	_txe_mutex_put
 7320              	.LVL841:
 7321 3a58 A90000EA 		b	.L652
 7322              	.LVL842:
 7323              	.L914:
 7324              	.LBE267:
 7325              	.LBE322:
 7326              	.LBE365:
 7327              	.LBE408:
 7328              	.LBB409:
 7329              	.LBB384:
2872:../uvc.c      **** 					}
 7330              		.loc 1 2872 0
 7331 3a5c 40031FE5 		ldr	r0, .L927+56
 7332 3a60 40131FE5 		ldr	r1, .L927+60
 7333 3a64 1A20A0E3 		mov	r2, #26
 7334 3a68 FEFFFFEB 		bl	CyU3PMemCopy
 7335              	.LVL843:
 7336 3a6c 85FCFFEA 		b	.L704
 7337              	.LVL844:
 7338              	.L916:
 7339              	.LBE384:
 7340              	.LBE409:
 7341              	.LBB410:
 7342              	.LBB366:
 7343              	.LBB323:
 7344              	.LBB278:
 423:../uvc.c      **** 		 {
 7345              		.loc 1 423 0
 7346 3a70 810057E3 		cmp	r7, #129
 7347 3a74 0601000A 		beq	.L617
 7348 3a78 0201008A 		bhi	.L618
 7349 3a7c 010057E3 		cmp	r7, #1
 7350 3a80 A2FCFF1A 		bne	.L642
 661:../uvc.c      **** 				  glEp0Buffer, &readCount);
 7351              		.loc 1 661 0
 7352 3a84 2000A0E3 		mov	r0, #32
 7353 3a88 00208DE0 		add	r2, sp, r0
 7354 3a8c 3C131FE5 		ldr	r1, .L927+108
 7355 3a90 FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 7356              	.LVL845:
 663:../uvc.c      **** 			   {
 7357              		.loc 1 663 0
 7358 3a94 002050E2 		subs	r2, r0, #0
 7359 3a98 1202001A 		bne	.L654
 726:../uvc.c      **** 							 if(WDRflag)
 7360              		.loc 1 726 0
 7361 3a9c 70C31FE5 		ldr	ip, .L927+72
 665:../uvc.c      **** 				  Data1 = glEp0Buffer[1];
 7362              		.loc 1 665 0
 7363 3aa0 A0A0D5E5 		ldrb	r10, [r5, #160]	@ zero_extendqisi2
 7364              	.LVL846:
 725:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 7365              		.loc 1 725 0
 7366 3aa4 01E0A0E3 		mov	lr, #1
 726:../uvc.c      **** 							 if(WDRflag)
 7367              		.loc 1 726 0
 7368 3aa8 1C009CE5 		ldr	r0, [ip, #28]
 7369              	.LVL847:
 7370 3aac 0010E0E3 		mvn	r1, #0
 725:../uvc.c      **** 							 CyU3PMutexGet(cmdQuptr->ringMux, CYU3P_WAIT_FOREVER);       //get mutex
 7371              		.loc 1 725 0
 7372 3ab0 00E4CBE5 		strb	lr, [fp, #1024]
 724:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 7373              		.loc 1 724 0
 7374 3ab4 FDA3CBE5 		strb	r10, [fp, #1021]
 668:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7375              		.loc 1 668 0
 7376 3ab8 A260D5E5 		ldrb	r6, [r5, #162]	@ zero_extendqisi2
 7377              	.LVL848:
 726:../uvc.c      **** 							 if(WDRflag)
 7378              		.loc 1 726 0
 7379 3abc 10208DE5 		str	r2, [sp, #16]
 7380 3ac0 FEFFFFEB 		bl	_txe_mutex_get
 7381              	.LVL849:
 727:../uvc.c      **** 								 cmdSet(cmdQuptr, CtrlID, RegAdd1, devAdd, Data0, dataIdx);  //First
 7382              		.loc 1 727 0
 7383 3ac4 C01095E5 		ldr	r1, [r5, #192]
 7384 3ac8 10209DE5 		ldr	r2, [sp, #16]
 7385 3acc 000051E3 		cmp	r1, #0
 728:../uvc.c      **** 							 else
 7386              		.loc 1 728 0
 7387 3ad0 04208D15 		strne	r2, [sp, #4]
 730:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 7388              		.loc 1 730 0
 7389 3ad4 04108D05 		streq	r1, [sp, #4]
 728:../uvc.c      **** 							 else
 7390              		.loc 1 728 0
 7391 3ad8 1C209D15 		ldrne	r2, [sp, #28]
 730:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 7392              		.loc 1 730 0
 7393 3adc 18209D05 		ldreq	r2, [sp, #24]
 7394 3ae0 0830A0E1 		mov	r3, r8
 7395 3ae4 1A10A0E3 		mov	r1, #26
 728:../uvc.c      **** 							 else
 7396              		.loc 1 728 0
 7397 3ae8 00A08DE5 		str	r10, [sp]
 730:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 7398              		.loc 1 730 0
 7399 3aec C0031FE5 		ldr	r0, .L927+72
 7400 3af0 FEFFFFEB 		bl	cmdSet
 7401              	.LVL850:
 731:../uvc.c      **** 							 CyU3PDebugPrint (4, "Exe level. %d %d; %d %d\r\n", Data0, WDRflag, glEp0Buffer[2], glEp0Buf
 7402              		.loc 1 731 0
 7403 3af4 C8131FE5 		ldr	r1, .L927+72
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7404              		.loc 1 411 0
 7405 3af8 FF80A0E3 		mov	r8, #255
 7406              	.LVL851:
 731:../uvc.c      **** 							 CyU3PDebugPrint (4, "Exe level. %d %d; %d %d\r\n", Data0, WDRflag, glEp0Buffer[2], glEp0Buf
 7407              		.loc 1 731 0
 7408 3afc 1C0091E5 		ldr	r0, [r1, #28]
 7409 3b00 FEFFFFEB 		bl	_txe_mutex_put
 7410              	.LVL852:
 732:../uvc.c      **** 						 case ExtCamMCtlID12:
 7411              		.loc 1 732 0
 7412 3b04 A210D4E5 		ldrb	r1, [r4, #162]	@ zero_extendqisi2
 7413 3b08 A320D4E5 		ldrb	r2, [r4, #163]	@ zero_extendqisi2
 7414 3b0c C03094E5 		ldr	r3, [r4, #192]
 7415 3b10 06008DE8 		stmia	sp, {r1, r2}
 7416 3b14 F0131FE5 		ldr	r1, .L927+64
 7417 3b18 0400A0E3 		mov	r0, #4
 7418 3b1c 0A20A0E1 		mov	r2, r10
 7419 3b20 FEFFFFEB 		bl	CyU3PDebugPrint
 7420              	.LVL853:
 7421 3b24 760000EA 		b	.L652
 7422              	.LVL854:
 7423              	.L922:
 7424              	.LBE278:
 7425              	.LBE323:
 7426              	.LBB324:
 7427              	.LBB293:
 423:../uvc.c      **** 		 {
 7428              		.loc 1 423 0
 7429 3b28 810057E3 		cmp	r7, #129
 7430 3b2c C900000A 		beq	.L565
 7431 3b30 C500008A 		bhi	.L566
 7432 3b34 010057E3 		cmp	r7, #1
 7433 3b38 74FCFF1A 		bne	.L642
 661:../uvc.c      **** 				  glEp0Buffer, &readCount);
 7434              		.loc 1 661 0
 7435 3b3c 2000A0E3 		mov	r0, #32
 7436 3b40 00208DE0 		add	r2, sp, r0
 7437 3b44 F4131FE5 		ldr	r1, .L927+108
 7438 3b48 FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 7439              	.LVL855:
 663:../uvc.c      **** 			   {
 7440              		.loc 1 663 0
 7441 3b4c 002050E2 		subs	r2, r0, #0
 7442 3b50 E401001A 		bne	.L654
 937:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 7443              		.loc 1 937 0
 7444 3b54 28141FE5 		ldr	r1, .L927+72
 665:../uvc.c      **** 				  Data1 = glEp0Buffer[1];
 7445              		.loc 1 665 0
 7446 3b58 A0A0D5E5 		ldrb	r10, [r5, #160]	@ zero_extendqisi2
 7447              	.LVL856:
 937:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 7448              		.loc 1 937 0
 7449 3b5c 1C0091E5 		ldr	r0, [r1, #28]
 7450              	.LVL857:
 7451 3b60 0010E0E3 		mvn	r1, #0
 668:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7452              		.loc 1 668 0
 7453 3b64 A260D5E5 		ldrb	r6, [r5, #162]	@ zero_extendqisi2
 7454              	.LVL858:
 937:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, Data0, dataIdx);  //First
 7455              		.loc 1 937 0
 7456 3b68 10208DE5 		str	r2, [sp, #16]
 7457 3b6c FEFFFFEB 		bl	_txe_mutex_get
 7458              	.LVL859:
 938:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 7459              		.loc 1 938 0
 7460 3b70 10209DE5 		ldr	r2, [sp, #16]
 7461 3b74 0830A0E1 		mov	r3, r8
 7462 3b78 04208DE5 		str	r2, [sp, #4]
 7463 3b7c 1210A0E3 		mov	r1, #18
 7464 3b80 18209DE5 		ldr	r2, [sp, #24]
 7465 3b84 00A08DE5 		str	r10, [sp]
 7466 3b88 5C041FE5 		ldr	r0, .L927+72
 7467 3b8c FEFFFFEB 		bl	cmdSet
 7468              	.LVL860:
 939:../uvc.c      **** 
 7469              		.loc 1 939 0
 7470 3b90 64241FE5 		ldr	r2, .L927+72
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7471              		.loc 1 411 0
 7472 3b94 FF80A0E3 		mov	r8, #255
 7473              	.LVL861:
 939:../uvc.c      **** 
 7474              		.loc 1 939 0
 7475 3b98 1C0092E5 		ldr	r0, [r2, #28]
 7476 3b9c FEFFFFEB 		bl	_txe_mutex_put
 7477              	.LVL862:
 941:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 7478              		.loc 1 941 0
 7479 3ba0 3DA3CBE5 		strb	r10, [fp, #829]
 942:../uvc.c      **** 							 break;
 7480              		.loc 1 942 0
 7481 3ba4 4073CBE5 		strb	r7, [fp, #832]
 7482 3ba8 550000EA 		b	.L652
 7483              	.LVL863:
 7484              	.L710:
 7485              	.LBE293:
 7486              	.LBE324:
 7487              	.LBE366:
 7488              	.LBE410:
 7489              	.LBB411:
 7490              	.LBB385:
2889:../uvc.c      **** 						if (status != CY_U3P_SUCCESS)
 7491              		.loc 1 2889 0
 7492 3bac 0B00A0E3 		mov	r0, #11
 7493 3bb0 88141FE5 		ldr	r1, .L927+68
 7494 3bb4 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 7495              	.LVL864:
2890:../uvc.c      **** 						{
 7496              		.loc 1 2890 0
 7497 3bb8 002050E2 		subs	r2, r0, #0
 7498 3bbc DAFBFF0A 		beq	.L884
 7499 3bc0 35FCFFEA 		b	.L711
 7500              	.LVL865:
 7501              	.L913:
 7502              	.LBE385:
 7503              	.LBE411:
 7504              	.LBB412:
 7505              	.LBB234:
 7506              	.LBB223:
 7507              	.LBB219:
 423:../uvc.c      **** 		 {
 7508              		.loc 1 423 0
 7509 3bc4 810057E3 		cmp	r7, #129
 7510 3bc8 9300000A 		beq	.L495
 7511 3bcc 8F00008A 		bhi	.L496
 7512 3bd0 010057E3 		cmp	r7, #1
 7513 3bd4 4DFCFF1A 		bne	.L642
 661:../uvc.c      **** 				  glEp0Buffer, &readCount);
 7514              		.loc 1 661 0
 7515 3bd8 2000A0E3 		mov	r0, #32
 7516 3bdc 00208DE0 		add	r2, sp, r0
 7517 3be0 90141FE5 		ldr	r1, .L927+108
 7518 3be4 FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 7519              	.LVL866:
 663:../uvc.c      **** 			   {
 7520              		.loc 1 663 0
 7521 3be8 002050E2 		subs	r2, r0, #0
 7522 3bec BD01001A 		bne	.L654
 850:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, (Data0-GREEN_BASE), dataIdx);  //First
 7523              		.loc 1 850 0
 7524 3bf0 C4141FE5 		ldr	r1, .L927+72
 665:../uvc.c      **** 				  Data1 = glEp0Buffer[1];
 7525              		.loc 1 665 0
 7526 3bf4 A0A0D5E5 		ldrb	r10, [r5, #160]	@ zero_extendqisi2
 7527              	.LVL867:
 850:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, (Data0-GREEN_BASE), dataIdx);  //First
 7528              		.loc 1 850 0
 7529 3bf8 1C0091E5 		ldr	r0, [r1, #28]
 7530              	.LVL868:
 7531 3bfc 0010E0E3 		mvn	r1, #0
 668:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7532              		.loc 1 668 0
 7533 3c00 A260D5E5 		ldrb	r6, [r5, #162]	@ zero_extendqisi2
 7534              	.LVL869:
 850:../uvc.c      **** 							 cmdSet(cmdQuptr, CtrlID, RegAdd0, devAdd, (Data0-GREEN_BASE), dataIdx);  //First
 7535              		.loc 1 850 0
 7536 3c04 10208DE5 		str	r2, [sp, #16]
 7537 3c08 FEFFFFEB 		bl	_txe_mutex_get
 7538              	.LVL870:
 851:../uvc.c      **** 							 dataIdx++;
 7539              		.loc 1 851 0
 7540 3c0c 10209DE5 		ldr	r2, [sp, #16]
 7541 3c10 80304AE2 		sub	r3, r10, #128
 7542 3c14 FF3003E2 		and	r3, r3, #255
 7543 3c18 04208DE5 		str	r2, [sp, #4]
 7544 3c1c 00308DE5 		str	r3, [sp]
 7545 3c20 18209DE5 		ldr	r2, [sp, #24]
 7546 3c24 0830A0E1 		mov	r3, r8
 7547 3c28 0510A0E3 		mov	r1, #5
 7548 3c2c 00051FE5 		ldr	r0, .L927+72
 7549 3c30 FEFFFFEB 		bl	cmdSet
 7550              	.LVL871:
 853:../uvc.c      **** 							 dataIdx++;
 7551              		.loc 1 853 0
 7552 3c34 76304AE2 		sub	r3, r10, #118
 7553 3c38 FF3003E2 		and	r3, r3, #255
 7554 3c3c 88008DE8 		stmia	sp, {r3, r7}
 7555 3c40 14051FE5 		ldr	r0, .L927+72
 7556 3c44 0830A0E1 		mov	r3, r8
 7557 3c48 0510A0E3 		mov	r1, #5
 7558 3c4c DC20A0E3 		mov	r2, #220
 7559 3c50 FEFFFFEB 		bl	cmdSet
 7560              	.LVL872:
 855:../uvc.c      **** 							 dataIdx++;
 7561              		.loc 1 855 0
 7562 3c54 7E208AE2 		add	r2, r10, #126
 7563 3c58 FF2002E2 		and	r2, r2, #255
 7564 3c5c 0230A0E3 		mov	r3, #2
 7565 3c60 0C008DE8 		stmia	sp, {r2, r3}
 7566 3c64 38051FE5 		ldr	r0, .L927+72
 7567 3c68 0830A0E1 		mov	r3, r8
 7568 3c6c 0510A0E3 		mov	r1, #5
 7569 3c70 DE20A0E3 		mov	r2, #222
 7570 3c74 FEFFFFEB 		bl	cmdSet
 7571              	.LVL873:
 857:../uvc.c      **** 							 dataIdx++;
 7572              		.loc 1 857 0
 7573 3c78 72208AE2 		add	r2, r10, #114
 7574 3c7c FF2002E2 		and	r2, r2, #255
 7575 3c80 0330A0E3 		mov	r3, #3
 7576 3c84 0C008DE8 		stmia	sp, {r2, r3}
 7577 3c88 5C051FE5 		ldr	r0, .L927+72
 7578 3c8c 0830A0E1 		mov	r3, r8
 7579 3c90 0510A0E3 		mov	r1, #5
 7580 3c94 E020A0E3 		mov	r2, #224
 7581 3c98 FEFFFFEB 		bl	cmdSet
 7582              	.LVL874:
 859:../uvc.c      **** 							 dataIdx++;
 7583              		.loc 1 859 0
 7584 3c9c 6F204AE2 		sub	r2, r10, #111
 7585 3ca0 FF2002E2 		and	r2, r2, #255
 7586 3ca4 0430A0E3 		mov	r3, #4
 7587 3ca8 0C008DE8 		stmia	sp, {r2, r3}
 7588 3cac 80051FE5 		ldr	r0, .L927+72
 7589 3cb0 0830A0E1 		mov	r3, r8
 7590 3cb4 0510A0E3 		mov	r1, #5
 7591 3cb8 DD20A0E3 		mov	r2, #221
 7592 3cbc FEFFFFEB 		bl	cmdSet
 7593              	.LVL875:
 861:../uvc.c      **** 							 CyU3PMutexPut(cmdQuptr->ringMux);  //release the command queue mutex
 7594              		.loc 1 861 0
 7595 3cc0 A000D5E5 		ldrb	r0, [r5, #160]	@ zero_extendqisi2
 7596 3cc4 0510A0E3 		mov	r1, #5
 7597 3cc8 7F0080E2 		add	r0, r0, #127
 7598 3ccc FF0000E2 		and	r0, r0, #255
 7599 3cd0 0830A0E1 		mov	r3, r8
 7600 3cd4 03008DE8 		stmia	sp, {r0, r1}
 7601 3cd8 1C209DE5 		ldr	r2, [sp, #28]
 7602 3cdc B0051FE5 		ldr	r0, .L927+72
 7603 3ce0 FEFFFFEB 		bl	cmdSet
 7604              	.LVL876:
 862:../uvc.c      **** 
 7605              		.loc 1 862 0
 7606 3ce4 B8251FE5 		ldr	r2, .L927+72
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7607              		.loc 1 411 0
 7608 3ce8 FF80A0E3 		mov	r8, #255
 7609              	.LVL877:
 862:../uvc.c      **** 
 7610              		.loc 1 862 0
 7611 3cec 1C0092E5 		ldr	r0, [r2, #28]
 7612 3cf0 FEFFFFEB 		bl	_txe_mutex_put
 7613              	.LVL878:
 864:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 7614              		.loc 1 864 0
 7615 3cf4 A030D5E5 		ldrb	r3, [r5, #160]	@ zero_extendqisi2
 865:../uvc.c      **** 							 break;
 7616              		.loc 1 865 0
 7617 3cf8 0872C9E5 		strb	r7, [r9, #520]
 864:../uvc.c      **** 							 CtrlParArry[CtrlID][16] = CyTrue;
 7618              		.loc 1 864 0
 7619 3cfc 803043E2 		sub	r3, r3, #128
 7620 3d00 0532C9E5 		strb	r3, [r9, #517]
 7621              	.LVL879:
 7622              	.L652:
 7623              	.LBE219:
 7624              	.LBE223:
 7625              	.LBE234:
 7626              	.LBE412:
 7627              	.LBB413:
 7628              	.LBB367:
 7629              	.LBB325:
 7630              	.LBB252:
 957:../uvc.c      **** }
 7631              		.loc 1 957 0
 7632 3d04 FF10A0E3 		mov	r1, #255
 7633 3d08 0720A0E1 		mov	r2, r7
 7634 3d0c 0A30A0E1 		mov	r3, r10
 7635 3d10 40018DE8 		stmia	sp, {r6, r8}
 7636              	.LVL880:
 7637              	.L882:
 7638 3d14 08108DE5 		str	r1, [sp, #8]
 7639 3d18 0400A0E3 		mov	r0, #4
 7640 3d1c E0151FE5 		ldr	r1, .L927+88
 7641 3d20 FEFFFFEB 		bl	CyU3PDebugPrint
 7642              	.LVL881:
 7643 3d24 28309DE5 		ldr	r3, [sp, #40]
 7644 3d28 D4FAFFEA 		b	.L458
 7645              	.LVL882:
 7646              	.L915:
 7647              	.LBE252:
 7648              	.LBE325:
 7649              	.LBB326:
 7650              	.LBB273:
 423:../uvc.c      **** 		 {
 7651              		.loc 1 423 0
 7652 3d2c 810057E3 		cmp	r7, #129
 7653 3d30 2100000A 		beq	.L632
 7654 3d34 1D00008A 		bhi	.L633
 7655 3d38 010057E3 		cmp	r7, #1
 7656 3d3c 1F02001A 		bne	.L629
 661:../uvc.c      **** 				  glEp0Buffer, &readCount);
 7657              		.loc 1 661 0
 7658 3d40 2000A0E3 		mov	r0, #32
 7659 3d44 00208DE0 		add	r2, sp, r0
 7660 3d48 F8151FE5 		ldr	r1, .L927+108
 7661 3d4c FEFFFFEB 		bl	CyU3PUsbGetEP0Data
 7662              	.LVL883:
 663:../uvc.c      **** 			   {
 7663              		.loc 1 663 0
 7664 3d50 002050E2 		subs	r2, r0, #0
 7665 3d54 0600001A 		bne	.L641
 665:../uvc.c      **** 				  Data1 = glEp0Buffer[1];
 7666              		.loc 1 665 0
 7667 3d58 A030D5E5 		ldrb	r3, [r5, #160]	@ zero_extendqisi2
 7668              	.LVL884:
 668:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7669              		.loc 1 668 0
 7670 3d5c A210D5E5 		ldrb	r1, [r5, #162]	@ zero_extendqisi2
 7671              	.LVL885:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7672              		.loc 1 411 0
 7673 3d60 FF60A0E3 		mov	r6, #255
 7674 3d64 080000EA 		b	.L639
 7675              	.LVL886:
 7676              	.L602:
 7677              	.LBE273:
 7678              	.LBE326:
 7679              	.LBB327:
 7680              	.LBB244:
 609:../uvc.c      **** 				  glEp0Buffer[1] = CtrlParArry[CtrlID][6];
 7681              		.loc 1 609 0
 7682 3d68 AD23D9E5 		ldrb	r2, [r9, #941]	@ zero_extendqisi2
 610:../uvc.c      **** 			 }
 7683              		.loc 1 610 0
 7684 3d6c AE33D9E5 		ldrb	r3, [r9, #942]	@ zero_extendqisi2
 7685 3d70 2CFBFFEA 		b	.L875
 7686              	.LVL887:
 7687              	.L641:
 7688              	.LBE244:
 7689              	.LBE327:
 7690              	.LBB328:
 7691              	.LBB274:
 946:../uvc.c      **** 			   }
 7692              		.loc 1 946 0
 7693 3d74 30161FE5 		ldr	r1, .L927+96
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7694              		.loc 1 411 0
 7695 3d78 FF60A0E3 		mov	r6, #255
 946:../uvc.c      **** 			   }
 7696              		.loc 1 946 0
 7697 3d7c 0400A0E3 		mov	r0, #4
 7698              	.LVL888:
 7699 3d80 FEFFFFEB 		bl	CyU3PDebugPrint
 7700              	.LVL889:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7701              		.loc 1 411 0
 7702 3d84 0610A0E1 		mov	r1, r6
 7703 3d88 0630A0E1 		mov	r3, r6
 7704              	.LVL890:
 7705              	.L639:
 957:../uvc.c      **** }
 7706              		.loc 1 957 0
 7707 3d8c FF00A0E3 		mov	r0, #255
 7708 3d90 42008DE8 		stmia	sp, {r1, r6}
 7709 3d94 58161FE5 		ldr	r1, .L927+88
 7710              	.LVL891:
 7711 3d98 08008DE5 		str	r0, [sp, #8]
 7712 3d9c 0720A0E1 		mov	r2, r7
 7713 3da0 0400A0E3 		mov	r0, #4
 7714 3da4 FEFFFFEB 		bl	CyU3PDebugPrint
 7715              	.LVL892:
 7716 3da8 28309DE5 		ldr	r3, [sp, #40]
 7717 3dac B3FAFFEA 		b	.L458
 7718              	.LVL893:
 7719              	.L633:
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 7720              		.loc 1 591 0
 7721 3db0 2324DBE5 		ldrb	r2, [fp, #1059]	@ zero_extendqisi2
 592:../uvc.c      **** 			 }
 7722              		.loc 1 592 0
 7723 3db4 2434DBE5 		ldrb	r3, [fp, #1060]	@ zero_extendqisi2
 7724 3db8 53FCFFEA 		b	.L873
 7725              	.L632:
 447:../uvc.c      **** 					 if(CamMode == 1){//720p or invendo
 7726              		.loc 1 447 0
 7727 3dbc 2D34D9E5 		ldrb	r3, [r9, #1069]	@ zero_extendqisi2
 7728              	.LVL894:
 449:../uvc.c      **** 							CyU3PDebugPrint (4, "back light compensation setting is not correct. %d %d\r\n", CamMode, se
 7729              		.loc 1 449 0
 7730 3dc0 020053E3 		cmp	r3, #2
 7731 3dc4 0600009A 		bls	.L640
 450:../uvc.c      **** 							sendData = 0; //set back to default
 7732              		.loc 1 450 0
 7733 3dc8 0120A0E3 		mov	r2, #1
 7734 3dcc 0400A0E3 		mov	r0, #4
 7735 3dd0 A0161FE5 		ldr	r1, .L927+76
 7736 3dd4 FEFFFFEB 		bl	CyU3PDebugPrint
 7737              	.LVL895:
 452:../uvc.c      **** 						}
 7738              		.loc 1 452 0
 7739 3dd8 0020A0E3 		mov	r2, #0
 451:../uvc.c      **** 							CtrlParArry[CtrlID][13] = 0;
 7740              		.loc 1 451 0
 7741 3ddc 0230A0E1 		mov	r3, r2
 452:../uvc.c      **** 						}
 7742              		.loc 1 452 0
 7743 3de0 2D24CBE5 		strb	r2, [fp, #1069]
 7744              	.LVL896:
 7745              	.L640:
 454:../uvc.c      **** 					 }
 7746              		.loc 1 454 0
 7747 3de4 043083E2 		add	r3, r3, #4
 7748              	.LVL897:
 7749 3de8 FF6003E2 		and	r6, r3, #255
 7750              	.LVL898:
 572:../uvc.c      **** 
 7751              		.loc 1 572 0
 7752 3dec 9C161FE5 		ldr	r1, .L927+108
 458:../uvc.c      **** 					 break;
 7753              		.loc 1 458 0
 7754 3df0 0030A0E3 		mov	r3, #0
 572:../uvc.c      **** 
 7755              		.loc 1 572 0
 7756 3df4 0800A0E1 		mov	r0, r8
 458:../uvc.c      **** 					 break;
 7757              		.loc 1 458 0
 7758 3df8 A130C4E5 		strb	r3, [r4, #161]
 457:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 7759              		.loc 1 457 0
 7760 3dfc A060C4E5 		strb	r6, [r4, #160]
 572:../uvc.c      **** 
 7761              		.loc 1 572 0
 7762 3e00 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 7763              	.LVL899:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7764              		.loc 1 411 0
 7765 3e04 FF10A0E3 		mov	r1, #255
 7766 3e08 0130A0E1 		mov	r3, r1
 7767 3e0c DEFFFFEA 		b	.L639
 7768              	.LVL900:
 7769              	.L496:
 7770              	.LBE274:
 7771              	.LBE328:
 7772              	.LBE367:
 7773              	.LBE413:
 7774              	.LBB414:
 7775              	.LBB235:
 7776              	.LBB224:
 7777              	.LBB220:
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 7778              		.loc 1 591 0
 7779 3e10 FBC1D9E5 		ldrb	ip, [r9, #507]	@ zero_extendqisi2
 592:../uvc.c      **** 			 }
 7780              		.loc 1 592 0
 7781 3e14 FC21D9E5 		ldrb	r2, [r9, #508]	@ zero_extendqisi2
 7782 3e18 10FCFFEA 		b	.L857
 7783              	.L495:
 529:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 7784              		.loc 1 529 0
 7785 3e1c 0582D9E5 		ldrb	r8, [r9, #517]	@ zero_extendqisi2
 572:../uvc.c      **** 
 7786              		.loc 1 572 0
 7787 3e20 0300A0E1 		mov	r0, r3
 529:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 7788              		.loc 1 529 0
 7789 3e24 808048E2 		sub	r8, r8, #128
 7790 3e28 FF8008E2 		and	r8, r8, #255
 7791              	.LVL901:
 7792              	.L889:
 7793              	.LBE220:
 7794              	.LBE224:
 7795              	.LBE235:
 7796              	.LBE414:
 7797              	.LBB415:
 7798              	.LBB368:
 7799              	.LBB329:
 7800              	.LBB253:
 567:../uvc.c      **** 					 sendData = glEp0Buffer[0];
 7801              		.loc 1 567 0
 7802 3e2c 0030A0E3 		mov	r3, #0
 572:../uvc.c      **** 
 7803              		.loc 1 572 0
 7804 3e30 E0161FE5 		ldr	r1, .L927+108
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7805              		.loc 1 411 0
 7806 3e34 FF60A0E3 		mov	r6, #255
 566:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 7807              		.loc 1 566 0
 7808 3e38 A080C4E5 		strb	r8, [r4, #160]
 567:../uvc.c      **** 					 sendData = glEp0Buffer[0];
 7809              		.loc 1 567 0
 7810 3e3c A130C4E5 		strb	r3, [r4, #161]
 7811              	.LVL902:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7812              		.loc 1 411 0
 7813 3e40 06A0A0E1 		mov	r10, r6
 572:../uvc.c      **** 
 7814              		.loc 1 572 0
 7815 3e44 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 7816              	.LVL903:
 7817 3e48 ADFFFFEA 		b	.L652
 7818              	.LVL904:
 7819              	.L566:
 7820              	.LBE253:
 7821              	.LBE329:
 7822              	.LBB330:
 7823              	.LBB294:
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 7824              		.loc 1 591 0
 7825 3e4c 3323DBE5 		ldrb	r2, [fp, #819]	@ zero_extendqisi2
 592:../uvc.c      **** 			 }
 7826              		.loc 1 592 0
 7827 3e50 3433DBE5 		ldrb	r3, [fp, #820]	@ zero_extendqisi2
 7828 3e54 F3FAFFEA 		b	.L875
 7829              	.L565:
 556:../uvc.c      **** 						 glEp0Buffer[0] = CtrlParArry[CtrlID][13];//ext_control array;
 7830              		.loc 1 556 0
 7831 3e58 3E30D4E5 		ldrb	r3, [r4, #62]	@ zero_extendqisi2
 7832 3e5c 000053E3 		cmp	r3, #0
 7833 3e60 0500001A 		bne	.L573
 560:../uvc.c      **** 		 	 			CtrlParArry[CtrlID][13] = glEp0Buffer[0];
 7834              		.loc 1 560 0
 7835 3e64 18009DE5 		ldr	r0, [sp, #24]
 7836 3e68 0810A0E1 		mov	r1, r8
 7837 3e6c FEFFFFEB 		bl	SensorGetControl
 7838              	.LVL905:
 563:../uvc.c      **** 		 	 		 }
 7839              		.loc 1 563 0
 7840 3e70 0130A0E3 		mov	r3, #1
 7841 3e74 3E30C4E5 		strb	r3, [r4, #62]
 561:../uvc.c      **** 		 	 			glEp0Buffer[1] = CtrlParArry[CtrlID][14];
 7842              		.loc 1 561 0
 7843 3e78 3D03CBE5 		strb	r0, [fp, #829]
 7844              	.L573:
 566:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 7845              		.loc 1 566 0
 7846 3e7c 3D83DBE5 		ldrb	r8, [fp, #829]	@ zero_extendqisi2
 7847              	.LVL906:
 7848              	.L888:
 7849              	.LBE294:
 7850              	.LBE330:
 7851              	.LBB331:
 7852              	.LBB254:
 572:../uvc.c      **** 
 7853              		.loc 1 572 0
 7854 3e80 0600A0E1 		mov	r0, r6
 7855 3e84 E8FFFFEA 		b	.L889
 7856              	.LVL907:
 7857              	.L618:
 7858              	.LBE254:
 7859              	.LBE331:
 7860              	.LBB332:
 7861              	.LBB279:
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 7862              		.loc 1 591 0
 7863 3e88 F323D9E5 		ldrb	r2, [r9, #1011]	@ zero_extendqisi2
 592:../uvc.c      **** 			 }
 7864              		.loc 1 592 0
 7865 3e8c F433D9E5 		ldrb	r3, [r9, #1012]	@ zero_extendqisi2
 7866 3e90 E4FAFFEA 		b	.L875
 7867              	.L617:
 556:../uvc.c      **** 						 glEp0Buffer[0] = CtrlParArry[CtrlID][13];//ext_control array;
 7868              		.loc 1 556 0
 7869 3e94 4620D4E5 		ldrb	r2, [r4, #70]	@ zero_extendqisi2
 7870 3e98 000052E3 		cmp	r2, #0
 7871 3e9c 0500001A 		bne	.L625
 560:../uvc.c      **** 		 	 			CtrlParArry[CtrlID][13] = glEp0Buffer[0];
 7872              		.loc 1 560 0
 7873 3ea0 18009DE5 		ldr	r0, [sp, #24]
 7874 3ea4 0810A0E1 		mov	r1, r8
 7875 3ea8 FEFFFFEB 		bl	SensorGetControl
 7876              	.LVL908:
 563:../uvc.c      **** 		 	 		 }
 7877              		.loc 1 563 0
 7878 3eac 0130A0E3 		mov	r3, #1
 7879 3eb0 4630C5E5 		strb	r3, [r5, #70]
 561:../uvc.c      **** 		 	 			glEp0Buffer[1] = CtrlParArry[CtrlID][14];
 7880              		.loc 1 561 0
 7881 3eb4 FD03C9E5 		strb	r0, [r9, #1021]
 7882              	.L625:
 566:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 7883              		.loc 1 566 0
 7884 3eb8 FD83DBE5 		ldrb	r8, [fp, #1021]	@ zero_extendqisi2
 7885              	.LVL909:
 7886 3ebc EFFFFFEA 		b	.L888
 7887              	.LVL910:
 7888              	.L543:
 7889              	.LBE279:
 7890              	.LBE332:
 7891              	.LBB333:
 7892              	.LBB268:
 686:../uvc.c      **** 									 if(CTCtrlParArry[AutoExMCtlID1][13] == 8) {
 7893              		.loc 1 686 0
 7894 3ec0 BD24D9E5 		ldrb	r2, [r9, #1213]	@ zero_extendqisi2
 685:../uvc.c      **** 								 if((CTCtrlParArry[AutoExMCtlID1][13] != 1) && (CTCtrlParArry[AutoExMCtlID1][13] != 4)){
 7895              		.loc 1 685 0
 7896 3ec4 01304AE2 		sub	r3, r10, #1
 686:../uvc.c      **** 									 if(CTCtrlParArry[AutoExMCtlID1][13] == 8) {
 7897              		.loc 1 686 0
 7898 3ec8 040052E3 		cmp	r2, #4
 7899 3ecc 01005213 		cmpne	r2, #1
 685:../uvc.c      **** 								 if((CTCtrlParArry[AutoExMCtlID1][13] != 1) && (CTCtrlParArry[AutoExMCtlID1][13] != 4)){
 7900              		.loc 1 685 0
 7901 3ed0 FF3003E2 		and	r3, r3, #255
 7902              	.LVL911:
 686:../uvc.c      **** 									 if(CTCtrlParArry[AutoExMCtlID1][13] == 8) {
 7903              		.loc 1 686 0
 7904 3ed4 0300000A 		beq	.L546
 687:../uvc.c      **** 										 CTCtrlParArry[AutoExMCtlID1][13] = 1; //manual mode
 7905              		.loc 1 687 0
 7906 3ed8 080052E3 		cmp	r2, #8
 690:../uvc.c      **** 									 }
 7907              		.loc 1 690 0
 7908 3edc 0420A013 		movne	r2, #4
 688:../uvc.c      **** 									 }else{
 7909              		.loc 1 688 0
 7910 3ee0 BD74C905 		streqb	r7, [r9, #1213]
 690:../uvc.c      **** 									 }
 7911              		.loc 1 690 0
 7912 3ee4 BD24C915 		strneb	r2, [r9, #1213]
 7913              	.L546:
 693:../uvc.c      **** 									 CTCtrlParArry[ExTmACtlID3][13] = ExTime[Data1][0];
 7914              		.loc 1 693 0
 7915 3ee8 070053E3 		cmp	r3, #7
 695:../uvc.c      **** 								 }else{
 7916              		.loc 1 695 0
 7917 3eec B8C71F95 		ldrls	ip, .L927+80
 697:../uvc.c      **** 									 CTCtrlParArry[ExTmACtlID3][14] = ExTime[7][1];
 7918              		.loc 1 697 0
 7919 3ef0 0120A083 		movhi	r2, #1
 695:../uvc.c      **** 								 }else{
 7920              		.loc 1 695 0
 7921 3ef4 83208C90 		addls	r2, ip, r3, asl #1
 7922 3ef8 0120D295 		ldrlsb	r2, [r2, #1]	@ zero_extendqisi2
 694:../uvc.c      **** 									 CTCtrlParArry[ExTmACtlID3][14] = ExTime[Data1][1];
 7923              		.loc 1 694 0
 7924 3efc 8330DC97 		ldrlsb	r3, [ip, r3, asl #1]	@ zero_extendqisi2
 7925              	.LVL912:
 698:../uvc.c      **** 								 }
 7926              		.loc 1 698 0
 7927 3f00 0030A083 		movhi	r3, #0
 695:../uvc.c      **** 								 }else{
 7928              		.loc 1 695 0
 7929 3f04 EE24CB95 		strlsb	r2, [fp, #1262]
 694:../uvc.c      **** 									 CTCtrlParArry[ExTmACtlID3][14] = ExTime[Data1][1];
 7930              		.loc 1 694 0
 7931 3f08 ED34CB95 		strlsb	r3, [fp, #1261]
 697:../uvc.c      **** 									 CTCtrlParArry[ExTmACtlID3][14] = ExTime[7][1];
 7932              		.loc 1 697 0
 7933 3f0c ED24CB85 		strhib	r2, [fp, #1261]
 698:../uvc.c      **** 								 }
 7934              		.loc 1 698 0
 7935 3f10 EE34CB85 		strhib	r3, [fp, #1262]
 7936 3f14 BDFEFFEA 		b	.L544
 7937              	.LVL913:
 7938              	.L534:
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 7939              		.loc 1 591 0
 7940 3f18 0323DBE5 		ldrb	r2, [fp, #771]	@ zero_extendqisi2
 592:../uvc.c      **** 			 }
 7941              		.loc 1 592 0
 7942 3f1c 0433DBE5 		ldrb	r3, [fp, #772]	@ zero_extendqisi2
 7943 3f20 C0FAFFEA 		b	.L875
 7944              	.L533:
 556:../uvc.c      **** 						 glEp0Buffer[0] = CtrlParArry[CtrlID][13];//ext_control array;
 7945              		.loc 1 556 0
 7946 3f24 3C30D4E5 		ldrb	r3, [r4, #60]	@ zero_extendqisi2
 7947 3f28 000053E3 		cmp	r3, #0
 7948 3f2c 0500001A 		bne	.L541
 560:../uvc.c      **** 		 	 			CtrlParArry[CtrlID][13] = glEp0Buffer[0];
 7949              		.loc 1 560 0
 7950 3f30 18009DE5 		ldr	r0, [sp, #24]
 7951 3f34 0810A0E1 		mov	r1, r8
 7952 3f38 FEFFFFEB 		bl	SensorGetControl
 7953              	.LVL914:
 563:../uvc.c      **** 		 	 		 }
 7954              		.loc 1 563 0
 7955 3f3c 0130A0E3 		mov	r3, #1
 7956 3f40 3C30C5E5 		strb	r3, [r5, #60]
 561:../uvc.c      **** 		 	 			glEp0Buffer[1] = CtrlParArry[CtrlID][14];
 7957              		.loc 1 561 0
 7958 3f44 0D03CBE5 		strb	r0, [fp, #781]
 7959              	.L541:
 566:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 7960              		.loc 1 566 0
 7961 3f48 0D83DBE5 		ldrb	r8, [fp, #781]	@ zero_extendqisi2
 7962              	.LVL915:
 7963 3f4c CBFFFFEA 		b	.L888
 7964              	.LVL916:
 7965              	.L697:
 7966              	.LBE268:
 7967              	.LBE333:
 7968              	.LBB334:
 7969              	.LBB263:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7970              		.loc 1 411 0
 7971 3f50 FF80A0E3 		mov	r8, #255
 7972              	.LVL917:
 946:../uvc.c      **** 			   }
 7973              		.loc 1 946 0
 7974 3f54 0400A0E3 		mov	r0, #4
 7975              	.LVL918:
 7976 3f58 14181FE5 		ldr	r1, .L927+96
 7977 3f5c FEFFFFEB 		bl	CyU3PDebugPrint
 7978              	.LVL919:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 7979              		.loc 1 411 0
 7980 3f60 08A0A0E1 		mov	r10, r8
 7981              	.LVL920:
 7982 3f64 0860A0E1 		mov	r6, r8
 7983 3f68 08C0A0E1 		mov	ip, r8
 7984              	.LVL921:
 7985              	.L696:
 957:../uvc.c      **** }
 7986              		.loc 1 957 0
 7987 3f6c 40048DE8 		stmia	sp, {r6, r10}
 7988 3f70 08808DE5 		str	r8, [sp, #8]
 7989              	.LVL922:
 7990              	.L883:
 7991 3f74 0C30A0E1 		mov	r3, ip
 7992 3f78 0720A0E1 		mov	r2, r7
 7993 3f7c 0400A0E3 		mov	r0, #4
 7994 3f80 44181FE5 		ldr	r1, .L927+88
 7995 3f84 FEFFFFEB 		bl	CyU3PDebugPrint
 7996              	.LVL923:
 7997 3f88 28309DE5 		ldr	r3, [sp, #40]
 7998 3f8c 3BFAFFEA 		b	.L458
 7999              	.LVL924:
 8000              	.L690:
 580:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][4];
 8001              		.loc 1 580 0
 8002 3f90 93C0DBE5 		ldrb	ip, [fp, #147]	@ zero_extendqisi2
 581:../uvc.c      **** 		 	 }
 8003              		.loc 1 581 0
 8004 3f94 9420DBE5 		ldrb	r2, [fp, #148]	@ zero_extendqisi2
 8005 3f98 1CFBFFEA 		b	.L881
 8006              	.L689:
 440:../uvc.c      **** 						 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][14];
 8007              		.loc 1 440 0
 8008 3f9c 9DA0DBE5 		ldrb	r10, [fp, #157]	@ zero_extendqisi2
 441:../uvc.c      **** 						 sendData = glEp0Buffer[0];
 8009              		.loc 1 441 0
 8010 3fa0 9E80DBE5 		ldrb	r8, [fp, #158]	@ zero_extendqisi2
 572:../uvc.c      **** 
 8011              		.loc 1 572 0
 8012 3fa4 0300A0E1 		mov	r0, r3
 8013 3fa8 58181FE5 		ldr	r1, .L927+108
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8014              		.loc 1 411 0
 8015 3fac FF60A0E3 		mov	r6, #255
 440:../uvc.c      **** 						 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][14];
 8016              		.loc 1 440 0
 8017 3fb0 A0A0C4E5 		strb	r10, [r4, #160]
 441:../uvc.c      **** 						 sendData = glEp0Buffer[0];
 8018              		.loc 1 441 0
 8019 3fb4 A180C4E5 		strb	r8, [r4, #161]
 8020              	.LVL925:
 572:../uvc.c      **** 
 8021              		.loc 1 572 0
 8022 3fb8 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 8023              	.LVL926:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8024              		.loc 1 411 0
 8025 3fbc 06C0A0E1 		mov	ip, r6
 8026 3fc0 E9FFFFEA 		b	.L696
 8027              	.LVL927:
 8028              	.L919:
 8029              	.LBE263:
 8030              	.LBE334:
 8031              	.LBE368:
 8032              	.LBE415:
 8033              	.LBB416:
 8034              	.LBB386:
 8035              	.LBB380:
 8036              	.LBB379:
1143:../uvc.c      ****     }
 8037              		.loc 1 1143 0
 8038 3fc4 8C181FE5 		ldr	r1, .L927+84
 8039 3fc8 0400A0E3 		mov	r0, #4
 8040              	.LVL928:
 8041 3fcc FEFFFFEB 		bl	CyU3PDebugPrint
 8042              	.LVL929:
 8043 3fd0 33FCFFEA 		b	.L720
 8044              	.LVL930:
 8045              	.L553:
 8046              	.LBE379:
 8047              	.LBE380:
 8048              	.LBE386:
 8049              	.LBE416:
 8050              	.LBB417:
 8051              	.LBB369:
 8052              	.LBB335:
 8053              	.LBB299:
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 8054              		.loc 1 591 0
 8055 3fd4 1B23D9E5 		ldrb	r2, [r9, #795]	@ zero_extendqisi2
 592:../uvc.c      **** 			 }
 8056              		.loc 1 592 0
 8057 3fd8 1C33D9E5 		ldrb	r3, [r9, #796]	@ zero_extendqisi2
 8058 3fdc 91FAFFEA 		b	.L875
 8059              	.L552:
 556:../uvc.c      **** 						 glEp0Buffer[0] = CtrlParArry[CtrlID][13];//ext_control array;
 8060              		.loc 1 556 0
 8061 3fe0 3D30D4E5 		ldrb	r3, [r4, #61]	@ zero_extendqisi2
 8062 3fe4 000053E3 		cmp	r3, #0
 8063 3fe8 0500001A 		bne	.L560
 560:../uvc.c      **** 		 	 			CtrlParArry[CtrlID][13] = glEp0Buffer[0];
 8064              		.loc 1 560 0
 8065 3fec 18009DE5 		ldr	r0, [sp, #24]
 8066 3ff0 0810A0E1 		mov	r1, r8
 8067 3ff4 FEFFFFEB 		bl	SensorGetControl
 8068              	.LVL931:
 563:../uvc.c      **** 		 	 		 }
 8069              		.loc 1 563 0
 8070 3ff8 0130A0E3 		mov	r3, #1
 8071 3ffc 3D30C5E5 		strb	r3, [r5, #61]
 561:../uvc.c      **** 		 	 			glEp0Buffer[1] = CtrlParArry[CtrlID][14];
 8072              		.loc 1 561 0
 8073 4000 2503C9E5 		strb	r0, [r9, #805]
 8074              	.L560:
 566:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 8075              		.loc 1 566 0
 8076 4004 2583DBE5 		ldrb	r8, [fp, #805]	@ zero_extendqisi2
 8077              	.LVL932:
 8078 4008 9CFFFFEA 		b	.L888
 8079              	.LVL933:
 8080              	.L670:
 8081              	.LBE299:
 8082              	.LBE335:
 8083              	.LBB336:
 8084              	.LBB289:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8085              		.loc 1 411 0
 8086 400c FF70A0E3 		mov	r7, #255
 946:../uvc.c      **** 			   }
 8087              		.loc 1 946 0
 8088 4010 0400A0E3 		mov	r0, #4
 8089              	.LVL934:
 8090 4014 D0181FE5 		ldr	r1, .L927+96
 8091 4018 FEFFFFEB 		bl	CyU3PDebugPrint
 8092              	.LVL935:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8093              		.loc 1 411 0
 8094 401c 0780A0E1 		mov	r8, r7
 8095 4020 07C0A0E1 		mov	ip, r7
 8096 4024 0730A0E1 		mov	r3, r7
 8097              	.LVL936:
 8098              	.L665:
 957:../uvc.c      **** }
 8099              		.loc 1 957 0
 8100 4028 00118DE8 		stmia	sp, {r8, ip}
 8101 402c F0181FE5 		ldr	r1, .L927+88
 8102 4030 08708DE5 		str	r7, [sp, #8]
 8103 4034 0A20A0E1 		mov	r2, r10
 8104 4038 0400A0E3 		mov	r0, #4
 8105 403c FEFFFFEB 		bl	CyU3PDebugPrint
 8106              	.LVL937:
 8107 4040 28309DE5 		ldr	r3, [sp, #40]
 8108 4044 0DFAFFEA 		b	.L458
 8109              	.LVL938:
 8110              	.L659:
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 8111              		.loc 1 591 0
 8112 4048 6B24DBE5 		ldrb	r2, [fp, #1131]	@ zero_extendqisi2
 592:../uvc.c      **** 			 }
 8113              		.loc 1 592 0
 8114 404c 6C34DBE5 		ldrb	r3, [fp, #1132]	@ zero_extendqisi2
 8115 4050 50FCFFEA 		b	.L877
 8116              	.L658:
 8117              	.LVL939:
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8118              		.loc 1 461 0
 8119 4054 000056E3 		cmp	r6, #0
 8120 4058 2C00000A 		beq	.L667
 462:../uvc.c      **** 			 		 }
 8121              		.loc 1 462 0
 8122 405c 9430D4E5 		ldrb	r3, [r4, #148]	@ zero_extendqisi2
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8123              		.loc 1 461 0
 8124 4060 010056E3 		cmp	r6, #1
 462:../uvc.c      **** 			 		 }
 8125              		.loc 1 462 0
 8126 4064 A030C4E5 		strb	r3, [r4, #160]
 8127              	.LVL940:
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8128              		.loc 1 461 0
 8129 4068 2800009A 		bls	.L667
 462:../uvc.c      **** 			 		 }
 8130              		.loc 1 462 0
 8131 406c 9530D5E5 		ldrb	r3, [r5, #149]	@ zero_extendqisi2
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8132              		.loc 1 461 0
 8133 4070 020056E3 		cmp	r6, #2
 462:../uvc.c      **** 			 		 }
 8134              		.loc 1 462 0
 8135 4074 A130C5E5 		strb	r3, [r5, #161]
 8136              	.LVL941:
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8137              		.loc 1 461 0
 8138 4078 2400000A 		beq	.L667
 462:../uvc.c      **** 			 		 }
 8139              		.loc 1 462 0
 8140 407c 9630D5E5 		ldrb	r3, [r5, #150]	@ zero_extendqisi2
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8141              		.loc 1 461 0
 8142 4080 030056E3 		cmp	r6, #3
 462:../uvc.c      **** 			 		 }
 8143              		.loc 1 462 0
 8144 4084 A230C5E5 		strb	r3, [r5, #162]
 8145              	.LVL942:
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8146              		.loc 1 461 0
 8147 4088 2000000A 		beq	.L667
 462:../uvc.c      **** 			 		 }
 8148              		.loc 1 462 0
 8149 408c 9730D5E5 		ldrb	r3, [r5, #151]	@ zero_extendqisi2
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8150              		.loc 1 461 0
 8151 4090 040056E3 		cmp	r6, #4
 462:../uvc.c      **** 			 		 }
 8152              		.loc 1 462 0
 8153 4094 A330C5E5 		strb	r3, [r5, #163]
 8154              	.LVL943:
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8155              		.loc 1 461 0
 8156 4098 1C00000A 		beq	.L667
 462:../uvc.c      **** 			 		 }
 8157              		.loc 1 462 0
 8158 409c 9830D5E5 		ldrb	r3, [r5, #152]	@ zero_extendqisi2
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8159              		.loc 1 461 0
 8160 40a0 050056E3 		cmp	r6, #5
 462:../uvc.c      **** 			 		 }
 8161              		.loc 1 462 0
 8162 40a4 A430C5E5 		strb	r3, [r5, #164]
 8163              	.LVL944:
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8164              		.loc 1 461 0
 8165 40a8 1800000A 		beq	.L667
 462:../uvc.c      **** 			 		 }
 8166              		.loc 1 462 0
 8167 40ac 9930D5E5 		ldrb	r3, [r5, #153]	@ zero_extendqisi2
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8168              		.loc 1 461 0
 8169 40b0 060056E3 		cmp	r6, #6
 462:../uvc.c      **** 			 		 }
 8170              		.loc 1 462 0
 8171 40b4 A530C5E5 		strb	r3, [r5, #165]
 8172              	.LVL945:
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8173              		.loc 1 461 0
 8174 40b8 1400000A 		beq	.L667
 462:../uvc.c      **** 			 		 }
 8175              		.loc 1 462 0
 8176 40bc 9A30D5E5 		ldrb	r3, [r5, #154]	@ zero_extendqisi2
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8177              		.loc 1 461 0
 8178 40c0 070056E3 		cmp	r6, #7
 462:../uvc.c      **** 			 		 }
 8179              		.loc 1 462 0
 8180 40c4 A630C5E5 		strb	r3, [r5, #166]
 8181              	.LVL946:
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8182              		.loc 1 461 0
 8183 40c8 1000000A 		beq	.L667
 462:../uvc.c      **** 			 		 }
 8184              		.loc 1 462 0
 8185 40cc 9B30D5E5 		ldrb	r3, [r5, #155]	@ zero_extendqisi2
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8186              		.loc 1 461 0
 8187 40d0 080056E3 		cmp	r6, #8
 462:../uvc.c      **** 			 		 }
 8188              		.loc 1 462 0
 8189 40d4 A730C5E5 		strb	r3, [r5, #167]
 8190              	.LVL947:
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8191              		.loc 1 461 0
 8192 40d8 0C00000A 		beq	.L667
 462:../uvc.c      **** 			 		 }
 8193              		.loc 1 462 0
 8194 40dc 9C30D5E5 		ldrb	r3, [r5, #156]	@ zero_extendqisi2
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8195              		.loc 1 461 0
 8196 40e0 090056E3 		cmp	r6, #9
 462:../uvc.c      **** 			 		 }
 8197              		.loc 1 462 0
 8198 40e4 A830C5E5 		strb	r3, [r5, #168]
 8199              	.LVL948:
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8200              		.loc 1 461 0
 8201 40e8 0800000A 		beq	.L667
 462:../uvc.c      **** 			 		 }
 8202              		.loc 1 462 0
 8203 40ec 9D30D4E5 		ldrb	r3, [r4, #157]	@ zero_extendqisi2
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8204              		.loc 1 461 0
 8205 40f0 0A0056E3 		cmp	r6, #10
 462:../uvc.c      **** 			 		 }
 8206              		.loc 1 462 0
 8207 40f4 A930C4E5 		strb	r3, [r4, #169]
 8208              	.LVL949:
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8209              		.loc 1 461 0
 8210 40f8 0400000A 		beq	.L667
 462:../uvc.c      **** 			 		 }
 8211              		.loc 1 462 0
 8212 40fc 9E30D5E5 		ldrb	r3, [r5, #158]	@ zero_extendqisi2
 461:../uvc.c      **** 			 			glEp0Buffer[idx] = I2CCMDArry[idx];
 8213              		.loc 1 461 0
 8214 4100 0B0056E3 		cmp	r6, #11
 462:../uvc.c      **** 			 		 }
 8215              		.loc 1 462 0
 8216 4104 AA30C5E5 		strb	r3, [r5, #170]
 8217              	.LVL950:
 8218 4108 9F30D515 		ldrneb	r3, [r5, #159]	@ zero_extendqisi2
 8219 410c AB30C515 		strneb	r3, [r5, #171]
 8220              	.LVL951:
 8221              	.L667:
 471:../uvc.c      **** 			 		 {
 8222              		.loc 1 471 0
 8223 4110 9F30D4E5 		ldrb	r3, [r4, #159]	@ zero_extendqisi2
 464:../uvc.c      **** 			 		 sendData1 = glEp0Buffer[10];
 8224              		.loc 1 464 0
 8225 4114 A9C0D4E5 		ldrb	ip, [r4, #169]	@ zero_extendqisi2
 8226              	.LVL952:
 471:../uvc.c      **** 			 		 {
 8227              		.loc 1 471 0
 8228 4118 FF0053E3 		cmp	r3, #255
 465:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8229              		.loc 1 465 0
 8230 411c AA70D4E5 		ldrb	r7, [r4, #170]	@ zero_extendqisi2
 8231              	.LVL953:
 471:../uvc.c      **** 			 		 {
 8232              		.loc 1 471 0
 8233 4120 0600000A 		beq	.L669
 473:../uvc.c      **** 			 		 }
 8234              		.loc 1 473 0
 8235 4124 9D20D5E5 		ldrb	r2, [r5, #157]	@ zero_extendqisi2
 8236 4128 9E30D5E5 		ldrb	r3, [r5, #158]	@ zero_extendqisi2
 8237 412c 0400A0E3 		mov	r0, #4
 8238 4130 F0191FE5 		ldr	r1, .L927+92
 8239 4134 14C08DE5 		str	ip, [sp, #20]
 8240 4138 FEFFFFEB 		bl	CyU3PDebugPrint
 8241              	.LVL954:
 8242 413c 14C09DE5 		ldr	ip, [sp, #20]
 8243              	.L669:
 8244              	.LVL955:
 572:../uvc.c      **** 
 8245              		.loc 1 572 0
 8246 4140 0600A0E1 		mov	r0, r6
 8247 4144 F4191FE5 		ldr	r1, .L927+108
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8248              		.loc 1 411 0
 8249 4148 FF80A0E3 		mov	r8, #255
 572:../uvc.c      **** 
 8250              		.loc 1 572 0
 8251 414c 14C08DE5 		str	ip, [sp, #20]
 8252 4150 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 8253              	.LVL956:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8254              		.loc 1 411 0
 8255 4154 0830A0E1 		mov	r3, r8
 8256 4158 14C09DE5 		ldr	ip, [sp, #20]
 8257 415c B1FFFFEA 		b	.L665
 8258              	.LVL957:
 8259              	.L605:
 8260              	.LBE289:
 8261              	.LBE336:
 8262              	.LBB337:
 8263              	.LBB245:
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 8264              		.loc 1 591 0
 8265 4160 AB23DBE5 		ldrb	r2, [fp, #939]	@ zero_extendqisi2
 592:../uvc.c      **** 			 }
 8266              		.loc 1 592 0
 8267 4164 AC33DBE5 		ldrb	r3, [fp, #940]	@ zero_extendqisi2
 8268 4168 2EFAFFEA 		b	.L875
 8269              	.L604:
 556:../uvc.c      **** 						 glEp0Buffer[0] = CtrlParArry[CtrlID][13];//ext_control array;
 8270              		.loc 1 556 0
 8271 416c 4330D4E5 		ldrb	r3, [r4, #67]	@ zero_extendqisi2
 8272 4170 000053E3 		cmp	r3, #0
 8273 4174 0500001A 		bne	.L612
 560:../uvc.c      **** 		 	 			CtrlParArry[CtrlID][13] = glEp0Buffer[0];
 8274              		.loc 1 560 0
 8275 4178 18009DE5 		ldr	r0, [sp, #24]
 8276 417c 0810A0E1 		mov	r1, r8
 8277 4180 FEFFFFEB 		bl	SensorGetControl
 8278              	.LVL958:
 563:../uvc.c      **** 		 	 		 }
 8279              		.loc 1 563 0
 8280 4184 0130A0E3 		mov	r3, #1
 8281 4188 4330C5E5 		strb	r3, [r5, #67]
 561:../uvc.c      **** 		 	 			glEp0Buffer[1] = CtrlParArry[CtrlID][14];
 8282              		.loc 1 561 0
 8283 418c B503CBE5 		strb	r0, [fp, #949]
 8284              	.L612:
 566:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 8285              		.loc 1 566 0
 8286 4190 B583DBE5 		ldrb	r8, [fp, #949]	@ zero_extendqisi2
 8287              	.LVL959:
 8288 4194 39FFFFEA 		b	.L888
 8289              	.LVL960:
 8290              	.L685:
 8291              	.LBE245:
 8292              	.LBE337:
 8293              	.LBB338:
 8294              	.LBB305:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8295              		.loc 1 411 0
 8296 4198 FFA0A0E3 		mov	r10, #255
 8297              	.LVL961:
 946:../uvc.c      **** 			   }
 8298              		.loc 1 946 0
 8299 419c 0400A0E3 		mov	r0, #4
 8300              	.LVL962:
 8301 41a0 5C1A1FE5 		ldr	r1, .L927+96
 8302 41a4 FEFFFFEB 		bl	CyU3PDebugPrint
 8303              	.LVL963:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8304              		.loc 1 411 0
 8305 41a8 0A60A0E1 		mov	r6, r10
 8306 41ac 0A30A0E1 		mov	r3, r10
 8307 41b0 0AC0A0E1 		mov	ip, r10
 8308              	.LVL964:
 8309              	.L684:
 957:../uvc.c      **** }
 8310              		.loc 1 957 0
 8311 41b4 00608DE5 		str	r6, [sp]
 8312 41b8 08048DE9 		stmib	sp, {r3, r10}
 8313 41bc 6CFFFFEA 		b	.L883
 8314              	.LVL965:
 8315              	.L678:
 580:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][4];
 8316              		.loc 1 580 0
 8317 41c0 63C0D9E5 		ldrb	ip, [r9, #99]	@ zero_extendqisi2
 581:../uvc.c      **** 		 	 }
 8318              		.loc 1 581 0
 8319 41c4 6430D9E5 		ldrb	r3, [r9, #100]	@ zero_extendqisi2
 8320 41c8 51FCFFEA 		b	.L879
 8321              	.L677:
 440:../uvc.c      **** 						 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][14];
 8322              		.loc 1 440 0
 8323 41cc 6D30D9E5 		ldrb	r3, [r9, #109]	@ zero_extendqisi2
 441:../uvc.c      **** 						 sendData = glEp0Buffer[0];
 8324              		.loc 1 441 0
 8325 41d0 6EA0D9E5 		ldrb	r10, [r9, #110]	@ zero_extendqisi2
 572:../uvc.c      **** 
 8326              		.loc 1 572 0
 8327 41d4 0200A0E1 		mov	r0, r2
 8328 41d8 881A1FE5 		ldr	r1, .L927+108
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8329              		.loc 1 411 0
 8330 41dc FF60A0E3 		mov	r6, #255
 440:../uvc.c      **** 						 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][14];
 8331              		.loc 1 440 0
 8332 41e0 A030C4E5 		strb	r3, [r4, #160]
 572:../uvc.c      **** 
 8333              		.loc 1 572 0
 8334 41e4 14308DE5 		str	r3, [sp, #20]
 441:../uvc.c      **** 						 sendData = glEp0Buffer[0];
 8335              		.loc 1 441 0
 8336 41e8 A1A0C4E5 		strb	r10, [r4, #161]
 8337              	.LVL966:
 572:../uvc.c      **** 
 8338              		.loc 1 572 0
 8339 41ec FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 8340              	.LVL967:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8341              		.loc 1 411 0
 8342 41f0 06C0A0E1 		mov	ip, r6
 8343 41f4 14309DE5 		ldr	r3, [sp, #20]
 8344 41f8 EDFFFFEA 		b	.L684
 8345              	.LVL968:
 8346              	.L490:
 8347              	.LBE305:
 8348              	.LBE338:
 8349              	.LBE369:
 8350              	.LBE417:
 8351              	.LBB418:
 8352              	.LBB236:
 8353              	.LBB225:
 8354              	.LBB215:
 946:../uvc.c      **** 			   }
 8355              		.loc 1 946 0
 8356 41fc 0400A0E3 		mov	r0, #4
 8357              	.LVL969:
 8358 4200 BC1A1FE5 		ldr	r1, .L927+96
 8359 4204 FEFFFFEB 		bl	CyU3PDebugPrint
 8360              	.LVL970:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8361              		.loc 1 411 0
 8362 4208 FF70A0E3 		mov	r7, #255
 8363 420c 0760A0E1 		mov	r6, r7
 8364              	.LVL971:
 8365 4210 0780A0E1 		mov	r8, r7
 8366              	.LVL972:
 8367              	.L488:
 957:../uvc.c      **** }
 8368              		.loc 1 957 0
 8369 4214 FF10A0E3 		mov	r1, #255
 8370 4218 C0008DE8 		stmia	sp, {r6, r7}
 8371 421c 0A20A0E1 		mov	r2, r10
 8372 4220 0830A0E1 		mov	r3, r8
 8373 4224 BAFEFFEA 		b	.L882
 8374              	.LVL973:
 8375              	.L482:
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 8376              		.loc 1 591 0
 8377 4228 E321DBE5 		ldrb	r2, [fp, #483]	@ zero_extendqisi2
 592:../uvc.c      **** 			 }
 8378              		.loc 1 592 0
 8379 422c E431DBE5 		ldrb	r3, [fp, #484]	@ zero_extendqisi2
 8380 4230 D3FAFFEA 		b	.L855
 8381              	.L481:
 556:../uvc.c      **** 						 glEp0Buffer[0] = CtrlParArry[CtrlID][13];//ext_control array;
 8382              		.loc 1 556 0
 8383 4234 3030D4E5 		ldrb	r3, [r4, #48]	@ zero_extendqisi2
 8384 4238 000053E3 		cmp	r3, #0
 8385 423c 0300001A 		bne	.L489
 560:../uvc.c      **** 		 	 			CtrlParArry[CtrlID][13] = glEp0Buffer[0];
 8386              		.loc 1 560 0
 8387 4240 FEFFFFEB 		bl	SensorGetControl
 8388              	.LVL974:
 563:../uvc.c      **** 		 	 		 }
 8389              		.loc 1 563 0
 8390 4244 0130A0E3 		mov	r3, #1
 8391 4248 3030C4E5 		strb	r3, [r4, #48]
 561:../uvc.c      **** 		 	 			glEp0Buffer[1] = CtrlParArry[CtrlID][14];
 8392              		.loc 1 561 0
 8393 424c ED01CBE5 		strb	r0, [fp, #493]
 8394              	.L489:
 566:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 8395              		.loc 1 566 0
 8396 4250 ED71DBE5 		ldrb	r7, [fp, #493]	@ zero_extendqisi2
 572:../uvc.c      **** 
 8397              		.loc 1 572 0
 8398 4254 0600A0E1 		mov	r0, r6
 567:../uvc.c      **** 					 sendData = glEp0Buffer[0];
 8399              		.loc 1 567 0
 8400 4258 0030A0E3 		mov	r3, #0
 572:../uvc.c      **** 
 8401              		.loc 1 572 0
 8402 425c 0C1B1FE5 		ldr	r1, .L927+108
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8403              		.loc 1 411 0
 8404 4260 FF60A0E3 		mov	r6, #255
 8405              	.LVL975:
 566:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 8406              		.loc 1 566 0
 8407 4264 A070C4E5 		strb	r7, [r4, #160]
 567:../uvc.c      **** 					 sendData = glEp0Buffer[0];
 8408              		.loc 1 567 0
 8409 4268 A130C4E5 		strb	r3, [r4, #161]
 8410              	.LVL976:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8411              		.loc 1 411 0
 8412 426c 0680A0E1 		mov	r8, r6
 572:../uvc.c      **** 
 8413              		.loc 1 572 0
 8414 4270 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 8415              	.LVL977:
 8416 4274 E6FFFFEA 		b	.L488
 8417              	.LVL978:
 8418              	.L592:
 8419              	.LBE215:
 8420              	.LBE225:
 8421              	.LBE236:
 8422              	.LBE418:
 8423              	.LBB419:
 8424              	.LBB370:
 8425              	.LBB339:
 8426              	.LBB310:
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 8427              		.loc 1 591 0
 8428 4278 7B23D9E5 		ldrb	r2, [r9, #891]	@ zero_extendqisi2
 592:../uvc.c      **** 			 }
 8429              		.loc 1 592 0
 8430 427c 7C33D9E5 		ldrb	r3, [r9, #892]	@ zero_extendqisi2
 8431 4280 E8F9FFEA 		b	.L875
 8432              	.L591:
 556:../uvc.c      **** 						 glEp0Buffer[0] = CtrlParArry[CtrlID][13];//ext_control array;
 8433              		.loc 1 556 0
 8434 4284 4130D4E5 		ldrb	r3, [r4, #65]	@ zero_extendqisi2
 8435 4288 000053E3 		cmp	r3, #0
 8436 428c 0500001A 		bne	.L599
 560:../uvc.c      **** 		 	 			CtrlParArry[CtrlID][13] = glEp0Buffer[0];
 8437              		.loc 1 560 0
 8438 4290 18009DE5 		ldr	r0, [sp, #24]
 8439 4294 0810A0E1 		mov	r1, r8
 8440 4298 FEFFFFEB 		bl	SensorGetControl
 8441              	.LVL979:
 563:../uvc.c      **** 		 	 		 }
 8442              		.loc 1 563 0
 8443 429c 0130A0E3 		mov	r3, #1
 8444 42a0 4130C5E5 		strb	r3, [r5, #65]
 561:../uvc.c      **** 		 	 			glEp0Buffer[1] = CtrlParArry[CtrlID][14];
 8445              		.loc 1 561 0
 8446 42a4 8503C9E5 		strb	r0, [r9, #901]
 8447              	.L599:
 566:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 8448              		.loc 1 566 0
 8449 42a8 8583DBE5 		ldrb	r8, [fp, #901]	@ zero_extendqisi2
 8450              	.LVL980:
 8451 42ac F3FEFFEA 		b	.L888
 8452              	.LVL981:
 8453              	.L646:
 8454              	.LBE310:
 8455              	.LBE339:
 8456              	.LBB340:
 8457              	.LBB255:
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 8458              		.loc 1 591 0
 8459 42b0 5324D9E5 		ldrb	r2, [r9, #1107]	@ zero_extendqisi2
 592:../uvc.c      **** 			 }
 8460              		.loc 1 592 0
 8461 42b4 5434D9E5 		ldrb	r3, [r9, #1108]	@ zero_extendqisi2
 8462 42b8 DAF9FFEA 		b	.L875
 8463              	.L645:
 556:../uvc.c      **** 						 glEp0Buffer[0] = CtrlParArry[CtrlID][13];//ext_control array;
 8464              		.loc 1 556 0
 8465 42bc 4A30D4E5 		ldrb	r3, [r4, #74]	@ zero_extendqisi2
 8466 42c0 000053E3 		cmp	r3, #0
 8467 42c4 0500001A 		bne	.L653
 560:../uvc.c      **** 		 	 			CtrlParArry[CtrlID][13] = glEp0Buffer[0];
 8468              		.loc 1 560 0
 8469 42c8 18009DE5 		ldr	r0, [sp, #24]
 8470 42cc 0810A0E1 		mov	r1, r8
 8471 42d0 FEFFFFEB 		bl	SensorGetControl
 8472              	.LVL982:
 563:../uvc.c      **** 		 	 		 }
 8473              		.loc 1 563 0
 8474 42d4 0130A0E3 		mov	r3, #1
 8475 42d8 4A30C5E5 		strb	r3, [r5, #74]
 561:../uvc.c      **** 		 	 			glEp0Buffer[1] = CtrlParArry[CtrlID][14];
 8476              		.loc 1 561 0
 8477 42dc 5D04C9E5 		strb	r0, [r9, #1117]
 8478              	.L653:
 566:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 8479              		.loc 1 566 0
 8480 42e0 5D84DBE5 		ldrb	r8, [fp, #1117]	@ zero_extendqisi2
 8481              	.LVL983:
 8482 42e4 E5FEFFEA 		b	.L888
 8483              	.LVL984:
 8484              	.L654:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8485              		.loc 1 411 0
 8486 42e8 FF80A0E3 		mov	r8, #255
 946:../uvc.c      **** 			   }
 8487              		.loc 1 946 0
 8488 42ec 0400A0E3 		mov	r0, #4
 8489 42f0 AC1B1FE5 		ldr	r1, .L927+96
 8490 42f4 FEFFFFEB 		bl	CyU3PDebugPrint
 8491              	.LVL985:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8492              		.loc 1 411 0
 8493 42f8 0860A0E1 		mov	r6, r8
 8494 42fc 08A0A0E1 		mov	r10, r8
 8495 4300 7FFEFFEA 		b	.L652
 8496              	.LVL986:
 8497              	.L579:
 8498              	.LBE255:
 8499              	.LBE340:
 8500              	.LBB341:
 8501              	.LBB284:
 591:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][4];
 8502              		.loc 1 591 0
 8503 4304 4B23D9E5 		ldrb	r2, [r9, #843]	@ zero_extendqisi2
 592:../uvc.c      **** 			 }
 8504              		.loc 1 592 0
 8505 4308 4C33D9E5 		ldrb	r3, [r9, #844]	@ zero_extendqisi2
 8506 430c C5F9FFEA 		b	.L875
 8507              	.L578:
 556:../uvc.c      **** 						 glEp0Buffer[0] = CtrlParArry[CtrlID][13];//ext_control array;
 8508              		.loc 1 556 0
 8509 4310 3F30D4E5 		ldrb	r3, [r4, #63]	@ zero_extendqisi2
 8510 4314 000053E3 		cmp	r3, #0
 8511 4318 0500001A 		bne	.L586
 560:../uvc.c      **** 		 	 			CtrlParArry[CtrlID][13] = glEp0Buffer[0];
 8512              		.loc 1 560 0
 8513 431c 18009DE5 		ldr	r0, [sp, #24]
 8514 4320 0810A0E1 		mov	r1, r8
 8515 4324 FEFFFFEB 		bl	SensorGetControl
 8516              	.LVL987:
 563:../uvc.c      **** 		 	 		 }
 8517              		.loc 1 563 0
 8518 4328 0130A0E3 		mov	r3, #1
 8519 432c 3F30C5E5 		strb	r3, [r5, #63]
 561:../uvc.c      **** 		 	 			glEp0Buffer[1] = CtrlParArry[CtrlID][14];
 8520              		.loc 1 561 0
 8521 4330 5503C9E5 		strb	r0, [r9, #853]
 8522              	.L586:
 566:../uvc.c      **** 					 glEp0Buffer[1] = 0;
 8523              		.loc 1 566 0
 8524 4334 5583DBE5 		ldrb	r8, [fp, #853]	@ zero_extendqisi2
 8525              	.LVL988:
 8526 4338 D0FEFFEA 		b	.L888
 8527              	.LVL989:
 8528              	.L596:
 8529              	.LBE284:
 8530              	.LBE341:
 8531              	.LBB342:
 8532              	.LBB311:
 636:../uvc.c      **** 		 	 }
 8533              		.loc 1 636 0
 8534 433c 8133DBE5 		ldrb	r3, [fp, #897]	@ zero_extendqisi2
 8535              	.LVL990:
 8536              	.L886:
 8537              	.LBE311:
 8538              	.LBE342:
 8539              	.LBB343:
 8540              	.LBB256:
 638:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8541              		.loc 1 638 0
 8542 4340 0100A0E3 		mov	r0, #1
 8543 4344 F41B1FE5 		ldr	r1, .L927+108
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8544              		.loc 1 411 0
 8545 4348 FF60A0E3 		mov	r6, #255
 636:../uvc.c      **** 		 	 }
 8546              		.loc 1 636 0
 8547 434c A030C4E5 		strb	r3, [r4, #160]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8548              		.loc 1 411 0
 8549 4350 06A0A0E1 		mov	r10, r6
 638:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8550              		.loc 1 638 0
 8551 4354 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 8552              	.LVL991:
 639:../uvc.c      **** 			  Len = 1;
 8553              		.loc 1 639 0
 8554 4358 A080D4E5 		ldrb	r8, [r4, #160]	@ zero_extendqisi2
 8555              	.LVL992:
 8556 435c 68FEFFEA 		b	.L652
 8557              	.LVL993:
 8558              	.L595:
 8559              	.LBE256:
 8560              	.LBE343:
 8561              	.LBB344:
 8562              	.LBB312:
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 8563              		.loc 1 623 0
 8564 4360 7F13D9E5 		ldrb	r1, [r9, #895]	@ zero_extendqisi2
 624:../uvc.c      **** 			  glEp0Buffer[2] = 0;
 8565              		.loc 1 624 0
 8566 4364 8023D9E5 		ldrb	r2, [r9, #896]	@ zero_extendqisi2
 8567              	.LVL994:
 8568              	.L887:
 8569              	.LBE312:
 8570              	.LBE344:
 8571              	.LBB345:
 8572              	.LBB257:
 628:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8573              		.loc 1 628 0
 8574 4368 0600A0E1 		mov	r0, r6
 8575              	.L890:
 625:../uvc.c      **** 			  glEp0Buffer[3] = 0;
 8576              		.loc 1 625 0
 8577 436c 0030A0E3 		mov	r3, #0
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 8578              		.loc 1 623 0
 8579 4370 A010C4E5 		strb	r1, [r4, #160]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8580              		.loc 1 411 0
 8581 4374 FF60A0E3 		mov	r6, #255
 628:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8582              		.loc 1 628 0
 8583 4378 281C1FE5 		ldr	r1, .L927+108
 624:../uvc.c      **** 			  glEp0Buffer[2] = 0;
 8584              		.loc 1 624 0
 8585 437c A120C4E5 		strb	r2, [r4, #161]
 625:../uvc.c      **** 			  glEp0Buffer[3] = 0;
 8586              		.loc 1 625 0
 8587 4380 A230C4E5 		strb	r3, [r4, #162]
 626:../uvc.c      **** 		 	 }
 8588              		.loc 1 626 0
 8589 4384 A330C4E5 		strb	r3, [r4, #163]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8590              		.loc 1 411 0
 8591 4388 06A0A0E1 		mov	r10, r6
 628:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8592              		.loc 1 628 0
 8593 438c FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 8594              	.LVL995:
 629:../uvc.c      **** 			  break;
 8595              		.loc 1 629 0
 8596 4390 A080D4E5 		ldrb	r8, [r4, #160]	@ zero_extendqisi2
 8597              	.LVL996:
 8598 4394 5AFEFFEA 		b	.L652
 8599              	.LVL997:
 8600              	.L589:
 8601              	.LBE257:
 8602              	.LBE345:
 8603              	.LBB346:
 8604              	.LBB313:
 609:../uvc.c      **** 				  glEp0Buffer[1] = CtrlParArry[CtrlID][6];
 8605              		.loc 1 609 0
 8606 4398 7D23D9E5 		ldrb	r2, [r9, #893]	@ zero_extendqisi2
 610:../uvc.c      **** 			 }
 8607              		.loc 1 610 0
 8608 439c 7E33D9E5 		ldrb	r3, [r9, #894]	@ zero_extendqisi2
 8609 43a0 A0F9FFEA 		b	.L875
 8610              	.LVL998:
 8611              	.L674:
 8612              	.LBE313:
 8613              	.LBE346:
 8614              	.LBB347:
 8615              	.LBB306:
 954:../uvc.c      **** 			  break;
 8616              		.loc 1 954 0
 8617 43a4 0000A0E3 		mov	r0, #0
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8618              		.loc 1 411 0
 8619 43a8 FFA0A0E3 		mov	r10, #255
 954:../uvc.c      **** 			  break;
 8620              		.loc 1 954 0
 8621 43ac 0020A0E1 		mov	r2, r0
 8622 43b0 0110A0E3 		mov	r1, #1
 8623 43b4 FEFFFFEB 		bl	CyU3PUsbStall
 8624              	.LVL999:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8625              		.loc 1 411 0
 8626 43b8 0A60A0E1 		mov	r6, r10
 8627 43bc 0A30A0E1 		mov	r3, r10
 8628 43c0 0AC0A0E1 		mov	ip, r10
 8629 43c4 7AFFFFEA 		b	.L684
 8630              	.LVL1000:
 8631              	.L682:
 633:../uvc.c      **** 		 	 }
 8632              		.loc 1 633 0
 8633 43c8 6930DBE5 		ldrb	r3, [fp, #105]	@ zero_extendqisi2
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8634              		.loc 1 411 0
 8635 43cc FFA0A0E3 		mov	r10, #255
 638:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8636              		.loc 1 638 0
 8637 43d0 0100A0E3 		mov	r0, #1
 8638 43d4 841C1FE5 		ldr	r1, .L927+108
 633:../uvc.c      **** 		 	 }
 8639              		.loc 1 633 0
 8640 43d8 A030C4E5 		strb	r3, [r4, #160]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8641              		.loc 1 411 0
 8642 43dc 0A60A0E1 		mov	r6, r10
 638:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8643              		.loc 1 638 0
 8644 43e0 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 8645              	.LVL1001:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8646              		.loc 1 411 0
 8647 43e4 0AC0A0E1 		mov	ip, r10
 639:../uvc.c      **** 			  Len = 1;
 8648              		.loc 1 639 0
 8649 43e8 A030D4E5 		ldrb	r3, [r4, #160]	@ zero_extendqisi2
 8650              	.LVL1002:
 8651 43ec 70FFFFEA 		b	.L684
 8652              	.LVL1003:
 8653              	.L681:
 618:../uvc.c      **** 				 glEp0Buffer[2] = 0;
 8654              		.loc 1 618 0
 8655 43f0 68C0D9E5 		ldrb	ip, [r9, #104]	@ zero_extendqisi2
 617:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][8];
 8656              		.loc 1 617 0
 8657 43f4 67E0D9E5 		ldrb	lr, [r9, #103]	@ zero_extendqisi2
 619:../uvc.c      **** 				 glEp0Buffer[3] = 0;
 8658              		.loc 1 619 0
 8659 43f8 0030A0E3 		mov	r3, #0
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8660              		.loc 1 411 0
 8661 43fc FFA0A0E3 		mov	r10, #255
 628:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8662              		.loc 1 628 0
 8663 4400 0200A0E1 		mov	r0, r2
 8664 4404 B41C1FE5 		ldr	r1, .L927+108
 618:../uvc.c      **** 				 glEp0Buffer[2] = 0;
 8665              		.loc 1 618 0
 8666 4408 A1C0C4E5 		strb	ip, [r4, #161]
 619:../uvc.c      **** 				 glEp0Buffer[3] = 0;
 8667              		.loc 1 619 0
 8668 440c A230C4E5 		strb	r3, [r4, #162]
 620:../uvc.c      **** 		 	 }
 8669              		.loc 1 620 0
 8670 4410 A330C4E5 		strb	r3, [r4, #163]
 617:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][8];
 8671              		.loc 1 617 0
 8672 4414 A0E0C4E5 		strb	lr, [r4, #160]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8673              		.loc 1 411 0
 8674 4418 0A60A0E1 		mov	r6, r10
 628:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8675              		.loc 1 628 0
 8676 441c FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 8677              	.LVL1004:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8678              		.loc 1 411 0
 8679 4420 0AC0A0E1 		mov	ip, r10
 629:../uvc.c      **** 			  break;
 8680              		.loc 1 629 0
 8681 4424 A030D4E5 		ldrb	r3, [r4, #160]	@ zero_extendqisi2
 8682              	.LVL1005:
 8683 4428 61FFFFEA 		b	.L684
 8684              	.LVL1006:
 8685              	.L680:
 428:../uvc.c      **** 			  CyU3PUsbSendEP0Data (2, (uint8_t *)glEp0Buffer);
 8686              		.loc 1 428 0
 8687 442c 0030A0E3 		mov	r3, #0
 429:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8688              		.loc 1 429 0
 8689 4430 0200A0E3 		mov	r0, #2
 8690 4434 E41C1FE5 		ldr	r1, .L927+108
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8691              		.loc 1 411 0
 8692 4438 FFA0A0E3 		mov	r10, #255
 427:../uvc.c      **** 			  glEp0Buffer[1] = 0;
 8693              		.loc 1 427 0
 8694 443c A020C4E5 		strb	r2, [r4, #160]
 8695 4440 B7FBFFEA 		b	.L878
 8696              	.L675:
 599:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][6];
 8697              		.loc 1 599 0
 8698 4444 65C0D9E5 		ldrb	ip, [r9, #101]	@ zero_extendqisi2
 600:../uvc.c      **** 		 	 }
 8699              		.loc 1 600 0
 8700 4448 6630D9E5 		ldrb	r3, [r9, #102]	@ zero_extendqisi2
 8701 444c B0FBFFEA 		b	.L879
 8702              	.LVL1007:
 8703              	.L650:
 8704              	.LBE306:
 8705              	.LBE347:
 8706              	.LBB348:
 8707              	.LBB258:
 636:../uvc.c      **** 		 	 }
 8708              		.loc 1 636 0
 8709 4450 5934D9E5 		ldrb	r3, [r9, #1113]	@ zero_extendqisi2
 8710 4454 B9FFFFEA 		b	.L886
 8711              	.L649:
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 8712              		.loc 1 623 0
 8713 4458 5714D9E5 		ldrb	r1, [r9, #1111]	@ zero_extendqisi2
 624:../uvc.c      **** 			  glEp0Buffer[2] = 0;
 8714              		.loc 1 624 0
 8715 445c 5824D9E5 		ldrb	r2, [r9, #1112]	@ zero_extendqisi2
 8716 4460 C0FFFFEA 		b	.L887
 8717              	.L643:
 609:../uvc.c      **** 				  glEp0Buffer[1] = CtrlParArry[CtrlID][6];
 8718              		.loc 1 609 0
 8719 4464 5524D9E5 		ldrb	r2, [r9, #1109]	@ zero_extendqisi2
 610:../uvc.c      **** 			 }
 8720              		.loc 1 610 0
 8721 4468 5634D9E5 		ldrb	r3, [r9, #1110]	@ zero_extendqisi2
 8722 446c 6DF9FFEA 		b	.L875
 8723              	.LVL1008:
 8724              	.L557:
 8725              	.LBE258:
 8726              	.LBE348:
 8727              	.LBB349:
 8728              	.LBB300:
 636:../uvc.c      **** 		 	 }
 8729              		.loc 1 636 0
 8730 4470 2133DBE5 		ldrb	r3, [fp, #801]	@ zero_extendqisi2
 8731 4474 B1FFFFEA 		b	.L886
 8732              	.L556:
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 8733              		.loc 1 623 0
 8734 4478 1F13D9E5 		ldrb	r1, [r9, #799]	@ zero_extendqisi2
 624:../uvc.c      **** 			  glEp0Buffer[2] = 0;
 8735              		.loc 1 624 0
 8736 447c 2023D9E5 		ldrb	r2, [r9, #800]	@ zero_extendqisi2
 8737 4480 B8FFFFEA 		b	.L887
 8738              	.L550:
 609:../uvc.c      **** 				  glEp0Buffer[1] = CtrlParArry[CtrlID][6];
 8739              		.loc 1 609 0
 8740 4484 1D23D9E5 		ldrb	r2, [r9, #797]	@ zero_extendqisi2
 610:../uvc.c      **** 			 }
 8741              		.loc 1 610 0
 8742 4488 1E33D9E5 		ldrb	r3, [r9, #798]	@ zero_extendqisi2
 8743 448c 65F9FFEA 		b	.L875
 8744              	.LVL1009:
 8745              	.L570:
 8746              	.LBE300:
 8747              	.LBE349:
 8748              	.LBB350:
 8749              	.LBB295:
 636:../uvc.c      **** 		 	 }
 8750              		.loc 1 636 0
 8751 4490 3933DBE5 		ldrb	r3, [fp, #825]	@ zero_extendqisi2
 8752 4494 A9FFFFEA 		b	.L886
 8753              	.L569:
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 8754              		.loc 1 623 0
 8755 4498 3713DBE5 		ldrb	r1, [fp, #823]	@ zero_extendqisi2
 624:../uvc.c      **** 			  glEp0Buffer[2] = 0;
 8756              		.loc 1 624 0
 8757 449c 3823DBE5 		ldrb	r2, [fp, #824]	@ zero_extendqisi2
 8758 44a0 B0FFFFEA 		b	.L887
 8759              	.L563:
 609:../uvc.c      **** 				  glEp0Buffer[1] = CtrlParArry[CtrlID][6];
 8760              		.loc 1 609 0
 8761 44a4 3523D9E5 		ldrb	r2, [r9, #821]	@ zero_extendqisi2
 610:../uvc.c      **** 			 }
 8762              		.loc 1 610 0
 8763 44a8 3633D9E5 		ldrb	r3, [r9, #822]	@ zero_extendqisi2
 8764 44ac 5DF9FFEA 		b	.L875
 8765              	.LVL1010:
 8766              	.L655:
 8767              	.LBE295:
 8768              	.LBE350:
 8769              	.LBB351:
 8770              	.LBB290:
 954:../uvc.c      **** 			  break;
 8771              		.loc 1 954 0
 8772 44b0 0000A0E3 		mov	r0, #0
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8773              		.loc 1 411 0
 8774 44b4 FF70A0E3 		mov	r7, #255
 954:../uvc.c      **** 			  break;
 8775              		.loc 1 954 0
 8776 44b8 0020A0E1 		mov	r2, r0
 8777 44bc 0110A0E3 		mov	r1, #1
 8778 44c0 FEFFFFEB 		bl	CyU3PUsbStall
 8779              	.LVL1011:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8780              		.loc 1 411 0
 8781 44c4 0780A0E1 		mov	r8, r7
 8782 44c8 07C0A0E1 		mov	ip, r7
 8783 44cc 0730A0E1 		mov	r3, r7
 8784 44d0 D4FEFFEA 		b	.L665
 8785              	.LVL1012:
 8786              	.L663:
 636:../uvc.c      **** 		 	 }
 8787              		.loc 1 636 0
 8788 44d4 7134DBE5 		ldrb	r3, [fp, #1137]	@ zero_extendqisi2
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8789              		.loc 1 411 0
 8790 44d8 FF70A0E3 		mov	r7, #255
 638:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8791              		.loc 1 638 0
 8792 44dc 0100A0E3 		mov	r0, #1
 8793 44e0 901D1FE5 		ldr	r1, .L927+108
 636:../uvc.c      **** 		 	 }
 8794              		.loc 1 636 0
 8795 44e4 A030C4E5 		strb	r3, [r4, #160]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8796              		.loc 1 411 0
 8797 44e8 0780A0E1 		mov	r8, r7
 638:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8798              		.loc 1 638 0
 8799 44ec FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 8800              	.LVL1013:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8801              		.loc 1 411 0
 8802 44f0 0730A0E1 		mov	r3, r7
 639:../uvc.c      **** 			  Len = 1;
 8803              		.loc 1 639 0
 8804 44f4 A0C0D4E5 		ldrb	ip, [r4, #160]	@ zero_extendqisi2
 8805              	.LVL1014:
 8806 44f8 CAFEFFEA 		b	.L665
 8807              	.LVL1015:
 8808              	.L662:
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 8809              		.loc 1 623 0
 8810 44fc 6FC4DBE5 		ldrb	ip, [fp, #1135]	@ zero_extendqisi2
 624:../uvc.c      **** 			  glEp0Buffer[2] = 0;
 8811              		.loc 1 624 0
 8812 4500 7024DBE5 		ldrb	r2, [fp, #1136]	@ zero_extendqisi2
 625:../uvc.c      **** 			  glEp0Buffer[3] = 0;
 8813              		.loc 1 625 0
 8814 4504 0030A0E3 		mov	r3, #0
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8815              		.loc 1 411 0
 8816 4508 FF70A0E3 		mov	r7, #255
 628:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8817              		.loc 1 628 0
 8818 450c 0600A0E1 		mov	r0, r6
 8819 4510 C01D1FE5 		ldr	r1, .L927+108
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 8820              		.loc 1 623 0
 8821 4514 A0C0C4E5 		strb	ip, [r4, #160]
 625:../uvc.c      **** 			  glEp0Buffer[3] = 0;
 8822              		.loc 1 625 0
 8823 4518 A230C4E5 		strb	r3, [r4, #162]
 626:../uvc.c      **** 		 	 }
 8824              		.loc 1 626 0
 8825 451c A330C4E5 		strb	r3, [r4, #163]
 624:../uvc.c      **** 			  glEp0Buffer[2] = 0;
 8826              		.loc 1 624 0
 8827 4520 A120C4E5 		strb	r2, [r4, #161]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8828              		.loc 1 411 0
 8829 4524 0780A0E1 		mov	r8, r7
 628:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8830              		.loc 1 628 0
 8831 4528 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 8832              	.LVL1016:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8833              		.loc 1 411 0
 8834 452c 0730A0E1 		mov	r3, r7
 629:../uvc.c      **** 			  break;
 8835              		.loc 1 629 0
 8836 4530 A0C0D4E5 		ldrb	ip, [r4, #160]	@ zero_extendqisi2
 8837              	.LVL1017:
 8838 4534 BBFEFFEA 		b	.L665
 8839              	.LVL1018:
 8840              	.L661:
 428:../uvc.c      **** 			  CyU3PUsbSendEP0Data (2, (uint8_t *)glEp0Buffer);
 8841              		.loc 1 428 0
 8842 4538 0030A0E3 		mov	r3, #0
 429:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8843              		.loc 1 429 0
 8844 453c 0200A0E3 		mov	r0, #2
 8845 4540 F01D1FE5 		ldr	r1, .L927+108
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8846              		.loc 1 411 0
 8847 4544 FF70A0E3 		mov	r7, #255
 427:../uvc.c      **** 			  glEp0Buffer[1] = 0;
 8848              		.loc 1 427 0
 8849 4548 A060C4E5 		strb	r6, [r4, #160]
 8850 454c 15FBFFEA 		b	.L876
 8851              	.L656:
 609:../uvc.c      **** 				  glEp0Buffer[1] = CtrlParArry[CtrlID][6];
 8852              		.loc 1 609 0
 8853 4550 6D24D9E5 		ldrb	r2, [r9, #1133]	@ zero_extendqisi2
 610:../uvc.c      **** 			 }
 8854              		.loc 1 610 0
 8855 4554 6E34D9E5 		ldrb	r3, [r9, #1134]	@ zero_extendqisi2
 8856 4558 0EFBFFEA 		b	.L877
 8857              	.LVL1019:
 8858              	.L583:
 8859              	.LBE290:
 8860              	.LBE351:
 8861              	.LBB352:
 8862              	.LBB285:
 636:../uvc.c      **** 		 	 }
 8863              		.loc 1 636 0
 8864 455c 5133D9E5 		ldrb	r3, [r9, #849]	@ zero_extendqisi2
 8865 4560 76FFFFEA 		b	.L886
 8866              	.L582:
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 8867              		.loc 1 623 0
 8868 4564 4F13D9E5 		ldrb	r1, [r9, #847]	@ zero_extendqisi2
 624:../uvc.c      **** 			  glEp0Buffer[2] = 0;
 8869              		.loc 1 624 0
 8870 4568 5023D9E5 		ldrb	r2, [r9, #848]	@ zero_extendqisi2
 8871 456c 7DFFFFEA 		b	.L887
 8872              	.L576:
 609:../uvc.c      **** 				  glEp0Buffer[1] = CtrlParArry[CtrlID][6];
 8873              		.loc 1 609 0
 8874 4570 4D23D9E5 		ldrb	r2, [r9, #845]	@ zero_extendqisi2
 610:../uvc.c      **** 			 }
 8875              		.loc 1 610 0
 8876 4574 4E33D9E5 		ldrb	r3, [r9, #846]	@ zero_extendqisi2
 8877 4578 2AF9FFEA 		b	.L875
 8878              	.LVL1020:
 8879              	.L918:
 8880              	.LBE285:
 8881              	.LBE352:
 8882              	.LBE370:
 8883              	.LBE419:
 8884              	.LBB420:
 8885              	.LBB387:
2920:../uvc.c      **** 						}
 8886              		.loc 1 2920 0
 8887 457c 341E1FE5 		ldr	r1, .L927+100
 8888 4580 28309DE5 		ldr	r3, [sp, #40]
 8889 4584 0320D1E5 		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 8890 4588 9024CBE5 		strb	r2, [fp, #1168]
 8891 458c C6F8FFEA 		b	.L698
 8892              	.LVL1021:
 8893              	.L917:
2958:../uvc.c      **** 					}
 8894              		.loc 1 2958 0
 8895 4590 441E1FE5 		ldr	r1, .L927+104
 8896 4594 0400A0E3 		mov	r0, #4
 8897              	.LVL1022:
 8898 4598 FEFFFFEB 		bl	CyU3PDebugPrint
 8899              	.LVL1023:
 8900 459c 7EFAFFEA 		b	.L723
 8901              	.LVL1024:
 8902              	.L622:
 8903              	.LBE387:
 8904              	.LBE420:
 8905              	.LBB421:
 8906              	.LBB371:
 8907              	.LBB353:
 8908              	.LBB280:
 636:../uvc.c      **** 		 	 }
 8909              		.loc 1 636 0
 8910 45a0 F933DBE5 		ldrb	r3, [fp, #1017]	@ zero_extendqisi2
 8911 45a4 65FFFFEA 		b	.L886
 8912              	.L621:
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 8913              		.loc 1 623 0
 8914 45a8 F713D9E5 		ldrb	r1, [r9, #1015]	@ zero_extendqisi2
 624:../uvc.c      **** 			  glEp0Buffer[2] = 0;
 8915              		.loc 1 624 0
 8916 45ac F823D9E5 		ldrb	r2, [r9, #1016]	@ zero_extendqisi2
 8917 45b0 6CFFFFEA 		b	.L887
 8918              	.L615:
 609:../uvc.c      **** 				  glEp0Buffer[1] = CtrlParArry[CtrlID][6];
 8919              		.loc 1 609 0
 8920 45b4 F523D9E5 		ldrb	r2, [r9, #1013]	@ zero_extendqisi2
 610:../uvc.c      **** 			 }
 8921              		.loc 1 610 0
 8922 45b8 F633D9E5 		ldrb	r3, [r9, #1014]	@ zero_extendqisi2
 8923 45bc 19F9FFEA 		b	.L875
 8924              	.LVL1025:
 8925              	.L629:
 8926              	.LBE280:
 8927              	.LBE353:
 8928              	.LBB354:
 8929              	.LBB275:
 954:../uvc.c      **** 			  break;
 8930              		.loc 1 954 0
 8931 45c0 0000A0E3 		mov	r0, #0
 8932 45c4 0110A0E3 		mov	r1, #1
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8933              		.loc 1 411 0
 8934 45c8 FF60A0E3 		mov	r6, #255
 954:../uvc.c      **** 			  break;
 8935              		.loc 1 954 0
 8936 45cc 0020A0E1 		mov	r2, r0
 8937 45d0 FEFFFFEB 		bl	CyU3PUsbStall
 8938              	.LVL1026:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8939              		.loc 1 411 0
 8940 45d4 0610A0E1 		mov	r1, r6
 8941 45d8 0630A0E1 		mov	r3, r6
 8942 45dc EAFDFFEA 		b	.L639
 8943              	.LVL1027:
 8944              	.L637:
 636:../uvc.c      **** 		 	 }
 8945              		.loc 1 636 0
 8946 45e0 2934DBE5 		ldrb	r3, [fp, #1065]	@ zero_extendqisi2
 638:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8947              		.loc 1 638 0
 8948 45e4 941E1FE5 		ldr	r1, .L927+108
 8949 45e8 0100A0E3 		mov	r0, #1
 636:../uvc.c      **** 		 	 }
 8950              		.loc 1 636 0
 8951 45ec A030C4E5 		strb	r3, [r4, #160]
 638:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8952              		.loc 1 638 0
 8953 45f0 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 8954              	.LVL1028:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8955              		.loc 1 411 0
 8956 45f4 FF10A0E3 		mov	r1, #255
 8957 45f8 0130A0E1 		mov	r3, r1
 639:../uvc.c      **** 			  Len = 1;
 8958              		.loc 1 639 0
 8959 45fc A060D4E5 		ldrb	r6, [r4, #160]	@ zero_extendqisi2
 8960              	.LVL1029:
 8961 4600 E1FDFFEA 		b	.L639
 8962              	.LVL1030:
 8963              	.L636:
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 8964              		.loc 1 623 0
 8965 4604 2714DBE5 		ldrb	r1, [fp, #1063]	@ zero_extendqisi2
 624:../uvc.c      **** 			  glEp0Buffer[2] = 0;
 8966              		.loc 1 624 0
 8967 4608 2824DBE5 		ldrb	r2, [fp, #1064]	@ zero_extendqisi2
 625:../uvc.c      **** 			  glEp0Buffer[3] = 0;
 8968              		.loc 1 625 0
 8969 460c 0030A0E3 		mov	r3, #0
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 8970              		.loc 1 623 0
 8971 4610 A010C4E5 		strb	r1, [r4, #160]
 628:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8972              		.loc 1 628 0
 8973 4614 0800A0E1 		mov	r0, r8
 8974 4618 C81E1FE5 		ldr	r1, .L927+108
 625:../uvc.c      **** 			  glEp0Buffer[3] = 0;
 8975              		.loc 1 625 0
 8976 461c A230C4E5 		strb	r3, [r4, #162]
 626:../uvc.c      **** 		 	 }
 8977              		.loc 1 626 0
 8978 4620 A330C4E5 		strb	r3, [r4, #163]
 624:../uvc.c      **** 			  glEp0Buffer[2] = 0;
 8979              		.loc 1 624 0
 8980 4624 A120C4E5 		strb	r2, [r4, #161]
 628:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8981              		.loc 1 628 0
 8982 4628 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 8983              	.LVL1031:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 8984              		.loc 1 411 0
 8985 462c FF10A0E3 		mov	r1, #255
 8986 4630 0130A0E1 		mov	r3, r1
 629:../uvc.c      **** 			  break;
 8987              		.loc 1 629 0
 8988 4634 A060D4E5 		ldrb	r6, [r4, #160]	@ zero_extendqisi2
 8989              	.LVL1032:
 8990 4638 D3FDFFEA 		b	.L639
 8991              	.LVL1033:
 8992              	.L635:
 428:../uvc.c      **** 			  CyU3PUsbSendEP0Data (2, (uint8_t *)glEp0Buffer);
 8993              		.loc 1 428 0
 8994 463c 0030A0E3 		mov	r3, #0
 429:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 8995              		.loc 1 429 0
 8996 4640 0200A0E3 		mov	r0, #2
 8997 4644 F41E1FE5 		ldr	r1, .L927+108
 427:../uvc.c      **** 			  glEp0Buffer[1] = 0;
 8998              		.loc 1 427 0
 8999 4648 A080C4E5 		strb	r8, [r4, #160]
 9000 464c 31FAFFEA 		b	.L872
 9001              	.L630:
 609:../uvc.c      **** 				  glEp0Buffer[1] = CtrlParArry[CtrlID][6];
 9002              		.loc 1 609 0
 9003 4650 2524D9E5 		ldrb	r2, [r9, #1061]	@ zero_extendqisi2
 610:../uvc.c      **** 			 }
 9004              		.loc 1 610 0
 9005 4654 2634D9E5 		ldrb	r3, [r9, #1062]	@ zero_extendqisi2
 9006 4658 2BFAFFEA 		b	.L873
 9007              	.LVL1034:
 9008              	.L500:
 9009              	.LBE275:
 9010              	.LBE354:
 9011              	.LBE371:
 9012              	.LBE421:
 9013              	.LBB422:
 9014              	.LBB237:
 9015              	.LBB226:
 9016              	.LBB221:
 636:../uvc.c      **** 		 	 }
 9017              		.loc 1 636 0
 9018 465c 0132D9E5 		ldrb	r3, [r9, #513]	@ zero_extendqisi2
 9019 4660 36FFFFEA 		b	.L886
 9020              	.L499:
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 9021              		.loc 1 623 0
 9022 4664 FF11D9E5 		ldrb	r1, [r9, #511]	@ zero_extendqisi2
 624:../uvc.c      **** 			  glEp0Buffer[2] = 0;
 9023              		.loc 1 624 0
 9024 4668 0022D9E5 		ldrb	r2, [r9, #512]	@ zero_extendqisi2
 628:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 9025              		.loc 1 628 0
 9026 466c 0300A0E1 		mov	r0, r3
 9027 4670 3DFFFFEA 		b	.L890
 9028              	.L498:
 428:../uvc.c      **** 			  CyU3PUsbSendEP0Data (2, (uint8_t *)glEp0Buffer);
 9029              		.loc 1 428 0
 9030 4674 0020A0E3 		mov	r2, #0
 429:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 9031              		.loc 1 429 0
 9032 4678 0200A0E3 		mov	r0, #2
 9033 467c 2C1F1FE5 		ldr	r1, .L927+108
 427:../uvc.c      **** 			  glEp0Buffer[1] = 0;
 9034              		.loc 1 427 0
 9035 4680 A030C4E5 		strb	r3, [r4, #160]
 9036 4684 F8F9FFEA 		b	.L856
 9037              	.L493:
 609:../uvc.c      **** 				  glEp0Buffer[1] = CtrlParArry[CtrlID][6];
 9038              		.loc 1 609 0
 9039 4688 FDC1D9E5 		ldrb	ip, [r9, #509]	@ zero_extendqisi2
 610:../uvc.c      **** 			 }
 9040              		.loc 1 610 0
 9041 468c FE21D9E5 		ldrb	r2, [r9, #510]	@ zero_extendqisi2
 9042 4690 F2F9FFEA 		b	.L857
 9043              	.LVL1035:
 9044              	.L478:
 9045              	.LBE221:
 9046              	.LBE226:
 9047              	.LBB227:
 9048              	.LBB216:
 954:../uvc.c      **** 			  break;
 9049              		.loc 1 954 0
 9050 4694 0000A0E3 		mov	r0, #0
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 9051              		.loc 1 411 0
 9052 4698 FF70A0E3 		mov	r7, #255
 954:../uvc.c      **** 			  break;
 9053              		.loc 1 954 0
 9054 469c 0020A0E1 		mov	r2, r0
 9055 46a0 0110A0E3 		mov	r1, #1
 9056 46a4 FEFFFFEB 		bl	CyU3PUsbStall
 9057              	.LVL1036:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 9058              		.loc 1 411 0
 9059 46a8 0760A0E1 		mov	r6, r7
 9060              	.LVL1037:
 9061 46ac 0780A0E1 		mov	r8, r7
 9062 46b0 D7FEFFEA 		b	.L488
 9063              	.LVL1038:
 9064              	.L486:
 636:../uvc.c      **** 		 	 }
 9065              		.loc 1 636 0
 9066 46b4 E931DBE5 		ldrb	r3, [fp, #489]	@ zero_extendqisi2
 638:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 9067              		.loc 1 638 0
 9068 46b8 0100A0E3 		mov	r0, #1
 9069 46bc 6C1F1FE5 		ldr	r1, .L927+108
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 9070              		.loc 1 411 0
 9071 46c0 FF60A0E3 		mov	r6, #255
 636:../uvc.c      **** 		 	 }
 9072              		.loc 1 636 0
 9073 46c4 A030C4E5 		strb	r3, [r4, #160]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 9074              		.loc 1 411 0
 9075 46c8 0680A0E1 		mov	r8, r6
 638:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 9076              		.loc 1 638 0
 9077 46cc FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 9078              	.LVL1039:
 639:../uvc.c      **** 			  Len = 1;
 9079              		.loc 1 639 0
 9080 46d0 A070D4E5 		ldrb	r7, [r4, #160]	@ zero_extendqisi2
 9081              	.LVL1040:
 9082 46d4 CEFEFFEA 		b	.L488
 9083              	.LVL1041:
 9084              	.L485:
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 9085              		.loc 1 623 0
 9086 46d8 E711DBE5 		ldrb	r1, [fp, #487]	@ zero_extendqisi2
 624:../uvc.c      **** 			  glEp0Buffer[2] = 0;
 9087              		.loc 1 624 0
 9088 46dc E821DBE5 		ldrb	r2, [fp, #488]	@ zero_extendqisi2
 625:../uvc.c      **** 			  glEp0Buffer[3] = 0;
 9089              		.loc 1 625 0
 9090 46e0 0030A0E3 		mov	r3, #0
 628:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 9091              		.loc 1 628 0
 9092 46e4 0600A0E1 		mov	r0, r6
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 9093              		.loc 1 623 0
 9094 46e8 A010C4E5 		strb	r1, [r4, #160]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 9095              		.loc 1 411 0
 9096 46ec FF60A0E3 		mov	r6, #255
 628:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 9097              		.loc 1 628 0
 9098 46f0 A01F1FE5 		ldr	r1, .L927+108
 624:../uvc.c      **** 			  glEp0Buffer[2] = 0;
 9099              		.loc 1 624 0
 9100 46f4 A120C4E5 		strb	r2, [r4, #161]
 625:../uvc.c      **** 			  glEp0Buffer[3] = 0;
 9101              		.loc 1 625 0
 9102 46f8 A230C4E5 		strb	r3, [r4, #162]
 626:../uvc.c      **** 		 	 }
 9103              		.loc 1 626 0
 9104 46fc A330C4E5 		strb	r3, [r4, #163]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 9105              		.loc 1 411 0
 9106 4700 0680A0E1 		mov	r8, r6
 628:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 9107              		.loc 1 628 0
 9108 4704 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 9109              	.LVL1042:
 629:../uvc.c      **** 			  break;
 9110              		.loc 1 629 0
 9111 4708 A070D4E5 		ldrb	r7, [r4, #160]	@ zero_extendqisi2
 9112              	.LVL1043:
 9113 470c C0FEFFEA 		b	.L488
 9114              	.LVL1044:
 9115              	.L484:
 428:../uvc.c      **** 			  CyU3PUsbSendEP0Data (2, (uint8_t *)glEp0Buffer);
 9116              		.loc 1 428 0
 9117 4710 0030A0E3 		mov	r3, #0
 429:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 9118              		.loc 1 429 0
 9119 4714 0200A0E3 		mov	r0, #2
 9120 4718 C81F1FE5 		ldr	r1, .L927+108
 427:../uvc.c      **** 			  glEp0Buffer[1] = 0;
 9121              		.loc 1 427 0
 9122 471c A060C4E5 		strb	r6, [r4, #160]
 9123 4720 9AF9FFEA 		b	.L854
 9124              	.L479:
 609:../uvc.c      **** 				  glEp0Buffer[1] = CtrlParArry[CtrlID][6];
 9125              		.loc 1 609 0
 9126 4724 E521D9E5 		ldrb	r2, [r9, #485]	@ zero_extendqisi2
 610:../uvc.c      **** 			 }
 9127              		.loc 1 610 0
 9128 4728 E631D9E5 		ldrb	r3, [r9, #486]	@ zero_extendqisi2
 9129 472c 94F9FFEA 		b	.L855
 9130              	.LVL1045:
 9131              	.L538:
 9132              	.LBE216:
 9133              	.LBE227:
 9134              	.LBE237:
 9135              	.LBE422:
 9136              	.LBB423:
 9137              	.LBB372:
 9138              	.LBB355:
 9139              	.LBB269:
 636:../uvc.c      **** 		 	 }
 9140              		.loc 1 636 0
 9141 4730 0933DBE5 		ldrb	r3, [fp, #777]	@ zero_extendqisi2
 9142 4734 01FFFFEA 		b	.L886
 9143              	.L537:
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 9144              		.loc 1 623 0
 9145 4738 0713DBE5 		ldrb	r1, [fp, #775]	@ zero_extendqisi2
 624:../uvc.c      **** 			  glEp0Buffer[2] = 0;
 9146              		.loc 1 624 0
 9147 473c 0823DBE5 		ldrb	r2, [fp, #776]	@ zero_extendqisi2
 9148 4740 08FFFFEA 		b	.L887
 9149              	.L531:
 609:../uvc.c      **** 				  glEp0Buffer[1] = CtrlParArry[CtrlID][6];
 9150              		.loc 1 609 0
 9151 4744 0523D9E5 		ldrb	r2, [r9, #773]	@ zero_extendqisi2
 610:../uvc.c      **** 			 }
 9152              		.loc 1 610 0
 9153 4748 0633D9E5 		ldrb	r3, [r9, #774]	@ zero_extendqisi2
 9154 474c B5F8FFEA 		b	.L875
 9155              	.LVL1046:
 9156              	.L910:
 9157              	.LBE269:
 9158              	.LBE355:
 9159              	.LBE372:
 9160              	.LBE423:
 9161              	.LBB424:
 9162              	.LBB388:
2865:../uvc.c      **** 						}
 9163              		.loc 1 2865 0
 9164 4750 3C019FE5 		ldr	r0, .L929
 9165 4754 3C119FE5 		ldr	r1, .L929+4
 9166 4758 1A20A0E3 		mov	r2, #26
 9167 475c FEFFFFEB 		bl	CyU3PMemCopy
 9168              	.LVL1047:
 9169 4760 48F9FFEA 		b	.L704
 9170              	.L909:
2860:../uvc.c      **** 						}
 9171              		.loc 1 2860 0
 9172 4764 28019FE5 		ldr	r0, .L929
 9173 4768 2C119FE5 		ldr	r1, .L929+8
 9174 476c 1A20A0E3 		mov	r2, #26
 9175 4770 FEFFFFEB 		bl	CyU3PMemCopy
 9176              	.LVL1048:
 9177 4774 43F9FFEA 		b	.L704
 9178              	.L908:
2855:../uvc.c      **** 						}
 9179              		.loc 1 2855 0
 9180 4778 14019FE5 		ldr	r0, .L929
 9181 477c 1C119FE5 		ldr	r1, .L929+12
 9182 4780 1A20A0E3 		mov	r2, #26
 9183 4784 FEFFFFEB 		bl	CyU3PMemCopy
 9184              	.LVL1049:
 9185 4788 3EF9FFEA 		b	.L704
 9186              	.L907:
2850:../uvc.c      **** 						}
 9187              		.loc 1 2850 0
 9188 478c 00019FE5 		ldr	r0, .L929
 9189 4790 0C119FE5 		ldr	r1, .L929+16
 9190 4794 1A20A0E3 		mov	r2, #26
 9191 4798 FEFFFFEB 		bl	CyU3PMemCopy
 9192              	.LVL1050:
 9193 479c 39F9FFEA 		b	.L704
 9194              	.LVL1051:
 9195              	.L686:
 9196              	.LBE388:
 9197              	.LBE424:
 9198              	.LBB425:
 9199              	.LBB373:
 9200              	.LBB356:
 9201              	.LBB264:
 954:../uvc.c      **** 			  break;
 9202              		.loc 1 954 0
 9203 47a0 0000A0E3 		mov	r0, #0
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 9204              		.loc 1 411 0
 9205 47a4 FF80A0E3 		mov	r8, #255
 954:../uvc.c      **** 			  break;
 9206              		.loc 1 954 0
 9207 47a8 0020A0E1 		mov	r2, r0
 9208 47ac 0110A0E3 		mov	r1, #1
 9209 47b0 FEFFFFEB 		bl	CyU3PUsbStall
 9210              	.LVL1052:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 9211              		.loc 1 411 0
 9212 47b4 08A0A0E1 		mov	r10, r8
 9213              	.LVL1053:
 9214 47b8 0860A0E1 		mov	r6, r8
 9215 47bc 08C0A0E1 		mov	ip, r8
 9216 47c0 E9FDFFEA 		b	.L696
 9217              	.LVL1054:
 9218              	.L694:
 633:../uvc.c      **** 		 	 }
 9219              		.loc 1 633 0
 9220 47c4 9930DBE5 		ldrb	r3, [fp, #153]	@ zero_extendqisi2
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 9221              		.loc 1 411 0
 9222 47c8 FF80A0E3 		mov	r8, #255
 638:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 9223              		.loc 1 638 0
 9224 47cc 0100A0E3 		mov	r0, #1
 9225 47d0 D0109FE5 		ldr	r1, .L929+20
 633:../uvc.c      **** 		 	 }
 9226              		.loc 1 633 0
 9227 47d4 A030C4E5 		strb	r3, [r4, #160]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 9228              		.loc 1 411 0
 9229 47d8 0860A0E1 		mov	r6, r8
 638:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 9230              		.loc 1 638 0
 9231 47dc FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 9232              	.LVL1055:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 9233              		.loc 1 411 0
 9234 47e0 08C0A0E1 		mov	ip, r8
 639:../uvc.c      **** 			  Len = 1;
 9235              		.loc 1 639 0
 9236 47e4 A0A0D4E5 		ldrb	r10, [r4, #160]	@ zero_extendqisi2
 9237              	.LVL1056:
 9238 47e8 DFFDFFEA 		b	.L696
 9239              	.LVL1057:
 9240              	.L693:
 617:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][8];
 9241              		.loc 1 617 0
 9242 47ec 97C0DBE5 		ldrb	ip, [fp, #151]	@ zero_extendqisi2
 618:../uvc.c      **** 				 glEp0Buffer[2] = 0;
 9243              		.loc 1 618 0
 9244 47f0 9820DBE5 		ldrb	r2, [fp, #152]	@ zero_extendqisi2
 628:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 9245              		.loc 1 628 0
 9246 47f4 0300A0E1 		mov	r0, r3
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 9247              		.loc 1 411 0
 9248 47f8 FF80A0E3 		mov	r8, #255
 619:../uvc.c      **** 				 glEp0Buffer[3] = 0;
 9249              		.loc 1 619 0
 9250 47fc 0030A0E3 		mov	r3, #0
 628:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 9251              		.loc 1 628 0
 9252 4800 A0109FE5 		ldr	r1, .L929+20
 617:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][8];
 9253              		.loc 1 617 0
 9254 4804 A0C0C4E5 		strb	ip, [r4, #160]
 618:../uvc.c      **** 				 glEp0Buffer[2] = 0;
 9255              		.loc 1 618 0
 9256 4808 A120C4E5 		strb	r2, [r4, #161]
 619:../uvc.c      **** 				 glEp0Buffer[3] = 0;
 9257              		.loc 1 619 0
 9258 480c A230C4E5 		strb	r3, [r4, #162]
 620:../uvc.c      **** 		 	 }
 9259              		.loc 1 620 0
 9260 4810 A330C4E5 		strb	r3, [r4, #163]
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 9261              		.loc 1 411 0
 9262 4814 0860A0E1 		mov	r6, r8
 628:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 9263              		.loc 1 628 0
 9264 4818 FEFFFFEB 		bl	CyU3PUsbSendEP0Data
 9265              	.LVL1058:
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 9266              		.loc 1 411 0
 9267 481c 08C0A0E1 		mov	ip, r8
 629:../uvc.c      **** 			  break;
 9268              		.loc 1 629 0
 9269 4820 A0A0D4E5 		ldrb	r10, [r4, #160]	@ zero_extendqisi2
 9270              	.LVL1059:
 9271 4824 D0FDFFEA 		b	.L696
 9272              	.LVL1060:
 9273              	.L692:
 428:../uvc.c      **** 			  CyU3PUsbSendEP0Data (2, (uint8_t *)glEp0Buffer);
 9274              		.loc 1 428 0
 9275 4828 0020A0E3 		mov	r2, #0
 429:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 9276              		.loc 1 429 0
 9277 482c 0200A0E3 		mov	r0, #2
 9278 4830 70109FE5 		ldr	r1, .L929+20
 411:../uvc.c      **** #ifdef USB_DEBUG_PRINT
 9279              		.loc 1 411 0
 9280 4834 FF80A0E3 		mov	r8, #255
 427:../uvc.c      **** 			  glEp0Buffer[1] = 0;
 9281              		.loc 1 427 0
 9282 4838 A030C4E5 		strb	r3, [r4, #160]
 9283 483c F7F8FFEA 		b	.L880
 9284              	.L687:
 599:../uvc.c      **** 				 glEp0Buffer[1] = ExUCtrlParArry[locCtrlID][6];
 9285              		.loc 1 599 0
 9286 4840 95C0D9E5 		ldrb	ip, [r9, #149]	@ zero_extendqisi2
 600:../uvc.c      **** 		 	 }
 9287              		.loc 1 600 0
 9288 4844 9620D9E5 		ldrb	r2, [r9, #150]	@ zero_extendqisi2
 9289 4848 F0F8FFEA 		b	.L881
 9290              	.LVL1061:
 9291              	.L885:
 9292              	.LBE264:
 9293              	.LBE356:
 9294              	.LBE373:
 9295              	.LBE425:
 9296              	.LBB426:
 9297              	.LBB389:
2990:../uvc.c      **** 					}
 9298              		.loc 1 2990 0
 9299 484c 58109FE5 		ldr	r1, .L929+24
 9300 4850 0400A0E3 		mov	r0, #4
 9301 4854 FEFFFFEB 		bl	CyU3PDebugPrint
 9302              	.LVL1062:
 9303 4858 B3F8FFEA 		b	.L884
 9304              	.LVL1063:
 9305              	.L903:
2985:../uvc.c      **** 					}
 9306              		.loc 1 2985 0
 9307 485c 4C109FE5 		ldr	r1, .L929+28
 9308 4860 0400A0E3 		mov	r0, #4
 9309              	.LVL1064:
 9310 4864 FEFFFFEB 		bl	CyU3PDebugPrint
 9311              	.LVL1065:
 9312 4868 C3F8FFEA 		b	.L727
 9313              	.LVL1066:
 9314              	.L609:
 9315              	.LBE389:
 9316              	.LBE426:
 9317              	.LBB427:
 9318              	.LBB374:
 9319              	.LBB357:
 9320              	.LBB246:
 636:../uvc.c      **** 		 	 }
 9321              		.loc 1 636 0
 9322 486c B133DBE5 		ldrb	r3, [fp, #945]	@ zero_extendqisi2
 9323 4870 B2FEFFEA 		b	.L886
 9324              	.L608:
 623:../uvc.c      **** 			  glEp0Buffer[1] = CtrlParArry[CtrlID][8];
 9325              		.loc 1 623 0
 9326 4874 AF13DBE5 		ldrb	r1, [fp, #943]	@ zero_extendqisi2
 624:../uvc.c      **** 			  glEp0Buffer[2] = 0;
 9327              		.loc 1 624 0
 9328 4878 B023DBE5 		ldrb	r2, [fp, #944]	@ zero_extendqisi2
 9329 487c B9FEFFEA 		b	.L887
 9330              	.LVL1067:
 9331              	.L648:
 9332              	.LBE246:
 9333              	.LBE357:
 9334              	.LBB358:
 9335              	.LBB259:
 428:../uvc.c      **** 			  CyU3PUsbSendEP0Data (2, (uint8_t *)glEp0Buffer);
 9336              		.loc 1 428 0
 9337 4880 0030A0E3 		mov	r3, #0
 429:../uvc.c      **** 			  sendData = glEp0Buffer[0];
 9338              		.loc 1 429 0
 9339 4884 0200A0E3 		mov	r0, #2
 9340 4888 18109FE5 		ldr	r1, .L929+20
 427:../uvc.c      **** 			  glEp0Buffer[1] = 0;
 9341              		.loc 1 427 0
 9342 488c A060C4E5 		strb	r6, [r4, #160]
 9343 4890 67F8FFEA 		b	.L874
 9344              	.L930:
 9345              		.align	2
 9346              	.L929:
 9347 4894 00000000 		.word	glProbeCtrl
 9348 4898 00000000 		.word	gl1080pProbeCtrl
 9349 489c 00000000 		.word	glVga60ProbeCtrl
 9350 48a0 00000000 		.word	gl720pProbeCtrl
 9351 48a4 00000000 		.word	gl5MpProbeCtrl
 9352 48a8 A0000000 		.word	.LANCHOR0+160
 9353 48ac 84030000 		.word	.LC21
 9354 48b0 58030000 		.word	.LC20
 9355              	.LBE259:
 9356              	.LBE358:
 9357              	.LBE374:
 9358              	.LBE427:
 9359              		.cfi_endproc
 9360              	.LFE20:
 9362              		.align	2
 9363              		.global	CyFxApplicationDefine
 9365              	CyFxApplicationDefine:
 9366              	.LFB23:
3583:../uvc.c      **** }
3584:../uvc.c      **** 
3585:../uvc.c      **** /* Application define function which creates the threads. */
3586:../uvc.c      ****     void
3587:../uvc.c      **** CyFxApplicationDefine (
3588:../uvc.c      ****         void)
3589:../uvc.c      **** {
 9367              		.loc 1 3589 0
 9368              		.cfi_startproc
 9369              		@ args = 0, pretend = 0, frame = 32
 9370              		@ frame_needed = 0, uses_anonymous_args = 0
 9371              	.LVL1068:
 9372 48b4 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 9373              	.LCFI28:
 9374              		.cfi_def_cfa_offset 36
 9375              		.cfi_offset 4, -36
 9376              		.cfi_offset 5, -32
 9377              		.cfi_offset 6, -28
 9378              		.cfi_offset 7, -24
 9379              		.cfi_offset 8, -20
 9380              		.cfi_offset 9, -16
 9381              		.cfi_offset 10, -12
 9382              		.cfi_offset 11, -8
 9383              		.cfi_offset 14, -4
3590:../uvc.c      **** 	void *ptr1, *ptr2, *ptr3;
3591:../uvc.c      ****     uint32_t retThrdCreate = CY_U3P_SUCCESS;
3592:../uvc.c      **** 	VdRingBuf *cmdQuptr = &cmdQu;
3593:../uvc.c      **** 	VdRingBuf *statQuptr = &statQu;
3594:../uvc.c      **** 
3595:../uvc.c      **** 	/* Allocate the memory for the thread stacks. */
3596:../uvc.c      **** 	ptr1 = CyU3PMemAlloc(UVC_APP_THREAD_STACK);
 9384              		.loc 1 3596 0
 9385 48b8 010AA0E3 		mov	r0, #4096
3589:../uvc.c      **** 	void *ptr1, *ptr2, *ptr3;
 9386              		.loc 1 3589 0
 9387 48bc 44D04DE2 		sub	sp, sp, #68
 9388              	.LCFI29:
 9389              		.cfi_def_cfa_offset 104
 9390              		.loc 1 3596 0
 9391 48c0 FEFFFFEB 		bl	CyU3PMemAlloc
 9392              	.LVL1069:
 9393 48c4 0080A0E1 		mov	r8, r0
 9394              	.LVL1070:
3597:../uvc.c      **** 	ptr2 = CyU3PMemAlloc(UVC_APP_THREAD_STACK);
 9395              		.loc 1 3597 0
 9396 48c8 010AA0E3 		mov	r0, #4096
 9397              	.LVL1071:
 9398 48cc FEFFFFEB 		bl	CyU3PMemAlloc
 9399              	.LVL1072:
 9400 48d0 00B0A0E1 		mov	fp, r0
 9401              	.LVL1073:
3598:../uvc.c      **** 	ptr3 = CyU3PMemAlloc(UVC_APP_THREAD_STACK);
 9402              		.loc 1 3598 0
 9403 48d4 010AA0E3 		mov	r0, #4096
 9404              	.LVL1074:
 9405 48d8 FEFFFFEB 		bl	CyU3PMemAlloc
 9406              	.LVL1075:
3599:../uvc.c      **** 
3600:../uvc.c      **** 	if ((ptr1 == 0) || (ptr2 == 0) || (ptr3 == 0))
 9407              		.loc 1 3600 0
 9408 48dc 00005BE3 		cmp	fp, #0
 9409 48e0 00005813 		cmpne	r8, #0
 9410 48e4 00B0A013 		movne	fp, #0
 9411 48e8 01B0A003 		moveq	fp, #1
 9412              	.LVL1076:
3598:../uvc.c      **** 	ptr3 = CyU3PMemAlloc(UVC_APP_THREAD_STACK);
 9413              		.loc 1 3598 0
 9414 48ec 00A0A0E1 		mov	r10, r0
 9415              	.LVL1077:
 9416              		.loc 1 3600 0
 9417 48f0 0000001A 		bne	.L942
 9418              	.LVL1078:
 9419              	.L932:
 9420              	.L934:
 9421 48f4 FEFFFFEA 		b	.L934
 9422              	.LVL1079:
 9423              	.L942:
 9424              		.loc 1 3600 0 is_stmt 0 discriminator 1
 9425 48f8 000050E3 		cmp	r0, #0
 9426 48fc FCFFFF0A 		beq	.L932
3601:../uvc.c      **** 		goto fatalErrorHandler;
3602:../uvc.c      **** 
3603:../uvc.c      **** 	/****** create a ring buffer for command queue *******/
3604:../uvc.c      **** 	cmdQu = cmdbufCreate(MAXCMD, &cmdQuMux);
 9427              		.loc 1 3604 0 is_stmt 1
 9428 4900 20008DE2 		add	r0, sp, #32
 9429              	.LVL1080:
 9430 4904 4010A0E3 		mov	r1, #64
 9431 4908 E8209FE5 		ldr	r2, .L943
 9432 490c FEFFFFEB 		bl	cmdbufCreate
 9433              	.LVL1081:
 9434 4910 20408DE2 		add	r4, sp, #32
 9435 4914 0F00B4E8 		ldmia	r4!, {r0, r1, r2, r3}
 9436 4918 DC609FE5 		ldr	r6, .L943+4
3605:../uvc.c      **** 	statQu = cmdbufCreate(MAXSTA, &staQuMux);
 9437              		.loc 1 3605 0
 9438 491c DC509FE5 		ldr	r5, .L943+8
3604:../uvc.c      **** 	statQu = cmdbufCreate(MAXSTA, &staQuMux);
 9439              		.loc 1 3604 0
 9440 4920 0F00A6E8 		stmia	r6!, {r0, r1, r2, r3}
 9441 4924 0F0094E8 		ldmia	r4, {r0, r1, r2, r3}
3606:../uvc.c      **** 
3607:../uvc.c      **** 	/****** initialize command descriptor ***********/
3608:../uvc.c      **** 	cmdquInit(cmdQuptr);
3609:../uvc.c      **** 	cmdquInit(statQuptr);
3610:../uvc.c      **** 
3611:../uvc.c      **** 	/* Create the UVC application thread. */
3612:../uvc.c      **** 	retThrdCreate = CyU3PThreadCreate(&uvcAppThread,   /* UVC Thread structure */
 9442              		.loc 1 3612 0
 9443 4928 0870A0E3 		mov	r7, #8
3604:../uvc.c      **** 	statQu = cmdbufCreate(MAXSTA, &staQuMux);
 9444              		.loc 1 3604 0
 9445 492c 0F0086E8 		stmia	r6, {r0, r1, r2, r3}
3605:../uvc.c      **** 
 9446              		.loc 1 3605 0
 9447 4930 CC209FE5 		ldr	r2, .L943+12
 9448 4934 20008DE2 		add	r0, sp, #32
 9449 4938 2010A0E3 		mov	r1, #32
 9450 493c FEFFFFEB 		bl	cmdbufCreate
 9451              	.LVL1082:
 9452 4940 20C08DE2 		add	ip, sp, #32
 9453 4944 0F00BCE8 		ldmia	ip!, {r0, r1, r2, r3}
 9454              		.loc 1 3612 0
 9455 4948 0190A0E3 		mov	r9, #1
3605:../uvc.c      **** 
 9456              		.loc 1 3605 0
 9457 494c 0F00A5E8 		stmia	r5!, {r0, r1, r2, r3}
 9458 4950 0F0094E8 		ldmia	r4, {r0, r1, r2, r3}
 9459              		.loc 1 3612 0
 9460 4954 A840A0E3 		mov	r4, #168
3605:../uvc.c      **** 
 9461              		.loc 1 3605 0
 9462 4958 0F0085E8 		stmia	r5, {r0, r1, r2, r3}
3608:../uvc.c      **** 	cmdquInit(statQuptr);
 9463              		.loc 1 3608 0
 9464 495c 100046E2 		sub	r0, r6, #16
 9465 4960 FEFFFFEB 		bl	cmdquInit
 9466              	.LVL1083:
3609:../uvc.c      **** 
 9467              		.loc 1 3609 0
 9468 4964 100045E2 		sub	r0, r5, #16
 9469 4968 FEFFFFEB 		bl	cmdquInit
 9470              	.LVL1084:
 9471              		.loc 1 3612 0
 9472 496c 012AA0E3 		mov	r2, #4096
 9473 4970 0B30A0E1 		mov	r3, fp
 9474 4974 84008DE9 		stmib	sp, {r2, r7}
 9475 4978 88009FE5 		ldr	r0, .L943+16
 9476 497c 00808DE5 		str	r8, [sp]
 9477 4980 10B08DE5 		str	fp, [sp, #16]
 9478 4984 0C708DE5 		str	r7, [sp, #12]
 9479 4988 14908DE5 		str	r9, [sp, #20]
 9480 498c 18408DE5 		str	r4, [sp, #24]
 9481 4990 74109FE5 		ldr	r1, .L943+20
 9482 4994 74209FE5 		ldr	r2, .L943+24
 9483 4998 FEFFFFEB 		bl	_txe_thread_create
 9484              	.LVL1085:
3613:../uvc.c      **** 		"30:UVC App Thread",                        /* Thread Id and name */
3614:../uvc.c      **** 		UVCAppThread_Entry,                         /* UVC Application Thread Entry function */
3615:../uvc.c      **** 		0,                                          /* No input parameter to thread */
3616:../uvc.c      **** 		ptr1,                                       /* Pointer to the allocated thread stack */
3617:../uvc.c      **** 		UVC_APP_THREAD_STACK,                       /* UVC Application Thread stack size */
3618:../uvc.c      **** 		UVC_APP_THREAD_PRIORITY,                    /* UVC Application Thread priority */
3619:../uvc.c      **** 		UVC_APP_THREAD_PRIORITY,                    /* Threshold value for thread pre-emption. */
3620:../uvc.c      **** 		CYU3P_NO_TIME_SLICE,                        /* No time slice for the application thread */
3621:../uvc.c      **** 		CYU3P_AUTO_START                            /* Start the Thread immediately */
3622:../uvc.c      **** 		);
3623:../uvc.c      ****     /* Check the return code */
3624:../uvc.c      **** 	if (retThrdCreate != 0)
 9485              		.loc 1 3624 0
 9486 499c 003050E2 		subs	r3, r0, #0
 9487 49a0 D3FFFF1A 		bne	.L932
3625:../uvc.c      **** 	{
3626:../uvc.c      **** 		goto fatalErrorHandler;
3627:../uvc.c      **** 	}
3628:../uvc.c      **** #if 0  //cancel the ep0 thread
3629:../uvc.c      **** 	/* Create the control request handling thread. */
3630:../uvc.c      **** 	retThrdCreate = CyU3PThreadCreate(&uvcAppEP0Thread,        /* UVC Thread structure */
3631:../uvc.c      **** 		"31:UVC App EP0 Thread",                            /* Thread Id and name */
3632:../uvc.c      **** 		UVCAppEP0Thread_Entry,                              /* UVC Application EP0 Thread Entry function 
3633:../uvc.c      **** 		0,                                                  /* No input parameter to thread */
3634:../uvc.c      **** 		ptr2,                                               /* Pointer to the allocated thread stack */
3635:../uvc.c      **** 		UVC_APP_EP0_THREAD_STACK,                           /* UVC Application Thread stack size */
3636:../uvc.c      **** 		UVC_APP_EP0_THREAD_PRIORITY,                        /* UVC Application Thread priority */
3637:../uvc.c      **** 		UVC_APP_EP0_THREAD_PRIORITY,                        /* Threshold value for thread pre-emption. */
3638:../uvc.c      **** 		CYU3P_NO_TIME_SLICE,                                /* No time slice for the application thread *
3639:../uvc.c      **** 		CYU3P_AUTO_START                                    /* Start the Thread immediately */
3640:../uvc.c      **** 		);
3641:../uvc.c      **** 	if (retThrdCreate != 0)
3642:../uvc.c      **** 	{
3643:../uvc.c      **** 		goto fatalErrorHandler;
3644:../uvc.c      **** 	}
3645:../uvc.c      **** #endif
3646:../uvc.c      **** 	/* Create the I2C control command handling thread. */
3647:../uvc.c      **** 	retThrdCreate = CyU3PThreadCreate(&i2cAppThread,   /* UVC Thread structure */
 9488              		.loc 1 3647 0
 9489 49a4 022BA0E3 		mov	r2, #2048
 9490 49a8 04208DE5 		str	r2, [sp, #4]
 9491 49ac 60109FE5 		ldr	r1, .L943+28
 9492 49b0 00A08DE5 		str	r10, [sp]
 9493 49b4 08708DE5 		str	r7, [sp, #8]
 9494 49b8 0C708DE5 		str	r7, [sp, #12]
 9495 49bc 10308DE5 		str	r3, [sp, #16]
 9496 49c0 14908DE5 		str	r9, [sp, #20]
 9497 49c4 18408DE5 		str	r4, [sp, #24]
 9498 49c8 48009FE5 		ldr	r0, .L943+32
 9499              	.LVL1086:
 9500 49cc 48209FE5 		ldr	r2, .L943+36
 9501 49d0 FEFFFFEB 		bl	_txe_thread_create
 9502              	.LVL1087:
3648:../uvc.c      **** 		"32:I2C App CTRL Thread",                        /* Thread Id and name */
3649:../uvc.c      **** 		I2cAppThread_Entry,                         /* UVC Application Thread Entry function */
3650:../uvc.c      **** 		0,                                          /* No input parameter to thread */
3651:../uvc.c      **** 		ptr3,                                       /* Pointer to the allocated thread stack */
3652:../uvc.c      **** 		UVC_APP_I2C_THREAD_STACK,                       /* UVC Application Thread stack size */
3653:../uvc.c      **** 		UVC_APP_I2C_THREAD_PRIORITY,                    /* UVC Application Thread priority */
3654:../uvc.c      **** 		UVC_APP_I2C_THREAD_PRIORITY,                    /* Threshold value for thread pre-emption. */
3655:../uvc.c      **** 		CYU3P_NO_TIME_SLICE,                        /* No time slice for the application thread */
3656:../uvc.c      **** 		CYU3P_AUTO_START                            /* Start the Thread immediately */
3657:../uvc.c      **** 		);
3658:../uvc.c      **** 	if (retThrdCreate != 0)
 9503              		.loc 1 3658 0
 9504 49d4 001050E2 		subs	r1, r0, #0
 9505 49d8 C5FFFF1A 		bne	.L932
3659:../uvc.c      **** 	{
3660:../uvc.c      **** 		goto fatalErrorHandler;
3661:../uvc.c      **** 	}
3662:../uvc.c      **** 
3663:../uvc.c      ****     /* Create GPIO application event group */
3664:../uvc.c      ****     retThrdCreate = CyU3PEventCreate(&glFxUVCEvent); //it places the evnet group glFxUVCEvent
 9506              		.loc 1 3664 0
 9507 49dc 3C009FE5 		ldr	r0, .L943+40
 9508              	.LVL1088:
 9509 49e0 2820A0E3 		mov	r2, #40
 9510 49e4 FEFFFFEB 		bl	_txe_event_flags_create
 9511              	.LVL1089:
3665:../uvc.c      ****     if (retThrdCreate != 0)
 9512              		.loc 1 3665 0
 9513 49e8 000050E3 		cmp	r0, #0
 9514 49ec C0FFFF1A 		bne	.L932
3666:../uvc.c      ****     {
3667:../uvc.c      ****         /* Event group creation failed with the error code retThrdCreate */
3668:../uvc.c      **** 
3669:../uvc.c      ****         /* Add custom recovery or debug actions here */
3670:../uvc.c      **** 
3671:../uvc.c      ****         /* Application cannot continue */
3672:../uvc.c      ****         /* Loop indefinitely */
3673:../uvc.c      **** 		goto fatalErrorHandler;
3674:../uvc.c      **** 	}
3675:../uvc.c      **** 
3676:../uvc.c      ****     return;
3677:../uvc.c      **** 
3678:../uvc.c      ****     fatalErrorHandler:
3679:../uvc.c      ****         /* Add custom recovery or debug actions here */
3680:../uvc.c      ****         /* Loop indefinitely */
3681:../uvc.c      ****         while (1);
3682:../uvc.c      **** }
 9515              		.loc 1 3682 0
 9516 49f0 44D08DE2 		add	sp, sp, #68
 9517              		@ sp needed
 9518 49f4 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9519              	.LVL1090:
 9520              	.L944:
 9521              		.align	2
 9522              	.L943:
 9523 49f8 00000000 		.word	cmdQuMux
 9524 49fc 00000000 		.word	cmdQu
 9525 4a00 00000000 		.word	statQu
 9526 4a04 00000000 		.word	staQuMux
 9527 4a08 F0000000 		.word	.LANCHOR0+240
 9528 4a0c 58080000 		.word	.LC51
 9529 4a10 00000000 		.word	UVCAppThread_Entry
 9530 4a14 6C080000 		.word	.LC52
 9531 4a18 98010000 		.word	.LANCHOR0+408
 9532 4a1c 00000000 		.word	I2cAppThread_Entry
 9533 4a20 00000000 		.word	.LANCHOR0
 9534              		.cfi_endproc
 9535              	.LFE23:
 9537              		.section	.text.startup,"ax",%progbits
 9538              		.align	2
 9539              		.global	main
 9541              	main:
 9542              	.LFB24:
3683:../uvc.c      **** 
3684:../uvc.c      **** /*
3685:../uvc.c      ****  * Main function
3686:../uvc.c      ****  */
3687:../uvc.c      **** 
3688:../uvc.c      **** int
3689:../uvc.c      **** main (void)
3690:../uvc.c      **** {
 9543              		.loc 1 3690 0
 9544              		.cfi_startproc
 9545              		@ args = 0, pretend = 0, frame = 56
 9546              		@ frame_needed = 0, uses_anonymous_args = 0
 9547              	.LVL1091:
 9548 0000 10402DE9 		stmfd	sp!, {r4, lr}
 9549              	.LCFI30:
 9550              		.cfi_def_cfa_offset 8
 9551              		.cfi_offset 4, -8
 9552              		.cfi_offset 14, -4
 9553 0004 38D04DE2 		sub	sp, sp, #56
 9554              	.LCFI31:
 9555              		.cfi_def_cfa_offset 64
3691:../uvc.c      ****     CyU3PIoMatrixConfig_t io_cfg;
3692:../uvc.c      ****     CyU3PReturnStatus_t status = CY_U3P_SUCCESS;
3693:../uvc.c      **** 
3694:../uvc.c      ****     CyU3PSysClockConfig_t clockConfig;
3695:../uvc.c      ****     clockConfig.setSysClk400  = CyTrue;
3696:../uvc.c      ****     clockConfig.cpuClkDiv     = 2;
 9556              		.loc 1 3696 0
 9557 0008 0230A0E3 		mov	r3, #2
3697:../uvc.c      ****     clockConfig.dmaClkDiv     = 2;
3698:../uvc.c      ****     clockConfig.mmioClkDiv    = 2;
3699:../uvc.c      ****     clockConfig.useStandbyClk = CyFalse;
 9558              		.loc 1 3699 0
 9559 000c 0010A0E3 		mov	r1, #0
3700:../uvc.c      ****     clockConfig.clkSrc         = CY_U3P_SYS_CLK;
 9560              		.loc 1 3700 0
 9561 0010 0320A0E3 		mov	r2, #3
3695:../uvc.c      ****     clockConfig.cpuClkDiv     = 2;
 9562              		.loc 1 3695 0
 9563 0014 0140A0E3 		mov	r4, #1
3701:../uvc.c      **** 
3702:../uvc.c      ****     /* Initialize the device */
3703:../uvc.c      ****      status = CyU3PDeviceInit (&clockConfig);
 9564              		.loc 1 3703 0
 9565 0018 0D00A0E1 		mov	r0, sp
3699:../uvc.c      ****     clockConfig.clkSrc         = CY_U3P_SYS_CLK;
 9566              		.loc 1 3699 0
 9567 001c 08108DE5 		str	r1, [sp, #8]
3695:../uvc.c      ****     clockConfig.cpuClkDiv     = 2;
 9568              		.loc 1 3695 0
 9569 0020 00408DE5 		str	r4, [sp]
3696:../uvc.c      ****     clockConfig.dmaClkDiv     = 2;
 9570              		.loc 1 3696 0
 9571 0024 0430CDE5 		strb	r3, [sp, #4]
3697:../uvc.c      ****     clockConfig.mmioClkDiv    = 2;
 9572              		.loc 1 3697 0
 9573 0028 0530CDE5 		strb	r3, [sp, #5]
3698:../uvc.c      ****     clockConfig.useStandbyClk = CyFalse;
 9574              		.loc 1 3698 0
 9575 002c 0630CDE5 		strb	r3, [sp, #6]
3700:../uvc.c      **** 
 9576              		.loc 1 3700 0
 9577 0030 0C20CDE5 		strb	r2, [sp, #12]
 9578              		.loc 1 3703 0
 9579 0034 FEFFFFEB 		bl	CyU3PDeviceInit
 9580              	.LVL1092:
3704:../uvc.c      **** 
3705:../uvc.c      ****      if (status != CY_U3P_SUCCESS)
 9581              		.loc 1 3705 0
 9582 0038 001050E2 		subs	r1, r0, #0
 9583 003c 0000000A 		beq	.L951
 9584              	.L946:
 9585              	.L948:
 9586 0040 FEFFFFEA 		b	.L948
 9587              	.L951:
3706:../uvc.c      ****      {
3707:../uvc.c      ****          goto handle_fatal_error;
3708:../uvc.c      ****      }
3709:../uvc.c      **** 
3710:../uvc.c      ****     /* Initialize the caches. Enable instruction cache and keep data cache disabled.
3711:../uvc.c      ****      * The data cache is useful only when there is a large amount of CPU based memory
3712:../uvc.c      ****      * accesses. When used in simple cases, it can decrease performance due to large
3713:../uvc.c      ****      * number of cache flushes and cleans and also it adds to the complexity of the
3714:../uvc.c      ****      * code. */
3715:../uvc.c      ****     status = CyU3PDeviceCacheControl (CyTrue, CyFalse, CyFalse);
 9588              		.loc 1 3715 0
 9589 0044 0120A0E1 		mov	r2, r1
 9590 0048 0400A0E1 		mov	r0, r4
 9591              	.LVL1093:
 9592 004c FEFFFFEB 		bl	CyU3PDeviceCacheControl
 9593              	.LVL1094:
3716:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 9594              		.loc 1 3716 0
 9595 0050 003050E2 		subs	r3, r0, #0
 9596 0054 F9FFFF1A 		bne	.L946
3717:../uvc.c      ****     {
3718:../uvc.c      ****         goto handle_fatal_error;
3719:../uvc.c      ****     }
3720:../uvc.c      **** 
3721:../uvc.c      ****     /* Configure the IO matrix for the device.*/
3722:../uvc.c      ****     io_cfg.isDQ32Bit = CyTrue;
3723:../uvc.c      ****     io_cfg.useUart   = CyTrue;
3724:../uvc.c      ****     io_cfg.useI2C    = CyTrue;
3725:../uvc.c      ****     io_cfg.useI2S    = CyFalse;
3726:../uvc.c      ****     io_cfg.useSpi    = CyFalse;
3727:../uvc.c      ****     io_cfg.lppMode   = CY_U3P_IO_MATRIX_LPP_DEFAULT;
3728:../uvc.c      ****     /* No GPIOs are enabled. */
3729:../uvc.c      ****     io_cfg.gpioSimpleEn[0]  = 0;
3730:../uvc.c      ****     io_cfg.gpioSimpleEn[1]  = 0;
3731:../uvc.c      ****     io_cfg.gpioComplexEn[0] = 0;
3732:../uvc.c      ****     io_cfg.gpioComplexEn[1] = 0;
3733:../uvc.c      ****     status = CyU3PDeviceConfigureIOMatrix (&io_cfg);
 9597              		.loc 1 3733 0
 9598 0058 10008DE2 		add	r0, sp, #16
 9599              	.LVL1095:
3722:../uvc.c      ****     io_cfg.useUart   = CyTrue;
 9600              		.loc 1 3722 0
 9601 005c 10408DE5 		str	r4, [sp, #16]
3723:../uvc.c      ****     io_cfg.useI2C    = CyTrue;
 9602              		.loc 1 3723 0
 9603 0060 14408DE5 		str	r4, [sp, #20]
3724:../uvc.c      ****     io_cfg.useI2S    = CyFalse;
 9604              		.loc 1 3724 0
 9605 0064 18408DE5 		str	r4, [sp, #24]
3725:../uvc.c      ****     io_cfg.useSpi    = CyFalse;
 9606              		.loc 1 3725 0
 9607 0068 1C308DE5 		str	r3, [sp, #28]
3726:../uvc.c      ****     io_cfg.lppMode   = CY_U3P_IO_MATRIX_LPP_DEFAULT;
 9608              		.loc 1 3726 0
 9609 006c 20308DE5 		str	r3, [sp, #32]
3727:../uvc.c      ****     /* No GPIOs are enabled. */
 9610              		.loc 1 3727 0
 9611 0070 2630CDE5 		strb	r3, [sp, #38]
3729:../uvc.c      ****     io_cfg.gpioSimpleEn[1]  = 0;
 9612              		.loc 1 3729 0
 9613 0074 28308DE5 		str	r3, [sp, #40]
3730:../uvc.c      ****     io_cfg.gpioComplexEn[0] = 0;
 9614              		.loc 1 3730 0
 9615 0078 2C308DE5 		str	r3, [sp, #44]
3731:../uvc.c      ****     io_cfg.gpioComplexEn[1] = 0;
 9616              		.loc 1 3731 0
 9617 007c 30308DE5 		str	r3, [sp, #48]
3732:../uvc.c      ****     status = CyU3PDeviceConfigureIOMatrix (&io_cfg);
 9618              		.loc 1 3732 0
 9619 0080 34308DE5 		str	r3, [sp, #52]
 9620              		.loc 1 3733 0
 9621 0084 FEFFFFEB 		bl	CyU3PDeviceConfigureIOMatrix
 9622              	.LVL1096:
3734:../uvc.c      ****     if (status != CY_U3P_SUCCESS)
 9623              		.loc 1 3734 0
 9624 0088 004050E2 		subs	r4, r0, #0
 9625 008c EBFFFF1A 		bne	.L946
3735:../uvc.c      ****     {
3736:../uvc.c      ****         goto handle_fatal_error;
3737:../uvc.c      ****     }
3738:../uvc.c      **** 
3739:../uvc.c      ****     /* This is a non returnable call for initializing the RTOS kernel */
3740:../uvc.c      ****     CyU3PKernelEntry ();
 9626              		.loc 1 3740 0
 9627 0090 FEFFFFEB 		bl	_tx_initialize_kernel_enter
 9628              	.LVL1097:
3741:../uvc.c      **** 
3742:../uvc.c      ****     /* Dummy return to make the compiler happy */
3743:../uvc.c      ****     return 0;
3744:../uvc.c      **** 
3745:../uvc.c      **** handle_fatal_error:
3746:../uvc.c      ****     /* Cannot recover from this error. */
3747:../uvc.c      ****     while (1);
3748:../uvc.c      **** }
 9629              		.loc 1 3748 0
 9630 0094 0400A0E1 		mov	r0, r4
 9631 0098 38D08DE2 		add	sp, sp, #56
 9632              		@ sp needed
 9633 009c 1080BDE8 		ldmfd	sp!, {r4, pc}
 9634              		.cfi_endproc
 9635              	.LFE24:
 9637              		.comm	I2CCmdTimer,44,4
 9638              		.comm	posTick,4,4
 9639              		.global	glcheckframe
 9640              		.global	glcommitcount
 9641              		.global	gl32GetControl
 9642              		.global	gl16GetControl
 9643              		.global	gl8SetControl
 9644              		.global	gl8GetControl
 9645              		.global	glGet_Info
 9646              		.global	g_IsAutoFocus
 9647              		.global	ES_UVC_STREAM_BUF_COUNT
 9648              		.global	ES_UVC_DATA_BUF_SIZE
 9649              		.global	ES_UVC_STREAM_BUF_SIZE
 9650              		.global	glIsStreamingStarted
 9651              		.global	glIsConfigured
 9652              		.global	glIsApplnActive
 9653              		.global	glStillSkip
 9654              		.global	glStillCaptured
 9655              		.global	glStillCaptureStart
 9656              		.global	glFrameIndexToSet
 9657              		.global	glStillTriggerCtrl
 9658              		.global	glCurrentStillFrameIndex
 9659              		.comm	glStillCommitCtrl,32,4
 9660              		.global	glCurrentFrameIndex
 9661              		.comm	glCommitCtrl,32,4
 9662              		.global	glUVCHeader
 9663              		.global	usbSpeed
 9664              		.global	isUsbConnected
 9665              		.global	glPreviewStarted
 9666              		.global	glIsClearFeature
 9667              		.global	glMipiActive
 9668              		.global	glHitFV
 9669              		.global	doLpmDisable
 9670              		.global	glActiveSocket
 9671              		.global	glDmaDone
 9672              		.global	glDMATxCount
 9673              		.comm	wLength,2,2
 9674              		.comm	wIndex,2,2
 9675              		.comm	wValue,2,2
 9676              		.comm	bTarget,1,1
 9677              		.comm	bRType,1,1
 9678              		.comm	bType,1,1
 9679              		.comm	bRequest,1,1
 9680              		.comm	imgHdMux,56,4
 9681              		.comm	timMux,56,4
 9682              		.comm	staQuMux,56,4
 9683              		.comm	cmdQuMux,56,4
 9684              		.comm	statQu,32,4
 9685              		.comm	cmdQu,32,4
 9686              		.global	testSnap
 9687              		.global	snapButFlag
 9688              		.comm	glInterStaBuffer,4,4
 9689              		.comm	glChHandleInterStat,172,4
 9690              		.comm	glChHandleStillStream,232,4
 9691              		.comm	glChHandleUVCStream,232,4
 9692              		.global	CyFxGpifConfig_usb2
 9693              		.global	CyFxGpifRegValue_usb2
 9694              		.global	CyFxGpifWavedataPosition_usb2
 9695              		.global	CyFxGpifWavedata_usb2
 9696              		.global	CyFxGpifTransition_usb2
 9697              		.global	CyFxGpifConfig
 9698              		.global	CyFxGpifRegValue
 9699              		.global	CyFxGpifWavedataPosition
 9700              		.global	CyFxGpifWavedata
 9701              		.global	CyFxGpifTransition
 9702              		.section	.rodata
 9703              		.align	2
 9704              		.set	.LANCHOR2,. + 0
 9707              	ExTime:
 9708 0000 9C       		.byte	-100
 9709 0001 00       		.byte	0
 9710 0002 4E       		.byte	78
 9711 0003 00       		.byte	0
 9712 0004 27       		.byte	39
 9713 0005 00       		.byte	0
 9714 0006 14       		.byte	20
 9715 0007 00       		.byte	0
 9716 0008 0A       		.byte	10
 9717 0009 00       		.byte	0
 9718 000a 05       		.byte	5
 9719 000b 00       		.byte	0
 9720 000c 02       		.byte	2
 9721 000d 00       		.byte	0
 9722 000e 01       		.byte	1
 9723 000f 00       		.byte	0
 9726              	CyFxGpifConfig:
 9727 0010 0F00     		.short	15
 9728 0012 0000     		.space	2
 9729 0014 00000000 		.word	CyFxGpifWavedata
 9730 0018 00000000 		.word	CyFxGpifWavedataPosition
 9731 001c 0500     		.short	5
 9732 001e 0000     		.space	2
 9733 0020 00000000 		.word	CyFxGpifTransition
 9734 0024 4C00     		.short	76
 9735 0026 0000     		.space	2
 9736 0028 00000000 		.word	CyFxGpifRegValue
 9739              	CyFxGpifConfig_usb2:
 9740 002c 9300     		.short	147
 9741 002e 0000     		.space	2
 9742 0030 00000000 		.word	CyFxGpifWavedata_usb2
 9743 0034 00000000 		.word	CyFxGpifWavedataPosition_usb2
 9744 0038 0800     		.short	8
 9745 003a 0000     		.space	2
 9746 003c 00000000 		.word	CyFxGpifTransition_usb2
 9747 0040 4C00     		.short	76
 9748 0042 0000     		.space	2
 9749 0044 00000000 		.word	CyFxGpifRegValue_usb2
 9750              		.data
 9751              		.align	2
 9752              		.set	.LANCHOR1,. + 0
 9755              	ExUCtrlParArry:
 9756 0000 00       		.byte	0
 9757 0001 00       		.byte	0
 9758 0002 04       		.byte	4
 9759 0003 01       		.byte	1
 9760 0004 00       		.byte	0
 9761 0005 38       		.byte	56
 9762 0006 01       		.byte	1
 9763 0007 01       		.byte	1
 9764 0008 00       		.byte	0
 9765 0009 03       		.byte	3
 9766 000a 00       		.byte	0
 9767 000b 4E       		.byte	78
 9768 000c 00       		.byte	0
 9769 000d 4E       		.byte	78
 9770 000e 00       		.byte	0
 9771 000f 30       		.byte	48
 9772 0010 01       		.byte	1
 9773 0011 00       		.byte	0
 9774 0012 00       		.byte	0
 9775 0013 00000000 		.space	5
 9775      00
 9776 0018 00       		.byte	0
 9777 0019 00       		.byte	0
 9778 001a 01       		.byte	1
 9779 001b 00       		.byte	0
 9780 001c 00       		.byte	0
 9781 001d 00       		.byte	0
 9782 001e 00       		.byte	0
 9783 001f 01       		.byte	1
 9784 0020 00       		.byte	0
 9785 0021 03       		.byte	3
 9786 0022 00       		.byte	0
 9787 0023 00       		.byte	0
 9788 0024 00       		.byte	0
 9789 0025 00       		.byte	0
 9790 0026 00       		.byte	0
 9791 0027 30       		.byte	48
 9792 0028 01       		.byte	1
 9793 0029 00       		.byte	0
 9794 002a 00       		.byte	0
 9795 002b 00000000 		.space	5
 9795      00
 9796 0030 00       		.byte	0
 9797 0031 00       		.byte	0
 9798 0032 02       		.byte	2
 9799 0033 00       		.byte	0
 9800 0034 00       		.byte	0
 9801 0035 FF       		.byte	-1
 9802 0036 00       		.byte	0
 9803 0037 01       		.byte	1
 9804 0038 00       		.byte	0
 9805 0039 03       		.byte	3
 9806 003a 00       		.byte	0
 9807 003b 01       		.byte	1
 9808 003c 00       		.byte	0
 9809 003d 00       		.byte	0
 9810 003e 00       		.byte	0
 9811 003f 30       		.byte	48
 9812 0040 01       		.byte	1
 9813 0041 01       		.byte	1
 9814 0042 00       		.byte	0
 9815 0043 00000000 		.space	5
 9815      00
 9816 0048 00       		.byte	0
 9817 0049 00       		.byte	0
 9818 004a 02       		.byte	2
 9819 004b 00       		.byte	0
 9820 004c 00       		.byte	0
 9821 004d 00       		.byte	0
 9822 004e 00       		.byte	0
 9823 004f 00       		.byte	0
 9824 0050 00       		.byte	0
 9825 0051 03       		.byte	3
 9826 0052 00       		.byte	0
 9827 0053 00       		.byte	0
 9828 0054 00       		.byte	0
 9829 0055 00       		.byte	0
 9830 0056 00       		.byte	0
 9831 0057 30       		.byte	48
 9832 0058 01       		.byte	1
 9833 0059 01       		.byte	1
 9834 005a 00       		.byte	0
 9835 005b 00000000 		.space	5
 9835      00
 9836 0060 13       		.byte	19
 9837 0061 14       		.byte	20
 9838 0062 02       		.byte	2
 9839 0063 01       		.byte	1
 9840 0064 00       		.byte	0
 9841 0065 03       		.byte	3
 9842 0066 00       		.byte	0
 9843 0067 01       		.byte	1
 9844 0068 00       		.byte	0
 9845 0069 03       		.byte	3
 9846 006a 00       		.byte	0
 9847 006b 23       		.byte	35
 9848 006c 37       		.byte	55
 9849 006d 23       		.byte	35
 9850 006e 37       		.byte	55
 9851 006f 30       		.byte	48
 9852 0070 01       		.byte	1
 9853 0071 00       		.byte	0
 9854 0072 00       		.byte	0
 9855 0073 00000000 		.space	5
 9855      00
 9856 0078 11       		.byte	17
 9857 0079 00       		.byte	0
 9858 007a 02       		.byte	2
 9859 007b 01       		.byte	1
 9860 007c 00       		.byte	0
 9861 007d 03       		.byte	3
 9862 007e 00       		.byte	0
 9863 007f 01       		.byte	1
 9864 0080 00       		.byte	0
 9865 0081 03       		.byte	3
 9866 0082 00       		.byte	0
 9867 0083 01       		.byte	1
 9868 0084 00       		.byte	0
 9869 0085 01       		.byte	1
 9870 0086 00       		.byte	0
 9871 0087 30       		.byte	48
 9872 0088 01       		.byte	1
 9873 0089 01       		.byte	1
 9874 008a 00       		.byte	0
 9875 008b 00000000 		.space	5
 9875      00
 9876 0090 17       		.byte	23
 9877 0091 00       		.byte	0
 9878 0092 01       		.byte	1
 9879 0093 01       		.byte	1
 9880 0094 00       		.byte	0
 9881 0095 02       		.byte	2
 9882 0096 00       		.byte	0
 9883 0097 01       		.byte	1
 9884 0098 00       		.byte	0
 9885 0099 03       		.byte	3
 9886 009a 00       		.byte	0
 9887 009b 00       		.byte	0
 9888 009c 00       		.byte	0
 9889 009d 00       		.byte	0
 9890 009e 00       		.byte	0
 9891 009f 30       		.byte	48
 9892 00a0 01       		.byte	1
 9893 00a1 01       		.byte	1
 9894 00a2 00       		.byte	0
 9895 00a3 00000000 		.space	5
 9895      00
 9896 00a8 00       		.byte	0
 9897 00a9 00       		.byte	0
 9898 00aa 04       		.byte	4
 9899 00ab 01       		.byte	1
 9900 00ac 00       		.byte	0
 9901 00ad 38       		.byte	56
 9902 00ae 01       		.byte	1
 9903 00af 01       		.byte	1
 9904 00b0 00       		.byte	0
 9905 00b1 03       		.byte	3
 9906 00b2 00       		.byte	0
 9907 00b3 4E       		.byte	78
 9908 00b4 00       		.byte	0
 9909 00b5 4E       		.byte	78
 9910 00b6 00       		.byte	0
 9911 00b7 30       		.byte	48
 9912 00b8 01       		.byte	1
 9913 00b9 00       		.byte	0
 9914 00ba 00       		.byte	0
 9915 00bb 00000000 		.space	5
 9915      00
 9916 00c0 00       		.byte	0
 9917 00c1 00       		.byte	0
 9918 00c2 01       		.byte	1
 9919 00c3 00       		.byte	0
 9920 00c4 00       		.byte	0
 9921 00c5 00       		.byte	0
 9922 00c6 00       		.byte	0
 9923 00c7 01       		.byte	1
 9924 00c8 00       		.byte	0
 9925 00c9 03       		.byte	3
 9926 00ca 00       		.byte	0
 9927 00cb 00       		.byte	0
 9928 00cc 00       		.byte	0
 9929 00cd 00       		.byte	0
 9930 00ce 00       		.byte	0
 9931 00cf 30       		.byte	48
 9932 00d0 01       		.byte	1
 9933 00d1 00       		.byte	0
 9934 00d2 00       		.byte	0
 9935 00d3 00000000 		.space	5
 9935      00
 9936 00d8 00       		.byte	0
 9937 00d9 00       		.byte	0
 9938 00da 02       		.byte	2
 9939 00db 00       		.byte	0
 9940 00dc 00       		.byte	0
 9941 00dd 05       		.byte	5
 9942 00de 00       		.byte	0
 9943 00df 01       		.byte	1
 9944 00e0 00       		.byte	0
 9945 00e1 03       		.byte	3
 9946 00e2 00       		.byte	0
 9947 00e3 00       		.byte	0
 9948 00e4 00       		.byte	0
 9949 00e5 00       		.byte	0
 9950 00e6 00       		.byte	0
 9951 00e7 30       		.byte	48
 9952 00e8 01       		.byte	1
 9953 00e9 00       		.byte	0
 9954 00ea 00       		.byte	0
 9955 00eb 00000000 		.space	5
 9955      00
 9956 00f0 00       		.byte	0
 9957 00f1 00       		.byte	0
 9958 00f2 03       		.byte	3
 9959 00f3 00       		.byte	0
 9960 00f4 00       		.byte	0
 9961 00f5 0A       		.byte	10
 9962 00f6 00       		.byte	0
 9963 00f7 01       		.byte	1
 9964 00f8 00       		.byte	0
 9965 00f9 03       		.byte	3
 9966 00fa 00       		.byte	0
 9967 00fb 00       		.byte	0
 9968 00fc 00       		.byte	0
 9969 00fd 00       		.byte	0
 9970 00fe 00       		.byte	0
 9971 00ff 30       		.byte	48
 9972 0100 01       		.byte	1
 9973 0101 00       		.byte	0
 9974 0102 00       		.byte	0
 9975 0103 00000000 		.space	5
 9975      00
 9976 0108 00       		.byte	0
 9977 0109 00       		.byte	0
 9978 010a 02       		.byte	2
 9979 010b 00       		.byte	0
 9980 010c 00       		.byte	0
 9981 010d 40       		.byte	64
 9982 010e 00       		.byte	0
 9983 010f 01       		.byte	1
 9984 0110 00       		.byte	0
 9985 0111 03       		.byte	3
 9986 0112 00       		.byte	0
 9987 0113 0F       		.byte	15
 9988 0114 11       		.byte	17
 9989 0115 00       		.byte	0
 9990 0116 00       		.byte	0
 9991 0117 30       		.byte	48
 9992 0118 01       		.byte	1
 9993 0119 00       		.byte	0
 9994 011a 00       		.byte	0
 9995 011b 00000000 		.space	5
 9995      00
 9996 0120 00       		.byte	0
 9997 0121 00       		.byte	0
 9998 0122 02       		.byte	2
 9999 0123 00       		.byte	0
 10000 0124 00       		.byte	0
 10001 0125 64       		.byte	100
 10002 0126 00       		.byte	0
 10003 0127 01       		.byte	1
 10004 0128 00       		.byte	0
 10005 0129 03       		.byte	3
 10006 012a 00       		.byte	0
 10007 012b 00       		.byte	0
 10008 012c 00       		.byte	0
 10009 012d 00       		.byte	0
 10010 012e 00       		.byte	0
 10011 012f 30       		.byte	48
 10012 0130 01       		.byte	1
 10013 0131 00       		.byte	0
 10014 0132 00       		.byte	0
 10015 0133 00000000 		.space	5
 10015      00
 10016 0138 00       		.byte	0
 10017 0139 00       		.byte	0
 10018 013a 02       		.byte	2
 10019 013b 00       		.byte	0
 10020 013c 00       		.byte	0
 10021 013d 64       		.byte	100
 10022 013e 00       		.byte	0
 10023 013f 01       		.byte	1
 10024 0140 00       		.byte	0
 10025 0141 03       		.byte	3
 10026 0142 00       		.byte	0
 10027 0143 00       		.byte	0
 10028 0144 00       		.byte	0
 10029 0145 00       		.byte	0
 10030 0146 00       		.byte	0
 10031 0147 30       		.byte	48
 10032 0148 01       		.byte	1
 10033 0149 00       		.byte	0
 10034 014a 00       		.byte	0
 10035 014b 00000000 		.space	5
 10035      00
 10036 0150 00       		.byte	0
 10037 0151 00       		.byte	0
 10038 0152 02       		.byte	2
 10039 0153 00       		.byte	0
 10040 0154 00       		.byte	0
 10041 0155 64       		.byte	100
 10042 0156 00       		.byte	0
 10043 0157 01       		.byte	1
 10044 0158 00       		.byte	0
 10045 0159 03       		.byte	3
 10046 015a 00       		.byte	0
 10047 015b 00       		.byte	0
 10048 015c 00       		.byte	0
 10049 015d 00       		.byte	0
 10050 015e 00       		.byte	0
 10051 015f 30       		.byte	48
 10052 0160 01       		.byte	1
 10053 0161 00       		.byte	0
 10054 0162 00       		.byte	0
 10055 0163 00000000 		.space	5
 10055      00
 10056 0168 00       		.byte	0
 10057 0169 00       		.byte	0
 10058 016a 02       		.byte	2
 10059 016b 00       		.byte	0
 10060 016c 00       		.byte	0
 10061 016d 64       		.byte	100
 10062 016e 00       		.byte	0
 10063 016f 01       		.byte	1
 10064 0170 00       		.byte	0
 10065 0171 03       		.byte	3
 10066 0172 00       		.byte	0
 10067 0173 00       		.byte	0
 10068 0174 00       		.byte	0
 10069 0175 00       		.byte	0
 10070 0176 00       		.byte	0
 10071 0177 30       		.byte	48
 10072 0178 01       		.byte	1
 10073 0179 00       		.byte	0
 10074 017a 00       		.byte	0
 10075 017b 00000000 		.space	5
 10075      00
 10078              	CtrlParArry:
 10079 0180 10       		.byte	16
 10080 0181 10       		.byte	16
 10081 0182 02       		.byte	2
 10082 0183 00       		.byte	0
 10083 0184 00       		.byte	0
 10084 0185 03       		.byte	3
 10085 0186 00       		.byte	0
 10086 0187 01       		.byte	1
 10087 0188 00       		.byte	0
 10088 0189 03       		.byte	3
 10089 018a 00       		.byte	0
 10090 018b 00       		.byte	0
 10091 018c 00       		.byte	0
 10092 018d 00       		.byte	0
 10093 018e 00       		.byte	0
 10094 018f 30       		.byte	48
 10095 0190 01       		.byte	1
 10096 0191 00       		.byte	0
 10097 0192 00       		.byte	0
 10098 0193 00000000 		.space	5
 10098      00
 10099 0198 01       		.byte	1
 10100 0199 00       		.byte	0
 10101 019a 02       		.byte	2
 10102 019b 00       		.byte	0
 10103 019c 00       		.byte	0
 10104 019d 3F       		.byte	63
 10105 019e 00       		.byte	0
 10106 019f 01       		.byte	1
 10107 01a0 00       		.byte	0
 10108 01a1 03       		.byte	3
 10109 01a2 00       		.byte	0
 10110 01a3 1F       		.byte	31
 10111 01a4 00       		.byte	0
 10112 01a5 1F       		.byte	31
 10113 01a6 C7       		.byte	-57
 10114 01a7 30       		.byte	48
 10115 01a8 01       		.byte	1
 10116 01a9 01       		.byte	1
 10117 01aa 00       		.byte	0
 10118 01ab 00000000 		.space	5
 10118      00
 10119 01b0 07       		.byte	7
 10120 01b1 07       		.byte	7
 10121 01b2 02       		.byte	2
 10122 01b3 10       		.byte	16
 10123 01b4 00       		.byte	0
 10124 01b5 40       		.byte	64
 10125 01b6 00       		.byte	0
 10126 01b7 01       		.byte	1
 10127 01b8 00       		.byte	0
 10128 01b9 03       		.byte	3
 10129 01ba 00       		.byte	0
 10130 01bb 28       		.byte	40
 10131 01bc 00       		.byte	0
 10132 01bd 28       		.byte	40
 10133 01be 00       		.byte	0
 10134 01bf 30       		.byte	48
 10135 01c0 01       		.byte	1
 10136 01c1 01       		.byte	1
 10137 01c2 00       		.byte	0
 10138 01c3 00000000 		.space	5
 10138      00
 10139 01c8 00       		.byte	0
 10140 01c9 00       		.byte	0
 10141 01ca 02       		.byte	2
 10142 01cb 00       		.byte	0
 10143 01cc 00       		.byte	0
 10144 01cd 64       		.byte	100
 10145 01ce 00       		.byte	0
 10146 01cf 01       		.byte	1
 10147 01d0 00       		.byte	0
 10148 01d1 03       		.byte	3
 10149 01d2 00       		.byte	0
 10150 01d3 00       		.byte	0
 10151 01d4 00       		.byte	0
 10152 01d5 00       		.byte	0
 10153 01d6 00       		.byte	0
 10154 01d7 30       		.byte	48
 10155 01d8 01       		.byte	1
 10156 01d9 00       		.byte	0
 10157 01da 00       		.byte	0
 10158 01db 00000000 		.space	5
 10158      00
 10159 01e0 07       		.byte	7
 10160 01e1 07       		.byte	7
 10161 01e2 02       		.byte	2
 10162 01e3 00       		.byte	0
 10163 01e4 00       		.byte	0
 10164 01e5 01       		.byte	1
 10165 01e6 00       		.byte	0
 10166 01e7 01       		.byte	1
 10167 01e8 00       		.byte	0
 10168 01e9 03       		.byte	3
 10169 01ea 00       		.byte	0
 10170 01eb 01       		.byte	1
 10171 01ec 00       		.byte	0
 10172 01ed 01       		.byte	1
 10173 01ee 00       		.byte	0
 10174 01ef 30       		.byte	48
 10175 01f0 01       		.byte	1
 10176 01f1 00       		.byte	0
 10177 01f2 00       		.byte	0
 10178 01f3 00000000 		.space	5
 10178      00
 10179 01f8 DF       		.byte	-33
 10180 01f9 E1       		.byte	-31
 10181 01fa 02       		.byte	2
 10182 01fb 00       		.byte	0
 10183 01fc 00       		.byte	0
 10184 01fd FF       		.byte	-1
 10185 01fe 00       		.byte	0
 10186 01ff 01       		.byte	1
 10187 0200 00       		.byte	0
 10188 0201 03       		.byte	3
 10189 0202 00       		.byte	0
 10190 0203 80       		.byte	-128
 10191 0204 00       		.byte	0
 10192 0205 00       		.byte	0
 10193 0206 00       		.byte	0
 10194 0207 C6       		.byte	-58
 10195 0208 01       		.byte	1
 10196 0209 01       		.byte	1
 10197 020a 00       		.byte	0
 10198 020b 00000000 		.space	5
 10198      00
 10199 0210 85       		.byte	-123
 10200 0211 86       		.byte	-122
 10201 0212 02       		.byte	2
 10202 0213 00       		.byte	0
 10203 0214 00       		.byte	0
 10204 0215 64       		.byte	100
 10205 0216 00       		.byte	0
 10206 0217 01       		.byte	1
 10207 0218 00       		.byte	0
 10208 0219 03       		.byte	3
 10209 021a 00       		.byte	0
 10210 021b 32       		.byte	50
 10211 021c 00       		.byte	0
 10212 021d 32       		.byte	50
 10213 021e 00       		.byte	0
 10214 021f F2       		.byte	-14
 10215 0220 01       		.byte	1
 10216 0221 01       		.byte	1
 10217 0222 00       		.byte	0
 10218 0223 00000000 		.space	5
 10218      00
 10219 0228 06       		.byte	6
 10220 0229 06       		.byte	6
 10221 022a 02       		.byte	2
 10222 022b 00       		.byte	0
 10223 022c 00       		.byte	0
 10224 022d 0E       		.byte	14
 10225 022e 00       		.byte	0
 10226 022f 01       		.byte	1
 10227 0230 00       		.byte	0
 10228 0231 03       		.byte	3
 10229 0232 00       		.byte	0
 10230 0233 00       		.byte	0
 10231 0234 00       		.byte	0
 10232 0235 00       		.byte	0
 10233 0236 00       		.byte	0
 10234 0237 30       		.byte	48
 10235 0238 01       		.byte	1
 10236 0239 01       		.byte	1
 10237 023a 00       		.byte	0
 10238 023b 00000000 		.space	5
 10238      00
 10239 0240 00       		.byte	0
 10240 0241 00       		.byte	0
 10241 0242 02       		.byte	2
 10242 0243 00       		.byte	0
 10243 0244 00       		.byte	0
 10244 0245 64       		.byte	100
 10245 0246 00       		.byte	0
 10246 0247 01       		.byte	1
 10247 0248 00       		.byte	0
 10248 0249 03       		.byte	3
 10249 024a 00       		.byte	0
 10250 024b 00       		.byte	0
 10251 024c 00       		.byte	0
 10252 024d 00       		.byte	0
 10253 024e 00       		.byte	0
 10254 024f 30       		.byte	48
 10255 0250 01       		.byte	1
 10256 0251 00       		.byte	0
 10257 0252 00       		.byte	0
 10258 0253 00000000 		.space	5
 10258      00
 10259 0258 08       		.byte	8
 10260 0259 08       		.byte	8
 10261 025a 02       		.byte	2
 10262 025b 00       		.byte	0
 10263 025c 00       		.byte	0
 10264 025d 05       		.byte	5
 10265 025e 00       		.byte	0
 10266 025f 01       		.byte	1
 10267 0260 00       		.byte	0
 10268 0261 03       		.byte	3
 10269 0262 00       		.byte	0
 10270 0263 00       		.byte	0
 10271 0264 00       		.byte	0
 10272 0265 00       		.byte	0
 10273 0266 00       		.byte	0
 10274 0267 30       		.byte	48
 10275 0268 01       		.byte	1
 10276 0269 00       		.byte	0
 10277 026a 00       		.byte	0
 10278 026b 00000000 		.space	5
 10278      00
 10279 0270 00       		.byte	0
 10280 0271 00       		.byte	0
 10281 0272 02       		.byte	2
 10282 0273 00       		.byte	0
 10283 0274 00       		.byte	0
 10284 0275 40       		.byte	64
 10285 0276 00       		.byte	0
 10286 0277 01       		.byte	1
 10287 0278 00       		.byte	0
 10288 0279 03       		.byte	3
 10289 027a 00       		.byte	0
 10290 027b 00       		.byte	0
 10291 027c 00       		.byte	0
 10292 027d 00       		.byte	0
 10293 027e 00       		.byte	0
 10294 027f 30       		.byte	48
 10295 0280 01       		.byte	1
 10296 0281 00       		.byte	0
 10297 0282 00       		.byte	0
 10298 0283 00000000 		.space	5
 10298      00
 10299 0288 09       		.byte	9
 10300 0289 0A       		.byte	10
 10301 028a 04       		.byte	4
 10302 028b 00       		.byte	0
 10303 028c 00       		.byte	0
 10304 028d 40       		.byte	64
 10305 028e 00       		.byte	0
 10306 028f 01       		.byte	1
 10307 0290 00       		.byte	0
 10308 0291 03       		.byte	3
 10309 0292 00       		.byte	0
 10310 0293 20       		.byte	32
 10311 0294 38       		.byte	56
 10312 0295 20       		.byte	32
 10313 0296 38       		.byte	56
 10314 0297 30       		.byte	48
 10315 0298 01       		.byte	1
 10316 0299 00       		.byte	0
 10317 029a 00       		.byte	0
 10318 029b 00000000 		.space	5
 10318      00
 10319 02a0 00       		.byte	0
 10320 02a1 00       		.byte	0
 10321 02a2 02       		.byte	2
 10322 02a3 00       		.byte	0
 10323 02a4 00       		.byte	0
 10324 02a5 64       		.byte	100
 10325 02a6 00       		.byte	0
 10326 02a7 01       		.byte	1
 10327 02a8 00       		.byte	0
 10328 02a9 03       		.byte	3
 10329 02aa 00       		.byte	0
 10330 02ab 00       		.byte	0
 10331 02ac 00       		.byte	0
 10332 02ad 00       		.byte	0
 10333 02ae 00       		.byte	0
 10334 02af 30       		.byte	48
 10335 02b0 01       		.byte	1
 10336 02b1 00       		.byte	0
 10337 02b2 00       		.byte	0
 10338 02b3 00000000 		.space	5
 10338      00
 10339 02b8 00       		.byte	0
 10340 02b9 00       		.byte	0
 10341 02ba 02       		.byte	2
 10342 02bb 00       		.byte	0
 10343 02bc 00       		.byte	0
 10344 02bd 64       		.byte	100
 10345 02be 00       		.byte	0
 10346 02bf 01       		.byte	1
 10347 02c0 00       		.byte	0
 10348 02c1 03       		.byte	3
 10349 02c2 00       		.byte	0
 10350 02c3 00       		.byte	0
 10351 02c4 00       		.byte	0
 10352 02c5 00       		.byte	0
 10353 02c6 00       		.byte	0
 10354 02c7 30       		.byte	48
 10355 02c8 01       		.byte	1
 10356 02c9 00       		.byte	0
 10357 02ca 00       		.byte	0
 10358 02cb 00000000 		.space	5
 10358      00
 10359 02d0 2A       		.byte	42
 10360 02d1 2A       		.byte	42
 10361 02d2 02       		.byte	2
 10362 02d3 00       		.byte	0
 10363 02d4 00       		.byte	0
 10364 02d5 1B       		.byte	27
 10365 02d6 00       		.byte	0
 10366 02d7 01       		.byte	1
 10367 02d8 00       		.byte	0
 10368 02d9 03       		.byte	3
 10369 02da 00       		.byte	0
 10370 02db 00       		.byte	0
 10371 02dc 00       		.byte	0
 10372 02dd 00       		.byte	0
 10373 02de 00       		.byte	0
 10374 02df 30       		.byte	48
 10375 02e0 01       		.byte	1
 10376 02e1 00       		.byte	0
 10377 02e2 00       		.byte	0
 10378 02e3 00000000 		.space	5
 10378      00
 10379 02e8 00       		.byte	0
 10380 02e9 00       		.byte	0
 10381 02ea 02       		.byte	2
 10382 02eb 00       		.byte	0
 10383 02ec 00       		.byte	0
 10384 02ed 64       		.byte	100
 10385 02ee 00       		.byte	0
 10386 02ef 01       		.byte	1
 10387 02f0 00       		.byte	0
 10388 02f1 03       		.byte	3
 10389 02f2 00       		.byte	0
 10390 02f3 00       		.byte	0
 10391 02f4 00       		.byte	0
 10392 02f5 00       		.byte	0
 10393 02f6 00       		.byte	0
 10394 02f7 30       		.byte	48
 10395 02f8 01       		.byte	1
 10396 02f9 00       		.byte	0
 10397 02fa 00       		.byte	0
 10398 02fb 00000000 		.space	5
 10398      00
 10399 0300 00       		.byte	0
 10400 0301 00       		.byte	0
 10401 0302 02       		.byte	2
 10402 0303 00       		.byte	0
 10403 0304 00       		.byte	0
 10404 0305 12       		.byte	18
 10405 0306 00       		.byte	0
 10406 0307 01       		.byte	1
 10407 0308 00       		.byte	0
 10408 0309 03       		.byte	3
 10409 030a 00       		.byte	0
 10410 030b 00       		.byte	0
 10411 030c 00       		.byte	0
 10412 030d 00       		.byte	0
 10413 030e 00       		.byte	0
 10414 030f 30       		.byte	48
 10415 0310 01       		.byte	1
 10416 0311 00       		.byte	0
 10417 0312 00       		.byte	0
 10418 0313 00000000 		.space	5
 10418      00
 10419 0318 01       		.byte	1
 10420 0319 01       		.byte	1
 10421 031a 02       		.byte	2
 10422 031b 00       		.byte	0
 10423 031c 00       		.byte	0
 10424 031d 09       		.byte	9
 10425 031e 00       		.byte	0
 10426 031f 01       		.byte	1
 10427 0320 00       		.byte	0
 10428 0321 03       		.byte	3
 10429 0322 00       		.byte	0
 10430 0323 00       		.byte	0
 10431 0324 00       		.byte	0
 10432 0325 01       		.byte	1
 10433 0326 00       		.byte	0
 10434 0327 30       		.byte	48
 10435 0328 01       		.byte	1
 10436 0329 00       		.byte	0
 10437 032a 00       		.byte	0
 10438 032b 00000000 		.space	5
 10438      00
 10439 0330 05       		.byte	5
 10440 0331 05       		.byte	5
 10441 0332 02       		.byte	2
 10442 0333 00       		.byte	0
 10443 0334 00       		.byte	0
 10444 0335 03       		.byte	3
 10445 0336 00       		.byte	0
 10446 0337 01       		.byte	1
 10447 0338 00       		.byte	0
 10448 0339 03       		.byte	3
 10449 033a 00       		.byte	0
 10450 033b 00       		.byte	0
 10451 033c 00       		.byte	0
 10452 033d 00       		.byte	0
 10453 033e 00       		.byte	0
 10454 033f 30       		.byte	48
 10455 0340 01       		.byte	1
 10456 0341 00       		.byte	0
 10457 0342 00       		.byte	0
 10458 0343 00000000 		.space	5
 10458      00
 10459 0348 18       		.byte	24
 10460 0349 18       		.byte	24
 10461 034a 02       		.byte	2
 10462 034b 00       		.byte	0
 10463 034c 00       		.byte	0
 10464 034d 01       		.byte	1
 10465 034e 00       		.byte	0
 10466 034f 01       		.byte	1
 10467 0350 00       		.byte	0
 10468 0351 03       		.byte	3
 10469 0352 00       		.byte	0
 10470 0353 00       		.byte	0
 10471 0354 00       		.byte	0
 10472 0355 00       		.byte	0
 10473 0356 00       		.byte	0
 10474 0357 30       		.byte	48
 10475 0358 01       		.byte	1
 10476 0359 00       		.byte	0
 10477 035a 00       		.byte	0
 10478 035b 00000000 		.space	5
 10478      00
 10479 0360 19       		.byte	25
 10480 0361 19       		.byte	25
 10481 0362 01       		.byte	1
 10482 0363 00       		.byte	0
 10483 0364 00       		.byte	0
 10484 0365 40       		.byte	64
 10485 0366 00       		.byte	0
 10486 0367 01       		.byte	1
 10487 0368 00       		.byte	0
 10488 0369 03       		.byte	3
 10489 036a 00       		.byte	0
 10490 036b 20       		.byte	32
 10491 036c 00       		.byte	0
 10492 036d 20       		.byte	32
 10493 036e 00       		.byte	0
 10494 036f 30       		.byte	48
 10495 0370 01       		.byte	1
 10496 0371 00       		.byte	0
 10497 0372 00       		.byte	0
 10498 0373 00000000 		.space	5
 10498      00
 10499 0378 20       		.byte	32
 10500 0379 20       		.byte	32
 10501 037a 02       		.byte	2
 10502 037b 00       		.byte	0
 10503 037c 00       		.byte	0
 10504 037d 02       		.byte	2
 10505 037e 00       		.byte	0
 10506 037f 01       		.byte	1
 10507 0380 00       		.byte	0
 10508 0381 03       		.byte	3
 10509 0382 00       		.byte	0
 10510 0383 00       		.byte	0
 10511 0384 00       		.byte	0
 10512 0385 00       		.byte	0
 10513 0386 00       		.byte	0
 10514 0387 30       		.byte	48
 10515 0388 01       		.byte	1
 10516 0389 00       		.byte	0
 10517 038a 00       		.byte	0
 10518 038b 00000000 		.space	5
 10518      00
 10519 0390 22       		.byte	34
 10520 0391 22       		.byte	34
 10521 0392 02       		.byte	2
 10522 0393 00       		.byte	0
 10523 0394 00       		.byte	0
 10524 0395 3F       		.byte	63
 10525 0396 00       		.byte	0
 10526 0397 01       		.byte	1
 10527 0398 00       		.byte	0
 10528 0399 03       		.byte	3
 10529 039a 00       		.byte	0
 10530 039b 00       		.byte	0
 10531 039c 00       		.byte	0
 10532 039d 00       		.byte	0
 10533 039e 00       		.byte	0
 10534 039f 30       		.byte	48
 10535 03a0 01       		.byte	1
 10536 03a1 00       		.byte	0
 10537 03a2 00       		.byte	0
 10538 03a3 00000000 		.space	5
 10538      00
 10539 03a8 23       		.byte	35
 10540 03a9 23       		.byte	35
 10541 03aa 02       		.byte	2
 10542 03ab 00       		.byte	0
 10543 03ac 00       		.byte	0
 10544 03ad 64       		.byte	100
 10545 03ae 00       		.byte	0
 10546 03af 01       		.byte	1
 10547 03b0 00       		.byte	0
 10548 03b1 03       		.byte	3
 10549 03b2 00       		.byte	0
 10550 03b3 10       		.byte	16
 10551 03b4 00       		.byte	0
 10552 03b5 10       		.byte	16
 10553 03b6 00       		.byte	0
 10554 03b7 30       		.byte	48
 10555 03b8 01       		.byte	1
 10556 03b9 00       		.byte	0
 10557 03ba 00       		.byte	0
 10558 03bb 00000000 		.space	5
 10558      00
 10559 03c0 24       		.byte	36
 10560 03c1 24       		.byte	36
 10561 03c2 02       		.byte	2
 10562 03c3 00       		.byte	0
 10563 03c4 00       		.byte	0
 10564 03c5 64       		.byte	100
 10565 03c6 00       		.byte	0
 10566 03c7 01       		.byte	1
 10567 03c8 00       		.byte	0
 10568 03c9 03       		.byte	3
 10569 03ca 00       		.byte	0
 10570 03cb 10       		.byte	16
 10571 03cc 00       		.byte	0
 10572 03cd 10       		.byte	16
 10573 03ce 00       		.byte	0
 10574 03cf 30       		.byte	48
 10575 03d0 01       		.byte	1
 10576 03d1 00       		.byte	0
 10577 03d2 00       		.byte	0
 10578 03d3 00000000 		.space	5
 10578      00
 10579 03d8 02       		.byte	2
 10580 03d9 03       		.byte	3
 10581 03da 04       		.byte	4
 10582 03db 00       		.byte	0
 10583 03dc 00       		.byte	0
 10584 03dd FF       		.byte	-1
 10585 03de 00       		.byte	0
 10586 03df 01       		.byte	1
 10587 03e0 00       		.byte	0
 10588 03e1 03       		.byte	3
 10589 03e2 00       		.byte	0
 10590 03e3 00       		.byte	0
 10591 03e4 20       		.byte	32
 10592 03e5 00       		.byte	0
 10593 03e6 20       		.byte	32
 10594 03e7 30       		.byte	48
 10595 03e8 01       		.byte	1
 10596 03e9 00       		.byte	0
 10597 03ea 00       		.byte	0
 10598 03eb 00000000 		.space	5
 10598      00
 10599 03f0 04       		.byte	4
 10600 03f1 04       		.byte	4
 10601 03f2 02       		.byte	2
 10602 03f3 00       		.byte	0
 10603 03f4 00       		.byte	0
 10604 03f5 3F       		.byte	63
 10605 03f6 00       		.byte	0
 10606 03f7 01       		.byte	1
 10607 03f8 00       		.byte	0
 10608 03f9 03       		.byte	3
 10609 03fa 00       		.byte	0
 10610 03fb 20       		.byte	32
 10611 03fc 00       		.byte	0
 10612 03fd 20       		.byte	32
 10613 03fe 00       		.byte	0
 10614 03ff 30       		.byte	48
 10615 0400 01       		.byte	1
 10616 0401 00       		.byte	0
 10617 0402 00       		.byte	0
 10618 0403 00000000 		.space	5
 10618      00
 10619 0408 00       		.byte	0
 10620 0409 00       		.byte	0
 10621 040a 02       		.byte	2
 10622 040b 00       		.byte	0
 10623 040c 00       		.byte	0
 10624 040d 19       		.byte	25
 10625 040e 00       		.byte	0
 10626 040f 01       		.byte	1
 10627 0410 00       		.byte	0
 10628 0411 03       		.byte	3
 10629 0412 00       		.byte	0
 10630 0413 00       		.byte	0
 10631 0414 00       		.byte	0
 10632 0415 00       		.byte	0
 10633 0416 00       		.byte	0
 10634 0417 30       		.byte	48
 10635 0418 01       		.byte	1
 10636 0419 00       		.byte	0
 10637 041a 00       		.byte	0
 10638 041b 00000000 		.space	5
 10638      00
 10639 0420 10       		.byte	16
 10640 0421 10       		.byte	16
 10641 0422 02       		.byte	2
 10642 0423 00       		.byte	0
 10643 0424 00       		.byte	0
 10644 0425 06       		.byte	6
 10645 0426 00       		.byte	0
 10646 0427 01       		.byte	1
 10647 0428 00       		.byte	0
 10648 0429 03       		.byte	3
 10649 042a 00       		.byte	0
 10650 042b 00       		.byte	0
 10651 042c 00       		.byte	0
 10652 042d 00       		.byte	0
 10653 042e 00       		.byte	0
 10654 042f 30       		.byte	48
 10655 0430 01       		.byte	1
 10656 0431 00       		.byte	0
 10657 0432 00       		.byte	0
 10658 0433 00000000 		.space	5
 10658      00
 10659 0438 00       		.byte	0
 10660 0439 00       		.byte	0
 10661 043a 02       		.byte	2
 10662 043b 00       		.byte	0
 10663 043c 00       		.byte	0
 10664 043d 03       		.byte	3
 10665 043e 00       		.byte	0
 10666 043f 01       		.byte	1
 10667 0440 00       		.byte	0
 10668 0441 03       		.byte	3
 10669 0442 00       		.byte	0
 10670 0443 00       		.byte	0
 10671 0444 00       		.byte	0
 10672 0445 00       		.byte	0
 10673 0446 00       		.byte	0
 10674 0447 30       		.byte	48
 10675 0448 01       		.byte	1
 10676 0449 00       		.byte	0
 10677 044a 00       		.byte	0
 10678 044b 00000000 		.space	5
 10678      00
 10679 0450 50       		.byte	80
 10680 0451 50       		.byte	80
 10681 0452 01       		.byte	1
 10682 0453 00       		.byte	0
 10683 0454 00       		.byte	0
 10684 0455 03       		.byte	3
 10685 0456 00       		.byte	0
 10686 0457 01       		.byte	1
 10687 0458 00       		.byte	0
 10688 0459 03       		.byte	3
 10689 045a 00       		.byte	0
 10690 045b 00       		.byte	0
 10691 045c 00       		.byte	0
 10692 045d 00       		.byte	0
 10693 045e 00       		.byte	0
 10694 045f 30       		.byte	48
 10695 0460 01       		.byte	1
 10696 0461 00       		.byte	0
 10697 0462 00       		.byte	0
 10698 0463 00000000 		.space	5
 10698      00
 10699 0468 00       		.byte	0
 10700 0469 00       		.byte	0
 10701 046a 0B       		.byte	11
 10702 046b 00       		.byte	0
 10703 046c 00       		.byte	0
 10704 046d FF       		.byte	-1
 10705 046e FF       		.byte	-1
 10706 046f 01       		.byte	1
 10707 0470 00       		.byte	0
 10708 0471 03       		.byte	3
 10709 0472 00       		.byte	0
 10710 0473 00       		.byte	0
 10711 0474 00       		.byte	0
 10712 0475 00       		.byte	0
 10713 0476 00       		.byte	0
 10714 0477 00       		.byte	0
 10715 0478 01       		.byte	1
 10716 0479 00       		.byte	0
 10717 047a 00       		.byte	0
 10718 047b 00000000 		.space	5
 10718      00
 10721              	doLpmDisable:
 10722 0480 01000000 		.word	1
 10725              	glUVCHeader:
 10726 0484 0C       		.byte	12
 10727 0485 8C       		.byte	-116
 10728 0486 00       		.byte	0
 10729 0487 00       		.byte	0
 10730 0488 00       		.byte	0
 10731 0489 00       		.byte	0
 10732 048a 00       		.byte	0
 10733 048b 00       		.byte	0
 10734 048c 00       		.byte	0
 10735 048d 00       		.byte	0
 10736 048e 00       		.byte	0
 10737 048f 00       		.byte	0
 10740              	glCurrentFrameIndex:
 10741 0490 01       		.byte	1
 10742 0491 000000   		.space	3
 10745              	WBMenuCmpArry:
 10746 0494 A0       		.byte	-96
 10747 0495 0F       		.byte	15
 10748 0496 0F       		.byte	15
 10749 0497 F0       		.byte	-16
 10752              	CTCtrlParArry:
 10753 0498 00       		.byte	0
 10754 0499 00       		.byte	0
 10755 049a 01       		.byte	1
 10756 049b 00       		.byte	0
 10757 049c 00       		.byte	0
 10758 049d 03       		.byte	3
 10759 049e 00       		.byte	0
 10760 049f 01       		.byte	1
 10761 04a0 00       		.byte	0
 10762 04a1 03       		.byte	3
 10763 04a2 00       		.byte	0
 10764 04a3 03       		.byte	3
 10765 04a4 00       		.byte	0
 10766 04a5 03       		.byte	3
 10767 04a6 00       		.byte	0
 10768 04a7 30       		.byte	48
 10769 04a8 01       		.byte	1
 10770 04a9 00       		.byte	0
 10771 04aa 00       		.byte	0
 10772 04ab 00000000 		.space	5
 10772      00
 10773 04b0 00       		.byte	0
 10774 04b1 00       		.byte	0
 10775 04b2 01       		.byte	1
 10776 04b3 01       		.byte	1
 10777 04b4 00       		.byte	0
 10778 04b5 0F       		.byte	15
 10779 04b6 00       		.byte	0
 10780 04b7 0F       		.byte	15
 10781 04b8 00       		.byte	0
 10782 04b9 03       		.byte	3
 10783 04ba 00       		.byte	0
 10784 04bb 02       		.byte	2
 10785 04bc 00       		.byte	0
 10786 04bd 02       		.byte	2
 10787 04be 00       		.byte	0
 10788 04bf 30       		.byte	48
 10789 04c0 01       		.byte	1
 10790 04c1 01       		.byte	1
 10791 04c2 00       		.byte	0
 10792 04c3 00000000 		.space	5
 10792      00
 10793 04c8 02       		.byte	2
 10794 04c9 00       		.byte	0
 10795 04ca 01       		.byte	1
 10796 04cb 00       		.byte	0
 10797 04cc 00       		.byte	0
 10798 04cd 01       		.byte	1
 10799 04ce 00       		.byte	0
 10800 04cf 01       		.byte	1
 10801 04d0 00       		.byte	0
 10802 04d1 03       		.byte	3
 10803 04d2 00       		.byte	0
 10804 04d3 00       		.byte	0
 10805 04d4 00       		.byte	0
 10806 04d5 00       		.byte	0
 10807 04d6 00       		.byte	0
 10808 04d7 30       		.byte	48
 10809 04d8 01       		.byte	1
 10810 04d9 01       		.byte	1
 10811 04da 00       		.byte	0
 10812 04db 00000000 		.space	5
 10812      00
 10813 04e0 00       		.byte	0
 10814 04e1 00       		.byte	0
 10815 04e2 04       		.byte	4
 10816 04e3 01       		.byte	1
 10817 04e4 00       		.byte	0
 10818 04e5 38       		.byte	56
 10819 04e6 01       		.byte	1
 10820 04e7 01       		.byte	1
 10821 04e8 00       		.byte	0
 10822 04e9 03       		.byte	3
 10823 04ea 00       		.byte	0
 10824 04eb 4E       		.byte	78
 10825 04ec 00       		.byte	0
 10826 04ed 4E       		.byte	78
 10827 04ee 00       		.byte	0
 10828 04ef 30       		.byte	48
 10829 04f0 01       		.byte	1
 10830 04f1 00       		.byte	0
 10831 04f2 00       		.byte	0
 10832 04f3 00000000 		.space	5
 10832      00
 10833 04f8 04       		.byte	4
 10834 04f9 00       		.byte	0
 10835 04fa 01       		.byte	1
 10836 04fb 00       		.byte	0
 10837 04fc 00       		.byte	0
 10838 04fd 00       		.byte	0
 10839 04fe 00       		.byte	0
 10840 04ff 01       		.byte	1
 10841 0500 00       		.byte	0
 10842 0501 03       		.byte	3
 10843 0502 00       		.byte	0
 10844 0503 00       		.byte	0
 10845 0504 00       		.byte	0
 10846 0505 00       		.byte	0
 10847 0506 00       		.byte	0
 10848 0507 30       		.byte	48
 10849 0508 01       		.byte	1
 10850 0509 00       		.byte	0
 10851 050a 00       		.byte	0
 10852 050b 00000000 		.space	5
 10852      00
 10853 0510 05       		.byte	5
 10854 0511 00       		.byte	0
 10855 0512 02       		.byte	2
 10856 0513 00       		.byte	0
 10857 0514 00       		.byte	0
 10858 0515 FF       		.byte	-1
 10859 0516 00       		.byte	0
 10860 0517 01       		.byte	1
 10861 0518 00       		.byte	0
 10862 0519 03       		.byte	3
 10863 051a 00       		.byte	0
 10864 051b 01       		.byte	1
 10865 051c 00       		.byte	0
 10866 051d 00       		.byte	0
 10867 051e 00       		.byte	0
 10868 051f 30       		.byte	48
 10869 0520 01       		.byte	1
 10870 0521 01       		.byte	1
 10871 0522 00       		.byte	0
 10872 0523 00000000 		.space	5
 10872      00
 10873 0528 06       		.byte	6
 10874 0529 00       		.byte	0
 10875 052a 02       		.byte	2
 10876 052b 00       		.byte	0
 10877 052c 00       		.byte	0
 10878 052d 00       		.byte	0
 10879 052e 00       		.byte	0
 10880 052f 00       		.byte	0
 10881 0530 00       		.byte	0
 10882 0531 03       		.byte	3
 10883 0532 00       		.byte	0
 10884 0533 00       		.byte	0
 10885 0534 00       		.byte	0
 10886 0535 00       		.byte	0
 10887 0536 00       		.byte	0
 10888 0537 30       		.byte	48
 10889 0538 01       		.byte	1
 10890 0539 01       		.byte	1
 10891 053a 00       		.byte	0
 10892 053b 00000000 		.space	5
 10892      00
 10893 0540 23       		.byte	35
 10894 0541 00       		.byte	0
 10895 0542 02       		.byte	2
 10896 0543 00       		.byte	0
 10897 0544 00       		.byte	0
 10898 0545 30       		.byte	48
 10899 0546 00       		.byte	0
 10900 0547 01       		.byte	1
 10901 0548 00       		.byte	0
 10902 0549 03       		.byte	3
 10903 054a 0A       		.byte	10
 10904 054b 00       		.byte	0
 10905 054c 00       		.byte	0
 10906 054d 0A       		.byte	10
 10907 054e 00       		.byte	0
 10908 054f 30       		.byte	48
 10909 0550 01       		.byte	1
 10910 0551 01       		.byte	1
 10911 0552 00       		.byte	0
 10912 0553 00000000 		.space	5
 10912      00
 10913 0558 08       		.byte	8
 10914 0559 00       		.byte	0
 10915 055a 01       		.byte	1
 10916 055b 00       		.byte	0
 10917 055c 00       		.byte	0
 10918 055d 7F       		.byte	127
 10919 055e 00       		.byte	0
 10920 055f 01       		.byte	1
 10921 0560 00       		.byte	0
 10922 0561 03       		.byte	3
 10923 0562 00       		.byte	0
 10924 0563 00       		.byte	0
 10925 0564 00       		.byte	0
 10926 0565 00       		.byte	0
 10927 0566 00       		.byte	0
 10928 0567 30       		.byte	48
 10929 0568 01       		.byte	1
 10930 0569 00       		.byte	0
 10931 056a 00       		.byte	0
 10932 056b 00000000 		.space	5
 10932      00
 10933 0570 09       		.byte	9
 10934 0571 00       		.byte	0
 10935 0572 02       		.byte	2
 10936 0573 00       		.byte	0
 10937 0574 00       		.byte	0
 10938 0575 05       		.byte	5
 10939 0576 00       		.byte	0
 10940 0577 01       		.byte	1
 10941 0578 00       		.byte	0
 10942 0579 03       		.byte	3
 10943 057a 00       		.byte	0
 10944 057b 00       		.byte	0
 10945 057c 00       		.byte	0
 10946 057d 00       		.byte	0
 10947 057e 00       		.byte	0
 10948 057f 30       		.byte	48
 10949 0580 01       		.byte	1
 10950 0581 00       		.byte	0
 10951 0582 00       		.byte	0
 10952 0583 00000000 		.space	5
 10952      00
 10953 0588 10       		.byte	16
 10954 0589 00       		.byte	0
 10955 058a 03       		.byte	3
 10956 058b 00       		.byte	0
 10957 058c 00       		.byte	0
 10958 058d 00       		.byte	0
 10959 058e 00       		.byte	0
 10960 058f 00       		.byte	0
 10961 0590 00       		.byte	0
 10962 0591 03       		.byte	3
 10963 0592 00       		.byte	0
 10964 0593 00       		.byte	0
 10965 0594 00       		.byte	0
 10966 0595 00       		.byte	0
 10967 0596 00       		.byte	0
 10968 0597 30       		.byte	48
 10969 0598 01       		.byte	1
 10970 0599 00       		.byte	0
 10971 059a 00       		.byte	0
 10972 059b 00000000 		.space	5
 10972      00
 10973 05a0 00       		.byte	0
 10974 05a1 00       		.byte	0
 10975 05a2 02       		.byte	2
 10976 05a3 00       		.byte	0
 10977 05a4 00       		.byte	0
 10978 05a5 40       		.byte	64
 10979 05a6 00       		.byte	0
 10980 05a7 01       		.byte	1
 10981 05a8 00       		.byte	0
 10982 05a9 03       		.byte	3
 10983 05aa 00       		.byte	0
 10984 05ab 0F       		.byte	15
 10985 05ac 11       		.byte	17
 10986 05ad 00       		.byte	0
 10987 05ae 00       		.byte	0
 10988 05af 30       		.byte	48
 10989 05b0 01       		.byte	1
 10990 05b1 00       		.byte	0
 10991 05b2 00       		.byte	0
 10992 05b3 00000000 		.space	5
 10992      00
 10993 05b8 00       		.byte	0
 10994 05b9 00       		.byte	0
 10995 05ba 02       		.byte	2
 10996 05bb 00       		.byte	0
 10997 05bc 00       		.byte	0
 10998 05bd 64       		.byte	100
 10999 05be 00       		.byte	0
 11000 05bf 01       		.byte	1
 11001 05c0 00       		.byte	0
 11002 05c1 03       		.byte	3
 11003 05c2 00       		.byte	0
 11004 05c3 00       		.byte	0
 11005 05c4 00       		.byte	0
 11006 05c5 00       		.byte	0
 11007 05c6 00       		.byte	0
 11008 05c7 30       		.byte	48
 11009 05c8 01       		.byte	1
 11010 05c9 00       		.byte	0
 11011 05ca 00       		.byte	0
 11012 05cb 00000000 		.space	5
 11012      00
 11013 05d0 00       		.byte	0
 11014 05d1 00       		.byte	0
 11015 05d2 02       		.byte	2
 11016 05d3 00       		.byte	0
 11017 05d4 00       		.byte	0
 11018 05d5 64       		.byte	100
 11019 05d6 00       		.byte	0
 11020 05d7 01       		.byte	1
 11021 05d8 00       		.byte	0
 11022 05d9 03       		.byte	3
 11023 05da 00       		.byte	0
 11024 05db 00       		.byte	0
 11025 05dc 00       		.byte	0
 11026 05dd 00       		.byte	0
 11027 05de 00       		.byte	0
 11028 05df 30       		.byte	48
 11029 05e0 01       		.byte	1
 11030 05e1 00       		.byte	0
 11031 05e2 00       		.byte	0
 11032 05e3 00000000 		.space	5
 11032      00
 11033 05e8 00       		.byte	0
 11034 05e9 00       		.byte	0
 11035 05ea 02       		.byte	2
 11036 05eb 00       		.byte	0
 11037 05ec 00       		.byte	0
 11038 05ed 64       		.byte	100
 11039 05ee 00       		.byte	0
 11040 05ef 01       		.byte	1
 11041 05f0 00       		.byte	0
 11042 05f1 03       		.byte	3
 11043 05f2 00       		.byte	0
 11044 05f3 00       		.byte	0
 11045 05f4 00       		.byte	0
 11046 05f5 00       		.byte	0
 11047 05f6 00       		.byte	0
 11048 05f7 30       		.byte	48
 11049 05f8 01       		.byte	1
 11050 05f9 00       		.byte	0
 11051 05fa 00       		.byte	0
 11052 05fb 00000000 		.space	5
 11052      00
 11053 0600 00       		.byte	0
 11054 0601 00       		.byte	0
 11055 0602 02       		.byte	2
 11056 0603 00       		.byte	0
 11057 0604 00       		.byte	0
 11058 0605 64       		.byte	100
 11059 0606 00       		.byte	0
 11060 0607 01       		.byte	1
 11061 0608 00       		.byte	0
 11062 0609 03       		.byte	3
 11063 060a 00       		.byte	0
 11064 060b 00       		.byte	0
 11065 060c 00       		.byte	0
 11066 060d 00       		.byte	0
 11067 060e 00       		.byte	0
 11068 060f 30       		.byte	48
 11069 0610 01       		.byte	1
 11070 0611 00       		.byte	0
 11071 0612 00       		.byte	0
 11072 0613 00000000 		.space	5
 11072      00
 11075              	glcheckframe:
 11076 0618 01       		.byte	1
 11079              	glCurrentStillFrameIndex:
 11080 0619 01       		.byte	1
 11083              	snapButFlag:
 11084 061a 01       		.byte	1
 11087              	g_IsAutoFocus:
 11088 061b 01       		.byte	1
 11091              	CyFxGpifRegValue_usb2:
 11092 061c 08830080 		.word	-2147450104
 11093 0620 67000000 		.word	103
 11094 0624 01000000 		.word	1
 11095 0628 46000000 		.word	70
 11096 062c 00000000 		.word	0
 11097 0630 00000000 		.word	0
 11098 0634 02000000 		.word	2
 11099 0638 82000000 		.word	130
 11100 063c 82070000 		.word	1922
 11101 0640 40040000 		.word	1088
 11102 0644 FCFF0000 		.word	65532
 11103 0648 28000000 		.word	40
 11104 064c 00000000 		.word	0
 11105 0650 00000000 		.word	0
 11106 0654 00000000 		.word	0
 11107 0658 00000000 		.word	0
 11108 065c 01000000 		.word	1
 11109 0660 00000000 		.word	0
 11110 0664 00000000 		.word	0
 11111 0668 00000000 		.word	0
 11112 066c 00000000 		.word	0
 11113 0670 00000000 		.word	0
 11114 0674 00000000 		.word	0
 11115 0678 00000000 		.word	0
 11116 067c 00000000 		.word	0
 11117 0680 00000000 		.word	0
 11118 0684 00000000 		.word	0
 11119 0688 00000000 		.word	0
 11120 068c 00000000 		.word	0
 11121 0690 06000000 		.word	6
 11122 0694 00000000 		.word	0
 11123 0698 FFFF0000 		.word	65535
 11124 069c 09010000 		.word	265
 11125 06a0 00000000 		.word	0
 11126 06a4 F71F0000 		.word	8183
 11127 06a8 00000000 		.word	0
 11128 06ac FFFF0000 		.word	65535
 11129 06b0 09010000 		.word	265
 11130 06b4 00000000 		.word	0
 11131 06b8 F71F0000 		.word	8183
 11132 06bc 00000000 		.word	0
 11133 06c0 00000000 		.word	0
 11134 06c4 00000000 		.word	0
 11135 06c8 00000000 		.word	0
 11136 06cc 00000000 		.word	0
 11137 06d0 00000000 		.word	0
 11138 06d4 00000000 		.word	0
 11139 06d8 00000000 		.word	0
 11140 06dc 00000000 		.word	0
 11141 06e0 00000000 		.word	0
 11142 06e4 00000000 		.word	0
 11143 06e8 00000000 		.word	0
 11144 06ec 00000000 		.word	0
 11145 06f0 00000000 		.word	0
 11146 06f4 00000000 		.word	0
 11147 06f8 00000000 		.word	0
 11148 06fc 00000000 		.word	0
 11149 0700 00000000 		.word	0
 11150 0704 00000000 		.word	0
 11151 0708 00000000 		.word	0
 11152 070c 00000000 		.word	0
 11153 0710 00000000 		.word	0
 11154 0714 00000000 		.word	0
 11155 0718 00040180 		.word	-2147417088
 11156 071c 01040180 		.word	-2147417087
 11157 0720 02040180 		.word	-2147417086
 11158 0724 03040180 		.word	-2147417085
 11159 0728 00000000 		.word	0
 11160 072c 00000000 		.word	0
 11161 0730 00000000 		.word	0
 11162 0734 00000000 		.word	0
 11163 0738 00000000 		.word	0
 11164 073c 00000000 		.word	0
 11165 0740 00000000 		.word	0
 11166 0744 00000000 		.word	0
 11167 0748 C1FFFFFF 		.word	-63
 11170              	CyFxGpifWavedataPosition_usb2:
 11171 074c 00       		.byte	0
 11172 074d 01       		.byte	1
 11173 074e 02       		.byte	2
 11174 074f 03       		.byte	3
 11175 0750 04       		.byte	4
 11176 0751 05       		.byte	5
 11177 0752 06       		.byte	6
 11178 0753 07       		.byte	7
 11179 0754 08       		.byte	8
 11180 0755 09       		.byte	9
 11181 0756 0A       		.byte	10
 11182 0757 08       		.byte	8
 11183 0758 0B       		.byte	11
 11184 0759 0C       		.byte	12
 11185 075a 0D       		.byte	13
 11186 075b 08       		.byte	8
 11187 075c 0E       		.byte	14
 11188 075d 0F       		.byte	15
 11189 075e 08       		.byte	8
 11190 075f 08       		.byte	8
 11191 0760 08       		.byte	8
 11192 0761 08       		.byte	8
 11193 0762 08       		.byte	8
 11194 0763 08       		.byte	8
 11195 0764 08       		.byte	8
 11196 0765 08       		.byte	8
 11197 0766 08       		.byte	8
 11198 0767 08       		.byte	8
 11199 0768 08       		.byte	8
 11200 0769 08       		.byte	8
 11201 076a 08       		.byte	8
 11202 076b 08       		.byte	8
 11203 076c 08       		.byte	8
 11204 076d 08       		.byte	8
 11205 076e 08       		.byte	8
 11206 076f 08       		.byte	8
 11207 0770 08       		.byte	8
 11208 0771 08       		.byte	8
 11209 0772 08       		.byte	8
 11210 0773 08       		.byte	8
 11211 0774 08       		.byte	8
 11212 0775 08       		.byte	8
 11213 0776 08       		.byte	8
 11214 0777 08       		.byte	8
 11215 0778 08       		.byte	8
 11216 0779 08       		.byte	8
 11217 077a 08       		.byte	8
 11218 077b 08       		.byte	8
 11219 077c 08       		.byte	8
 11220 077d 08       		.byte	8
 11221 077e 08       		.byte	8
 11222 077f 08       		.byte	8
 11223 0780 08       		.byte	8
 11224 0781 08       		.byte	8
 11225 0782 08       		.byte	8
 11226 0783 08       		.byte	8
 11227 0784 08       		.byte	8
 11228 0785 08       		.byte	8
 11229 0786 08       		.byte	8
 11230 0787 08       		.byte	8
 11231 0788 08       		.byte	8
 11232 0789 08       		.byte	8
 11233 078a 08       		.byte	8
 11234 078b 08       		.byte	8
 11235 078c 08       		.byte	8
 11236 078d 08       		.byte	8
 11237 078e 08       		.byte	8
 11238 078f 08       		.byte	8
 11239 0790 08       		.byte	8
 11240 0791 08       		.byte	8
 11241 0792 08       		.byte	8
 11242 0793 08       		.byte	8
 11243 0794 08       		.byte	8
 11244 0795 08       		.byte	8
 11245 0796 08       		.byte	8
 11246 0797 08       		.byte	8
 11247 0798 08       		.byte	8
 11248 0799 08       		.byte	8
 11249 079a 08       		.byte	8
 11250 079b 08       		.byte	8
 11251 079c 08       		.byte	8
 11252 079d 08       		.byte	8
 11253 079e 08       		.byte	8
 11254 079f 08       		.byte	8
 11255 07a0 08       		.byte	8
 11256 07a1 08       		.byte	8
 11257 07a2 08       		.byte	8
 11258 07a3 08       		.byte	8
 11259 07a4 08       		.byte	8
 11260 07a5 08       		.byte	8
 11261 07a6 08       		.byte	8
 11262 07a7 08       		.byte	8
 11263 07a8 08       		.byte	8
 11264 07a9 08       		.byte	8
 11265 07aa 08       		.byte	8
 11266 07ab 08       		.byte	8
 11267 07ac 08       		.byte	8
 11268 07ad 08       		.byte	8
 11269 07ae 08       		.byte	8
 11270 07af 08       		.byte	8
 11271 07b0 08       		.byte	8
 11272 07b1 08       		.byte	8
 11273 07b2 08       		.byte	8
 11274 07b3 08       		.byte	8
 11275 07b4 08       		.byte	8
 11276 07b5 08       		.byte	8
 11277 07b6 08       		.byte	8
 11278 07b7 08       		.byte	8
 11279 07b8 08       		.byte	8
 11280 07b9 08       		.byte	8
 11281 07ba 08       		.byte	8
 11282 07bb 08       		.byte	8
 11283 07bc 08       		.byte	8
 11284 07bd 08       		.byte	8
 11285 07be 08       		.byte	8
 11286 07bf 08       		.byte	8
 11287 07c0 08       		.byte	8
 11288 07c1 08       		.byte	8
 11289 07c2 08       		.byte	8
 11290 07c3 08       		.byte	8
 11291 07c4 08       		.byte	8
 11292 07c5 08       		.byte	8
 11293 07c6 08       		.byte	8
 11294 07c7 08       		.byte	8
 11295 07c8 08       		.byte	8
 11296 07c9 08       		.byte	8
 11297 07ca 08       		.byte	8
 11298 07cb 08       		.byte	8
 11299 07cc 00       		.byte	0
 11300 07cd 01       		.byte	1
 11301 07ce 02       		.byte	2
 11302 07cf 10       		.byte	16
 11303 07d0 04       		.byte	4
 11304 07d1 05       		.byte	5
 11305 07d2 06       		.byte	6
 11306 07d3 07       		.byte	7
 11307 07d4 08       		.byte	8
 11308 07d5 09       		.byte	9
 11309 07d6 0A       		.byte	10
 11310 07d7 08       		.byte	8
 11311 07d8 11       		.byte	17
 11312 07d9 0C       		.byte	12
 11313 07da 0D       		.byte	13
 11314 07db 08       		.byte	8
 11315 07dc 0E       		.byte	14
 11316 07dd 0F       		.byte	15
 11317 07de 08       		.byte	8
 11318 07df 00       		.space	1
 11321              	CyFxGpifWavedata_usb2:
 11322 07e0 0181731E 		.word	510886145
 11323 07e4 00000000 		.word	0
 11324 07e8 00000080 		.word	-2147483648
 11325 07ec 00000000 		.word	0
 11326 07f0 00000000 		.word	0
 11327 07f4 00000000 		.word	0
 11328 07f8 0201703E 		.word	1047527682
 11329 07fc 00010000 		.word	256
 11330 0800 A00000C0 		.word	-1073741664
 11331 0804 00000000 		.word	0
 11332 0808 00000000 		.word	0
 11333 080c 00000000 		.word	0
 11334 0810 0394731E 		.word	510891011
 11335 0814 04000020 		.word	536870916
 11336 0818 60004080 		.word	-2143289248
 11337 081c 00000000 		.word	0
 11338 0820 00000000 		.word	0
 11339 0824 00000000 		.word	0
 11340 0828 0620702E 		.word	779100166
 11341 082c 0C000000 		.word	12
 11342 0830 00000080 		.word	-2147483648
 11343 0834 0620702E 		.word	779100166
 11344 0838 0C000000 		.word	12
 11345 083c 00000080 		.word	-2147483648
 11346 0840 0394731E 		.word	510891011
 11347 0844 04000020 		.word	536870916
 11348 0848 60004080 		.word	-2143289248
 11349 084c 0620702E 		.word	779100166
 11350 0850 0C000000 		.word	12
 11351 0854 00000080 		.word	-2147483648
 11352 0858 0C93731E 		.word	510890764
 11353 085c 04000024 		.word	603979780
 11354 0860 90004080 		.word	-2143289200
 11355 0864 0D20702E 		.word	779100173
 11356 0868 0C000000 		.word	12
 11357 086c 00000080 		.word	-2147483648
 11358 0870 0780724E 		.word	1316126727
 11359 0874 0A000000 		.word	10
 11360 0878 00000080 		.word	-2147483648
 11361 087c 08000000 		.word	8
 11362 0880 00000000 		.word	0
 11363 0884 00010080 		.word	-2147483392
 11364 0888 0920702E 		.word	779100169
 11365 088c 0C010000 		.word	268
 11366 0890 00000080 		.word	-2147483648
 11367 0894 0A01701E 		.word	510656778
 11368 0898 0E000100 		.word	65550
 11369 089c 00000080 		.word	-2147483648
 11370 08a0 00000000 		.word	0
 11371 08a4 00000000 		.word	0
 11372 08a8 00000000 		.word	0
 11373 08ac 00000000 		.word	0
 11374 08b0 00000000 		.word	0
 11375 08b4 00000000 		.word	0
 11376 08b8 0394731E 		.word	510891011
 11377 08bc 04000020 		.word	536870916
 11378 08c0 60004080 		.word	-2143289248
 11379 08c4 08000000 		.word	8
 11380 08c8 00000000 		.word	0
 11381 08cc 00010080 		.word	-2147483392
 11382 08d0 0B000000 		.word	11
 11383 08d4 00000000 		.word	0
 11384 08d8 00010080 		.word	-2147483392
 11385 08dc 0C93731E 		.word	510890764
 11386 08e0 04000024 		.word	603979780
 11387 08e4 90004080 		.word	-2143289200
 11388 08e8 0D20702E 		.word	779100173
 11389 08ec 0C000000 		.word	12
 11390 08f0 00000080 		.word	-2147483648
 11391 08f4 0D20702E 		.word	779100173
 11392 08f8 0C000000 		.word	12
 11393 08fc 00000080 		.word	-2147483648
 11394 0900 0E60724E 		.word	1316118542
 11395 0904 0A000000 		.word	10
 11396 0908 00000080 		.word	-2147483648
 11397 090c 0F000000 		.word	15
 11398 0910 00000000 		.word	0
 11399 0914 00010080 		.word	-2147483392
 11400 0918 1020702E 		.word	779100176
 11401 091c 0C010000 		.word	268
 11402 0920 00000080 		.word	-2147483648
 11403 0924 1101701E 		.word	510656785
 11404 0928 0E000100 		.word	65550
 11405 092c 00000080 		.word	-2147483648
 11406 0930 0C93731E 		.word	510890764
 11407 0934 04000024 		.word	603979780
 11408 0938 90004080 		.word	-2143289200
 11409 093c 0F000000 		.word	15
 11410 0940 00000000 		.word	0
 11411 0944 00010080 		.word	-2147483392
 11412 0948 12000000 		.word	18
 11413 094c 00000000 		.word	0
 11414 0950 00010080 		.word	-2147483392
 11415 0954 0394731E 		.word	510891011
 11416 0958 04000020 		.word	536870916
 11417 095c 60004080 		.word	-2143289248
 11418 0960 0480732E 		.word	779321348
 11419 0964 02010000 		.word	258
 11420 0968 000040C0 		.word	-1069547520
 11421 096c 0580732E 		.word	779321349
 11422 0970 02010000 		.word	258
 11423 0974 000040C0 		.word	-1069547520
 11424 0978 0580732E 		.word	779321349
 11425 097c 02010000 		.word	258
 11426 0980 000040C0 		.word	-1069547520
 11427 0984 0480732E 		.word	779321348
 11428 0988 02010000 		.word	258
 11429 098c 000040C0 		.word	-1069547520
 11432              	CyFxGpifTransition_usb2:
 11433 0990 0000     		.short	0
 11434 0992 5555     		.short	21845
 11435 0994 AAAA     		.short	-21846
 11436 0996 8888     		.short	-30584
 11437 0998 1111     		.short	4369
 11438 099a 4444     		.short	17476
 11439 099c 3333     		.short	13107
 11440 099e CCCC     		.short	-13108
 11443              	CyFxGpifRegValue:
 11444 09a0 08830080 		.word	-2147450104
 11445 09a4 67000000 		.word	103
 11446 09a8 00000000 		.word	0
 11447 09ac 46000000 		.word	70
 11448 09b0 00000000 		.word	0
 11449 09b4 00000000 		.word	0
 11450 09b8 02000000 		.word	2
 11451 09bc 82000000 		.word	130
 11452 09c0 82070000 		.word	1922
 11453 09c4 40040000 		.word	1088
 11454 09c8 FCFF0000 		.word	65532
 11455 09cc 28000000 		.word	40
 11456 09d0 00000000 		.word	0
 11457 09d4 00000000 		.word	0
 11458 09d8 00000000 		.word	0
 11459 09dc 00000000 		.word	0
 11460 09e0 01000000 		.word	1
 11461 09e4 00000000 		.word	0
 11462 09e8 00000000 		.word	0
 11463 09ec 00000000 		.word	0
 11464 09f0 00000000 		.word	0
 11465 09f4 00000000 		.word	0
 11466 09f8 00000000 		.word	0
 11467 09fc 00000000 		.word	0
 11468 0a00 00000000 		.word	0
 11469 0a04 00000000 		.word	0
 11470 0a08 00000000 		.word	0
 11471 0a0c 00000000 		.word	0
 11472 0a10 00000000 		.word	0
 11473 0a14 06000000 		.word	6
 11474 0a18 00000000 		.word	0
 11475 0a1c FFFF0000 		.word	65535
 11476 0a20 09010000 		.word	265
 11477 0a24 00000000 		.word	0
 11478 0a28 F71F0000 		.word	8183
 11479 0a2c 00000000 		.word	0
 11480 0a30 FFFF0000 		.word	65535
 11481 0a34 09010000 		.word	265
 11482 0a38 00000000 		.word	0
 11483 0a3c F71F0000 		.word	8183
 11484 0a40 00000000 		.word	0
 11485 0a44 00000000 		.word	0
 11486 0a48 00000000 		.word	0
 11487 0a4c 00000000 		.word	0
 11488 0a50 00000000 		.word	0
 11489 0a54 00000000 		.word	0
 11490 0a58 00000000 		.word	0
 11491 0a5c 00000000 		.word	0
 11492 0a60 00000000 		.word	0
 11493 0a64 00000000 		.word	0
 11494 0a68 00000000 		.word	0
 11495 0a6c 00000000 		.word	0
 11496 0a70 00000000 		.word	0
 11497 0a74 00000000 		.word	0
 11498 0a78 00000000 		.word	0
 11499 0a7c 00000000 		.word	0
 11500 0a80 00000000 		.word	0
 11501 0a84 00000000 		.word	0
 11502 0a88 00000000 		.word	0
 11503 0a8c 00000000 		.word	0
 11504 0a90 00000000 		.word	0
 11505 0a94 00000000 		.word	0
 11506 0a98 00000000 		.word	0
 11507 0a9c 00040180 		.word	-2147417088
 11508 0aa0 01040180 		.word	-2147417087
 11509 0aa4 02040180 		.word	-2147417086
 11510 0aa8 03040180 		.word	-2147417085
 11511 0aac 00000000 		.word	0
 11512 0ab0 00000000 		.word	0
 11513 0ab4 00000000 		.word	0
 11514 0ab8 00000000 		.word	0
 11515 0abc 00000000 		.word	0
 11516 0ac0 00000000 		.word	0
 11517 0ac4 00000000 		.word	0
 11518 0ac8 00000000 		.word	0
 11519 0acc C1FFFFFF 		.word	-63
 11522              	CyFxGpifWavedataPosition:
 11523 0ad0 00       		.byte	0
 11524 0ad1 01       		.byte	1
 11525 0ad2 02       		.byte	2
 11526 0ad3 03       		.byte	3
 11527 0ad4 04       		.byte	4
 11528 0ad5 05       		.byte	5
 11529 0ad6 06       		.byte	6
 11530 0ad7 07       		.byte	7
 11531 0ad8 08       		.byte	8
 11532 0ad9 09       		.byte	9
 11533 0ada 0A       		.byte	10
 11534 0adb 0B       		.byte	11
 11535 0adc 0B       		.byte	11
 11536 0add 0B       		.byte	11
 11537 0ade 0B       		.byte	11
 11538 0adf 00       		.space	1
 11541              	CyFxGpifWavedata:
 11542 0ae0 0181731E 		.word	510886145
 11543 0ae4 00000000 		.word	0
 11544 0ae8 00000080 		.word	-2147483648
 11545 0aec 00000000 		.word	0
 11546 0af0 00000000 		.word	0
 11547 0af4 00000000 		.word	0
 11548 0af8 0201702E 		.word	779092226
 11549 0afc 00010000 		.word	256
 11550 0b00 A0000080 		.word	-2147483488
 11551 0b04 00000000 		.word	0
 11552 0b08 00000000 		.word	0
 11553 0b0c 00000000 		.word	0
 11554 0b10 0380722E 		.word	779255811
 11555 0b14 02010020 		.word	536871170
 11556 0b18 60000080 		.word	-2147483552
 11557 0b1c 00000000 		.word	0
 11558 0b20 00000000 		.word	0
 11559 0b24 00000000 		.word	0
 11560 0b28 0460722E 		.word	779247620
 11561 0b2c 02010024 		.word	603980034
 11562 0b30 90000080 		.word	-2147483504
 11563 0b34 0594731E 		.word	510891013
 11564 0b38 06000000 		.word	6
 11565 0b3c 00000080 		.word	-2147483648
 11566 0b40 0380722E 		.word	779255811
 11567 0b44 02010020 		.word	536871170
 11568 0b48 60000080 		.word	-2147483552
 11569 0b4c 0693731E 		.word	510890758
 11570 0b50 06000000 		.word	6
 11571 0b54 00000080 		.word	-2147483648
 11572 0b58 0720703E 		.word	1047535623
 11573 0b5c 08010000 		.word	264
 11574 0b60 00000080 		.word	-2147483648
 11575 0b64 0820703E 		.word	1047535624
 11576 0b68 08010000 		.word	264
 11577 0b6c 00000080 		.word	-2147483648
 11578 0b70 0920703E 		.word	1047535625
 11579 0b74 08010000 		.word	264
 11580 0b78 00000080 		.word	-2147483648
 11581 0b7c 0A20703E 		.word	1047535626
 11582 0b80 08010000 		.word	264
 11583 0b84 00000080 		.word	-2147483648
 11584 0b88 0380722E 		.word	779255811
 11585 0b8c 02010020 		.word	536871170
 11586 0b90 60000080 		.word	-2147483552
 11587 0b94 0B000000 		.word	11
 11588 0b98 00000000 		.word	0
 11589 0b9c 00010080 		.word	-2147483392
 11590 0ba0 0460722E 		.word	779247620
 11591 0ba4 02010024 		.word	603980034
 11592 0ba8 90000080 		.word	-2147483504
 11593 0bac 0D000000 		.word	13
 11594 0bb0 00000000 		.word	0
 11595 0bb4 00010080 		.word	-2147483392
 11596 0bb8 0460722E 		.word	779247620
 11597 0bbc 02010024 		.word	603980034
 11598 0bc0 90000080 		.word	-2147483504
 11599 0bc4 0C000000 		.word	12
 11600 0bc8 00000000 		.word	0
 11601 0bcc 00010080 		.word	-2147483392
 11602 0bd0 0380722E 		.word	779255811
 11603 0bd4 02010020 		.word	536871170
 11604 0bd8 60000080 		.word	-2147483552
 11605 0bdc 0E000000 		.word	14
 11606 0be0 00000000 		.word	0
 11607 0be4 00010080 		.word	-2147483392
 11608 0be8 00000000 		.word	0
 11609 0bec 00000000 		.word	0
 11610 0bf0 00000000 		.word	0
 11611 0bf4 00000000 		.word	0
 11612 0bf8 00000000 		.word	0
 11613 0bfc 00000000 		.word	0
 11616              	CyFxGpifTransition:
 11617 0c00 0000     		.short	0
 11618 0c02 5555     		.short	21845
 11619 0c04 8888     		.short	-30584
 11620 0c06 AAAA     		.short	-21846
 11621 0c08 3333     		.short	13107
 11622 0c0a 0000     		.section	.rodata.str1.4,"aMS",%progbits,1
 11623              		.align	2
 11624              	.LC0:
 11625 0000 49324320 		.ascii	"I2C pos-timer %d %d\015\012\000"
 11625      706F732D 
 11625      74696D65 
 11625      72202564 
 11625      2025640D 
 11626 0016 0000     		.space	2
 11627              	.LC1:
 11628 0018 49324320 		.ascii	"I2C per-timer %d\015\012\000"
 11628      7065722D 
 11628      74696D65 
 11628      72202564 
 11628      0D0A00
 11629 002b 00       		.space	1
 11630              	.LC2:
 11631 002c 54686520 		.ascii	"The command queue is ready %d %d\015\012\000"
 11631      636F6D6D 
 11631      616E6420 
 11631      71756575 
 11631      65206973 
 11632 004f 00       		.space	1
 11633              	.LC3:
 11634 0050 0A0D4770 		.ascii	"\012\015GpifCB:WrapUp SCK0 Err = 0x%x\000"
 11634      69664342 
 11634      3A577261 
 11634      70557020 
 11634      53434B30 
 11635              	.LC4:
 11636 0070 0A0D4770 		.ascii	"\012\015GpifCB:WrapUp SCK1 Err = 0x%x\000"
 11636      69664342 
 11636      3A577261 
 11636      70557020 
 11636      53434B31 
 11637              	.LC5:
 11638 0090 54686520 		.ascii	"The I2C command is 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x"
 11638      49324320 
 11638      636F6D6D 
 11638      616E6420 
 11638      69732030 
 11639 00c3 25782030 		.ascii	"%x 0x%x 0x%x 0x%x 0x%x\015\012\000"
 11639      78257820 
 11639      30782578 
 11639      20307825 
 11639      78203078 
 11640              	.LC6:
 11641 00dc 6261636B 		.ascii	"back light compensation setting is not correct. %d "
 11641      206C6967 
 11641      68742063 
 11641      6F6D7065 
 11641      6E736174 
 11642 010f 25640D0A 		.ascii	"%d\015\012\000"
 11642      00
 11643              	.LC7:
 11644 0114 54686520 		.ascii	"The I2C current data is not available. try again. %"
 11644      49324320 
 11644      63757272 
 11644      656E7420 
 11644      64617461 
 11645 0147 64202564 		.ascii	"d %d\015\012\000"
 11645      0D0A00
 11646 014e 0000     		.space	2
 11647              	.LC8:
 11648 0150 4578704D 		.ascii	"ExpM&AGC sent to host. %d %d; %d %d\015\012\000"
 11648      26414743 
 11648      2073656E 
 11648      7420746F 
 11648      20686F73 
 11649 0176 0000     		.space	2
 11650              	.LC9:
 11651 0178 4578704D 		.ascii	"ExpM&AGC gotten from host. %d %d; %d %d\015\012\000"
 11651      26414743 
 11651      20676F74 
 11651      74656E20 
 11651      66726F6D 
 11652 01a2 0000     		.space	2
 11653              	.LC10:
 11654 01a4 45786520 		.ascii	"Exe level. %d %d; %d %d\015\012\000"
 11654      6C657665 
 11654      6C2E2025 
 11654      64202564 
 11654      3B202564 
 11655 01be 0000     		.space	2
 11656              	.LC11:
 11657 01c0 424C4320 		.ascii	"BLC set. %d %d; %d %d\015\012\000"
 11657      7365742E 
 11657      20256420 
 11657      25643B20 
 11657      25642025 
 11658              	.LC12:
 11659 01d8 54686520 		.ascii	"The get data from host fail error code %d.\015\012\000"
 11659      67657420 
 11659      64617461 
 11659      2066726F 
 11659      6D20686F 
 11660 0205 000000   		.space	3
 11661              	.LC13:
 11662 0208 54686520 		.ascii	"The Request 0x%x parameter get from host 0x%x 0x%x "
 11662      52657175 
 11662      65737420 
 11662      30782578 
 11662      20706172 
 11663 023b 2F207365 		.ascii	"/ send to host 0x%x 0x%x\015\012\000"
 11663      6E642074 
 11663      6F20686F 
 11663      73742030 
 11663      78257820 
 11664 0256 0000     		.space	2
 11665              	.LC14:
 11666 0258 0A0D4170 		.ascii	"\012\015AplnStrt:ChannelReset Err = 0x%x\000"
 11666      6C6E5374 
 11666      72743A43 
 11666      68616E6E 
 11666      656C5265 
 11667 027b 00       		.space	1
 11668              	.LC15:
 11669 027c 0A0D4170 		.ascii	"\012\015AplnStrt:SetXfer Err = 0x%x\000"
 11669      6C6E5374 
 11669      72743A53 
 11669      65745866 
 11669      65722045 
 11670 029a 0000     		.space	2
 11671              	.LC16:
 11672 029c 0A0D4170 		.ascii	"\012\015AplnStop:ChannelReset Err = 0x%x\000"
 11672      6C6E5374 
 11672      6F703A43 
 11672      68616E6E 
 11672      656C5265 
 11673 02bf 00       		.space	1
 11674              	.LC17:
 11675 02c0 0A0D6252 		.ascii	"\012\015bRType = 0x%x, bRequest = 0x%x, wValue = 0x"
 11675      54797065 
 11675      203D2030 
 11675      7825782C 
 11675      20625265 
 11676 02ed 25782C20 		.ascii	"%x, wIndex = 0x%x, wLength= 0x%x\000"
 11676      77496E64 
 11676      6578203D 
 11676      20307825 
 11676      782C2077 
 11677 030e 0000     		.space	2
 11678              	.LC18:
 11679 0310 0A0D4675 		.ascii	"\012\015Full Speed Not Supported!\000"
 11679      6C6C2053 
 11679      70656564 
 11679      204E6F74 
 11679      20537570 
 11680              	.LC19:
 11681 032c 0A0D5553 		.ascii	"\012\015USBStpCB:GET_CUR:SendEP0Data Err = 0x%x\000"
 11681      42537470 
 11681      43423A47 
 11681      45545F43 
 11681      55523A53 
 11682 0356 0000     		.space	2
 11683              	.LC20:
 11684 0358 0A0D5553 		.ascii	"\012\015USBStpCB:SET_CUR:GetEP0Data Err = 0x%x.\000"
 11684      42537470 
 11684      43423A53 
 11684      45545F43 
 11684      55523A47 
 11685 0382 0000     		.space	2
 11686              	.LC21:
 11687 0384 0A0D5553 		.ascii	"\012\015USBStpCB:Invalid SET_CUR Rqt Len.\000"
 11687      42537470 
 11687      43423A49 
 11687      6E76616C 
 11687      69642053 
 11688              	.LC22:
 11689 03a8 0A0D6573 		.ascii	"\012\015esSetCameraResolution\000"
 11689      53657443 
 11689      616D6572 
 11689      61526573 
 11689      6F6C7574 
 11690              	.LC23:
 11691 03c0 0A0D4170 		.ascii	"\012\015AppInit:UsbStart Err = 0x%x\000"
 11691      70496E69 
 11691      743A5573 
 11691      62537461 
 11691      72742045 
 11692 03de 0000     		.space	2
 11693              	.LC24:
 11694 03e0 0A0D4170 		.ascii	"\012\015AppInit:Set_SS_Device_Dscr Err = 0x%x\000"
 11694      70496E69 
 11694      743A5365 
 11694      745F5353 
 11694      5F446576 
 11695              	.LC25:
 11696 0408 0A0D4170 		.ascii	"\012\015AppInit:Set_HS_Device_Dscr Err = 0x%x\000"
 11696      70496E69 
 11696      743A5365 
 11696      745F4853 
 11696      5F446576 
 11697              	.LC26:
 11698 0430 0A0D4170 		.ascii	"\012\015AppInit:Set_BOS_Dscr Err = 0x%x\000"
 11698      70496E69 
 11698      743A5365 
 11698      745F424F 
 11698      535F4473 
 11699 0452 0000     		.space	2
 11700              	.LC27:
 11701 0454 0A0D4170 		.ascii	"\012\015AppInit:Set_DEVQUAL_Dscr Err = 0x%x\000"
 11701      70496E69 
 11701      743A5365 
 11701      745F4445 
 11701      56515541 
 11702 047a 0000     		.space	2
 11703              	.LC28:
 11704 047c 0A0D4170 		.ascii	"\012\015AppInit:Set_SS_CFG_Dscr Err = 0x%x\000"
 11704      70496E69 
 11704      743A5365 
 11704      745F5353 
 11704      5F434647 
 11705 04a1 000000   		.space	3
 11706              	.LC29:
 11707 04a4 0A0D4170 		.ascii	"\012\015AppInit:Set_HS_CFG_Dscr Err = 0x%x\000"
 11707      70496E69 
 11707      743A5365 
 11707      745F4853 
 11707      5F434647 
 11708 04c9 000000   		.space	3
 11709              	.LC30:
 11710 04cc 0A0D4170 		.ascii	"\012\015AppInit:Set_FS_CFG_Dscr Err = 0x%x\000"
 11710      70496E69 
 11710      743A5365 
 11710      745F4653 
 11710      5F434647 
 11711 04f1 000000   		.space	3
 11712              	.LC31:
 11713 04f4 0A0D4170 		.ascii	"\012\015AppInit:Set_STRNG_Dscr0 Err = 0x%x\000"
 11713      70496E69 
 11713      743A5365 
 11713      745F5354 
 11713      524E475F 
 11714 0519 000000   		.space	3
 11715              	.LC32:
 11716 051c 0A0D4170 		.ascii	"\012\015AppInit:Set_STRNG_Dscr1 Err = 0x%x\000"
 11716      70496E69 
 11716      743A5365 
 11716      745F5354 
 11716      524E475F 
 11717 0541 000000   		.space	3
 11718              	.LC33:
 11719 0544 0A0D4170 		.ascii	"\012\015AppInit:Set_STRNG_Dscr2 Err = 0x%x\000"
 11719      70496E69 
 11719      743A5365 
 11719      745F5354 
 11719      524E475F 
 11720 0569 000000   		.space	3
 11721              	.LC34:
 11722 056c 0A0D4170 		.ascii	"\012\015AppInit:ConnectState Err = 0x%x\000"
 11722      70496E69 
 11722      743A436F 
 11722      6E6E6563 
 11722      74537461 
 11723 058e 0000     		.space	2
 11724              	.LC35:
 11725 0590 0A0D4170 		.ascii	"\012\015AppInit:CyU3PSetEpConfig CtrlEp Err = 0x%x\000"
 11725      70496E69 
 11725      743A4379 
 11725      55335053 
 11725      65744570 
 11726 05bd 000000   		.space	3
 11727              	.LC36:
 11728 05c0 0A0D4170 		.ascii	"\012\015AppInit:CyU3PSetEpConfig BulkEp Err = 0x%x\000"
 11728      70496E69 
 11728      743A4379 
 11728      55335053 
 11728      65744570 
 11729 05ed 000000   		.space	3
 11730              	.LC37:
 11731 05f0 0A0D4170 		.ascii	"\012\015AppInit:DmaMultiChannelCreate Err = 0x%x\000"
 11731      70496E69 
 11731      743A446D 
 11731      614D756C 
 11731      74694368 
 11732 061b 00       		.space	1
 11733              	.LC38:
 11734 061c 0A0D4170 		.ascii	"\012\015AppInit:MultiChannelReset Err = 0x%x\000"
 11734      70496E69 
 11734      743A4D75 
 11734      6C746943 
 11734      68616E6E 
 11735 0643 00       		.space	1
 11736              	.LC39:
 11737 0644 0A0D4170 		.ascii	"\012\015AppInit:MipicsiGpifLoad Err = 0x%x\000"
 11737      70496E69 
 11737      743A4D69 
 11737      70696373 
 11737      69477069 
 11738 0669 000000   		.space	3
 11739              	.LC40:
 11740 066c 0A0D4170 		.ascii	"\012\015AppInit:GpifSMStart Err = 0x%x\000"
 11740      70496E69 
 11740      743A4770 
 11740      6966534D 
 11740      53746172 
 11741 068d 000000   		.space	3
 11742              	.LC41:
 11743 0690 0A0D4669 		.ascii	"\012\015Firmware Version: %d.%d.%d.%d\000"
 11743      726D7761 
 11743      72652056 
 11743      65727369 
 11743      6F6E3A20 
 11744              	.LC42:
 11745 06b0 0A0D6573 		.ascii	"\012\015esUVCUvcApplnDebugInit:CyU3PUartInit failed"
 11745      55564355 
 11745      76634170 
 11745      706C6E44 
 11745      65627567 
 11746 06dd 20457272 		.ascii	" Error = 0x%x\000"
 11746      6F72203D 
 11746      20307825 
 11746      7800
 11747 06eb 00       		.space	1
 11748              	.LC43:
 11749 06ec 0A0D6573 		.ascii	"\012\015esUVCUvcApplnDebugInit:CyU3PUartSetConfig f"
 11749      55564355 
 11749      76634170 
 11749      706C6E44 
 11749      65627567 
 11750 0719 61696C65 		.ascii	"ailed Error = 0x%x\000"
 11750      64204572 
 11750      726F7220 
 11750      3D203078 
 11750      257800
 11751              	.LC44:
 11752 072c 0A0D6573 		.ascii	"\012\015esUVCUvcApplnDebugInit:CyU3PUartTxSetBlockX"
 11752      55564355 
 11752      76634170 
 11752      706C6E44 
 11752      65627567 
 11753 0759 66657220 		.ascii	"fer failed Error = 0x%x\000"
 11753      6661696C 
 11753      65642045 
 11753      72726F72 
 11753      203D2030 
 11754 0771 000000   		.space	3
 11755              	.LC45:
 11756 0774 0A0D6573 		.ascii	"\012\015esUVCUvcApplnDebugInit:CyU3PDebugInit faile"
 11756      55564355 
 11756      76634170 
 11756      706C6E44 
 11756      65627567 
 11757 07a1 64204572 		.ascii	"d Error = 0x%x\000"
 11757      726F7220 
 11757      3D203078 
 11757      257800
 11758              	.LC46:
 11759 07b0 49324320 		.ascii	"I2C initialization failed!\012\000"
 11759      696E6974 
 11759      69616C69 
 11759      7A617469 
 11759      6F6E2066 
 11760              	.LC47:
 11761 07cc 49324320 		.ascii	"I2C configuration failed!\012\000"
 11761      636F6E66 
 11761      69677572 
 11761      6174696F 
 11761      6E206661 
 11762 07e7 00       		.space	1
 11763              	.LC48:
 11764 07e8 74657374 		.ascii	"test loop.\015\012\000"
 11764      206C6F6F 
 11764      702E0D0A 
 11764      00
 11765 07f5 000000   		.space	3
 11766              	.LC49:
 11767 07f8 54686520 		.ascii	"The default setup request value 0x%x 0x%x\015\012\000"
 11767      64656661 
 11767      756C7420 
 11767      73657475 
 11767      70207265 
 11768              	.LC50:
 11769 0824 4661696C 		.ascii	"Failed to send interrupt status, Error code = %d\015"
 11769      65642074 
 11769      6F207365 
 11769      6E642069 
 11769      6E746572 
 11770 0855 0A00     		.ascii	"\012\000"
 11771 0857 00       		.space	1
 11772              	.LC51:
 11773 0858 33303A55 		.ascii	"30:UVC App Thread\000"
 11773      56432041 
 11773      70702054 
 11773      68726561 
 11773      6400
 11774 086a 0000     		.space	2
 11775              	.LC52:
 11776 086c 33323A49 		.ascii	"32:I2C App CTRL Thread\000"
 11776      32432041 
 11776      70702043 
 11776      54524C20 
 11776      54687265 
 11777 0883 00       		.bss
 11778              		.align	2
 11779              		.set	.LANCHOR0,. + 0
 11782              	glFxUVCEvent:
 11783 0000 00000000 		.space	40
 11783      00000000 
 11783      00000000 
 11783      00000000 
 11783      00000000 
 11786              	timercount:
 11787 0028 00       		.space	1
 11788 0029 000000   		.space	3
 11791              	curFlag:
 11792 002c 00000000 		.space	64
 11792      00000000 
 11792      00000000 
 11792      00000000 
 11792      00000000 
 11795              	ES_UVC_DATA_BUF_SIZE:
 11796 006c 0000     		.space	2
 11797 006e 0000     		.space	2
 11800              	glHitFV:
 11801 0070 00000000 		.space	4
 11804              	glDMATxCount:
 11805 0074 00000000 		.space	4
 11808              	glDmaDone:
 11809 0078 00000000 		.space	4
 11812              	glActiveSocket:
 11813 007c 00       		.space	1
 11814 007d 000000   		.space	3
 11817              	glIsStreamingStarted:
 11818 0080 00000000 		.space	4
 11821              	glStillCaptured:
 11822 0084 00000000 		.space	4
 11825              	glFrameIndexToSet:
 11826 0088 00       		.space	1
 11827 0089 000000   		.space	3
 11830              	glStillCaptureStart:
 11831 008c 00000000 		.space	4
 11834              	glStillSkip:
 11835 0090 00       		.space	1
 11836 0091 000000   		.space	3
 11839              	I2CCMDArry:
 11840 0094 00000000 		.space	12
 11840      00000000 
 11840      00000000 
 11843              	glEp0Buffer:
 11844 00a0 00000000 		.space	32
 11844      00000000 
 11844      00000000 
 11844      00000000 
 11844      00000000 
 11847              	WDRflag:
 11848 00c0 00000000 		.space	4
 11851              	glIsApplnActive:
 11852 00c4 00000000 		.space	4
 11855              	glMipiActive:
 11856 00c8 00000000 		.space	4
 11859              	glIsClearFeature:
 11860 00cc 00000000 		.space	4
 11863              	glPreviewStarted:
 11864 00d0 00000000 		.space	4
 11867              	glcommitcount:
 11868 00d4 00       		.space	1
 11869 00d5 000000   		.space	3
 11872              	glIsConfigured:
 11873 00d8 00000000 		.space	4
 11876              	glStillTriggerCtrl:
 11877 00dc 00       		.space	1
 11878 00dd 00       		.space	1
 11881              	ES_UVC_STREAM_BUF_SIZE:
 11882 00de 0000     		.space	2
 11885              	ES_UVC_STREAM_BUF_COUNT:
 11886 00e0 00       		.space	1
 11887 00e1 000000   		.space	3
 11890              	isUsbConnected:
 11891 00e4 00000000 		.space	4
 11894              	usbSpeed:
 11895 00e8 00       		.space	1
 11896 00e9 000000   		.space	3
 11899              	stiflag:
 11900 00ec 00000000 		.space	4
 11903              	uvcAppThread:
 11904 00f0 00000000 		.space	168
 11904      00000000 
 11904      00000000 
 11904      00000000 
 11904      00000000 
 11907              	i2cAppThread:
 11908 0198 00000000 		.space	168
 11908      00000000 
 11908      00000000 
 11908      00000000 
 11908      00000000 
 11911              	gl32GetControl:
 11912 0240 00000000 		.space	4
 11915              	gl16GetControl:
 11916 0244 0000     		.space	2
 11919              	gl8SetControl:
 11920 0246 0000     		.space	2
 11923              	gl8GetControl:
 11924 0248 0000     		.space	2
 11927              	glGet_Info:
 11928 024a 00       		.space	1
 11931              	testSnap:
 11932 024b 00       		.space	1
 11933              		.text
 11934              	.Letext0:
 11935              		.file 2 "c:\\program files (x86)\\cypress\\ez-usb fx3 sdk\\1.3\\arm gcc\\arm-none-eabi\\include\\s
 11936              		.file 3 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\\\firmware\\u3p_firmware\\inc/cyu3
 11937              		.file 4 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\\\firmware\\u3p_firmware\\inc/cyfx
 11938              		.file 5 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\\\firmware\\u3p_firmware\\inc/tx_p
 11939              		.file 6 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\\\firmware\\u3p_firmware\\inc/tx_a
 11940              		.file 7 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\\\firmware\\u3p_firmware\\inc/cyu3
 11941              		.file 8 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\\\firmware\\u3p_firmware\\inc/cyu3
 11942              		.file 9 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\\\firmware\\u3p_firmware\\inc/cyu3
 11943              		.file 10 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\\\firmware\\u3p_firmware\\inc/cyu
 11944              		.file 11 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\\\firmware\\u3p_firmware\\inc/cyu
 11945              		.file 12 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\\\firmware\\u3p_firmware\\inc/cyu
 11946              		.file 13 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\\\firmware\\u3p_firmware\\inc/cyu
 11947              		.file 14 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\\\firmware\\u3p_firmware\\inc/cyu
 11948              		.file 15 "../cmdqu.h"
 11949              		.file 16 "../uvc.h"
 11950              		.file 17 "../cyfxgpif2config.h"
 11951              		.file 18 "../cyfxgpif2config_usb2_720.h"
 11952              		.file 19 "../sensor.h"
 11953              		.file 20 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\\\firmware\\u3p_firmware\\inc/cyu
 11954              		.file 21 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\\\firmware\\u3p_firmware\\inc/cyu
DEFINED SYMBOLS
                            *ABS*:00000000 uvc.c
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:16     .text:00000000 $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:18     .text:00000000 esUVCApplnLPMRqtCB
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:37     .text:00000008 I2CCmdCb
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:74     .text:00000038 $d
                            *COM*:00000004 posTick
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:80     .text:00000044 $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:83     .text:00000044 I2cAppThread_Entry
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:243    .text:0000018c $d
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:249    .text:0000019c $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:368    .text:00000288 $d
                            *COM*:0000002c I2CCmdTimer
                            *COM*:00000020 cmdQu
                            *COM*:00000020 statQu
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:380    .text:000002ac $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:383    .text:000002ac esUVCGpifCB
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:443    .text:00000310 $d
                            *COM*:000000e8 glChHandleUVCStream
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:451    .text:0000031c $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:454    .text:0000031c esUVCUvcAppDmaCallback
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:777    .text:00000568 $d
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:784    .text:00000578 $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:787    .text:00000578 I2CCmdHandler
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:923    .text:00000698 $d
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:928    .text:000006a0 $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:931    .text:000006a0 ControlHandle
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:1124   .text:00000818 $d
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:1166   .text:000008b4 $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:1221   .text:00000930 $d
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:1257   .text:000009b8 $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:2512   .text:00001548 $d
                            *COM*:00000001 bRequest
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:2532   .text:0000158c $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:2535   .text:0000158c CyFxAppErrorHandler
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:2561   .text:0000159c esUVCUvcApplnStart
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:2702   .text:00001698 $d
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:2711   .text:000016b0 $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:2713   .text:000016b0 esUVCUvcApplnUSBEventCB
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:3046   .text:00001958 $d
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:3056   .text:00001964 $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:3059   .text:00001964 esUVCUvcApplnStop
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:3150   .text:00001a08 $d
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:3156   .text:00001a14 $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:3158   .text:00001a14 esUVCUvcApplnUSBSetupCB
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:3788   .text:00001f38 $d
                            *COM*:00000020 glCommitCtrl
                            *COM*:00000020 glStillCommitCtrl
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:3810   .text:00001f84 $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:3813   .text:00001f84 esSetCameraResolution
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:3839   .text:00001fa8 $d
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:3843   .text:00001fac $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:3846   .text:00001fac esUVCUvcApplnInit
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:4557   .text:00002484 $d
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:4603   .text:00002528 $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:4606   .text:00002528 esUVCUvcApplnDebugInit
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:4721   .text:000025e8 $d
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:4729   .text:000025fc $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:4732   .text:000025fc CyFxUVCApplnI2CInit
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:4813   .text:00002674 $d
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:4821   .text:00002680 $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:4824   .text:00002680 UVCAppThread_Entry
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:4993   .text:000027b8 $d
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:5002   .text:000027c8 $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:5005   .text:000027c8 UVCAppEP0Thread_Entry
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:5064   .text:00002834 $d
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:5072   .text:00002844 $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:6904   .text:000036ec $d
                            *COM*:00000002 wIndex
                            *COM*:00000002 wValue
                            *COM*:00000004 glInterStaBuffer
                            *COM*:000000ac glChHandleInterStat
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:6939   .text:0000375c $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:9347   .text:00004894 $d
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:9362   .text:000048b4 $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:9365   .text:000048b4 CyFxApplicationDefine
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:9523   .text:000049f8 $d
                            *COM*:00000038 cmdQuMux
                            *COM*:00000038 staQuMux
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:9538   .text.startup:00000000 $a
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:9541   .text.startup:00000000 main
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11075  .data:00000618 glcheckframe
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11867  .bss:000000d4 glcommitcount
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11911  .bss:00000240 gl32GetControl
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11915  .bss:00000244 gl16GetControl
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11919  .bss:00000246 gl8SetControl
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11923  .bss:00000248 gl8GetControl
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11927  .bss:0000024a glGet_Info
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11087  .data:0000061b g_IsAutoFocus
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11885  .bss:000000e0 ES_UVC_STREAM_BUF_COUNT
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11795  .bss:0000006c ES_UVC_DATA_BUF_SIZE
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11881  .bss:000000de ES_UVC_STREAM_BUF_SIZE
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11817  .bss:00000080 glIsStreamingStarted
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11872  .bss:000000d8 glIsConfigured
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11851  .bss:000000c4 glIsApplnActive
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11834  .bss:00000090 glStillSkip
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11821  .bss:00000084 glStillCaptured
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11830  .bss:0000008c glStillCaptureStart
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11825  .bss:00000088 glFrameIndexToSet
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11876  .bss:000000dc glStillTriggerCtrl
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11079  .data:00000619 glCurrentStillFrameIndex
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:10740  .data:00000490 glCurrentFrameIndex
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:10725  .data:00000484 glUVCHeader
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11894  .bss:000000e8 usbSpeed
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11890  .bss:000000e4 isUsbConnected
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11863  .bss:000000d0 glPreviewStarted
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11859  .bss:000000cc glIsClearFeature
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11855  .bss:000000c8 glMipiActive
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11800  .bss:00000070 glHitFV
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:10721  .data:00000480 doLpmDisable
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11812  .bss:0000007c glActiveSocket
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11808  .bss:00000078 glDmaDone
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11804  .bss:00000074 glDMATxCount
                            *COM*:00000002 wLength
                            *COM*:00000001 bTarget
                            *COM*:00000001 bRType
                            *COM*:00000001 bType
                            *COM*:00000038 imgHdMux
                            *COM*:00000038 timMux
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11931  .bss:0000024b testSnap
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11083  .data:0000061a snapButFlag
                            *COM*:000000e8 glChHandleStillStream
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:9739   .rodata:0000002c CyFxGpifConfig_usb2
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11091  .data:0000061c CyFxGpifRegValue_usb2
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11170  .data:0000074c CyFxGpifWavedataPosition_usb2
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11321  .data:000007e0 CyFxGpifWavedata_usb2
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11432  .data:00000990 CyFxGpifTransition_usb2
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:9726   .rodata:00000010 CyFxGpifConfig
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11443  .data:000009a0 CyFxGpifRegValue
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11522  .data:00000ad0 CyFxGpifWavedataPosition
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11541  .data:00000ae0 CyFxGpifWavedata
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11616  .data:00000c00 CyFxGpifTransition
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:9703   .rodata:00000000 $d
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:9707   .rodata:00000000 ExTime
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:9751   .data:00000000 $d
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:9755   .data:00000000 ExUCtrlParArry
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:10078  .data:00000180 CtrlParArry
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:10745  .data:00000494 WBMenuCmpArry
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:10752  .data:00000498 CTCtrlParArry
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11623  .rodata.str1.4:00000000 $d
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11778  .bss:00000000 $d
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11782  .bss:00000000 glFxUVCEvent
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11786  .bss:00000028 timercount
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11791  .bss:0000002c curFlag
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11839  .bss:00000094 I2CCMDArry
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11843  .bss:000000a0 glEp0Buffer
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11847  .bss:000000c0 WDRflag
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11899  .bss:000000ec stiflag
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11903  .bss:000000f0 uvcAppThread
C:\Users\wcheng\AppData\Local\Temp\ccc1rJyf.s:11907  .bss:00000198 i2cAppThread
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CyU3PDebugPrint
_txe_event_flags_set
_txe_timer_create
_tx_time_get
_tx_thread_sleep
_txe_timer_activate
_txe_thread_relinquish
_txe_event_flags_get
_txe_mutex_get
_txe_mutex_put
SensorSetIrisControl
_txe_timer_change
memset
SensorSetControl
CyU3PDmaMultiChannelSetWrapUp
CyU3PGpifSMSwitch
CyU3PUsbLPMEnable
CyU3PUsbGetSpeed
CyU3PDmaMultiChannelGetBuffer
CyU3PMemCopy
CyU3PDmaMultiChannelCommitBuffer
CyU3PUsbLPMDisable
CyU3PUsbSetLinkPowerState
CyFx3BusyWait
SensorRead2B
SensorWrite2B
CyU3PUsbSendEP0Data
CyU3PUsbGetEP0Data
CyU3PUsbStall
memcpy
cmdSet
SensorGetControl
CyU3PUsbSetEpNak
CyU3PUsbFlushEp
CyU3PDmaMultiChannelReset
CyU3PDmaMultiChannelSetXfer
CyU3PGpifSMControl
CyU3PUsbAckSetup
glProbeCtrl
glStillProbeCtrl
glVga30ProbeCtrl
gl5MpProbeCtrl
glVga60ProbeCtrl
gl720pProbeCtrl
gl1080pProbeCtrl
CyU3PUsbStart
CyU3PUsbRegisterSetupCallback
CyU3PUsbRegisterEventCallback
CyU3PUsbRegisterLPMRequestCallback
CyU3PUsbSetDesc
CyU3PConnectState
CyU3PSetEpConfig
CyU3PUsbEPSetBurstMode
CyU3PDmaMultiChannelCreate
CyU3PGpifLoad
CyU3PGpifRegisterCallback
CyU3PGpifSMStart
CyFxUSBDeviceDscrSS
CyFxUSBDeviceDscr
CyFxUSBBOSDscr
CyFxUSBDeviceQualDscr
CyFxUSBSSConfigDscr
CyFxUSBHSConfigDscr
CyFxUSBFSConfigDscr
CyFxUSBStringLangIDDscr
CyFxUSBManufactureDscr
CyFxUSBProductDscr
CyU3PUartInit
CyU3PUartSetConfig
CyU3PUartTxSetBlockXfer
CyU3PDebugInit
CyU3PDebugPreamble
CyU3PI2cInit
CyU3PI2cSetConfig
CyU3PSysEnterSuspendMode
CyU3PGpioSimpleGetValue
CyU3PDmaChannelWaitForCompletion
CyU3PDmaChannelSetupSendBuffer
CyU3PMemAlloc
cmdbufCreate
cmdquInit
_txe_thread_create
_txe_event_flags_create
CyU3PDeviceInit
CyU3PDeviceCacheControl
CyU3PDeviceConfigureIOMatrix
_tx_initialize_kernel_enter
